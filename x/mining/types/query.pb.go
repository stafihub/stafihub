// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stafihub/stafihub/mining/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryStakePoolInfoRequest struct {
	StakePoolIndex uint32 `protobuf:"varint,1,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
}

func (m *QueryStakePoolInfoRequest) Reset()         { *m = QueryStakePoolInfoRequest{} }
func (m *QueryStakePoolInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakePoolInfoRequest) ProtoMessage()    {}
func (*QueryStakePoolInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{2}
}
func (m *QueryStakePoolInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakePoolInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakePoolInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakePoolInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakePoolInfoRequest.Merge(m, src)
}
func (m *QueryStakePoolInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakePoolInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakePoolInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakePoolInfoRequest proto.InternalMessageInfo

func (m *QueryStakePoolInfoRequest) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

type QueryStakePoolInfoResponse struct {
	StakePool *StakePool `protobuf:"bytes,1,opt,name=stakePool,proto3" json:"stakePool,omitempty"`
}

func (m *QueryStakePoolInfoResponse) Reset()         { *m = QueryStakePoolInfoResponse{} }
func (m *QueryStakePoolInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakePoolInfoResponse) ProtoMessage()    {}
func (*QueryStakePoolInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{3}
}
func (m *QueryStakePoolInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakePoolInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakePoolInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakePoolInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakePoolInfoResponse.Merge(m, src)
}
func (m *QueryStakePoolInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakePoolInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakePoolInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakePoolInfoResponse proto.InternalMessageInfo

func (m *QueryStakePoolInfoResponse) GetStakePool() *StakePool {
	if m != nil {
		return m.StakePool
	}
	return nil
}

type QueryStakeItemListRequest struct {
	StakePoolIndex uint32 `protobuf:"varint,1,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
}

func (m *QueryStakeItemListRequest) Reset()         { *m = QueryStakeItemListRequest{} }
func (m *QueryStakeItemListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeItemListRequest) ProtoMessage()    {}
func (*QueryStakeItemListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{4}
}
func (m *QueryStakeItemListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeItemListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeItemListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeItemListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeItemListRequest.Merge(m, src)
}
func (m *QueryStakeItemListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeItemListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeItemListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeItemListRequest proto.InternalMessageInfo

func (m *QueryStakeItemListRequest) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

type QueryStakeItemListResponse struct {
	StakeItemList []*StakeItem `protobuf:"bytes,1,rep,name=stakeItemList,proto3" json:"stakeItemList,omitempty"`
}

func (m *QueryStakeItemListResponse) Reset()         { *m = QueryStakeItemListResponse{} }
func (m *QueryStakeItemListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeItemListResponse) ProtoMessage()    {}
func (*QueryStakeItemListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{5}
}
func (m *QueryStakeItemListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeItemListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeItemListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeItemListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeItemListResponse.Merge(m, src)
}
func (m *QueryStakeItemListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeItemListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeItemListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeItemListResponse proto.InternalMessageInfo

func (m *QueryStakeItemListResponse) GetStakeItemList() []*StakeItem {
	if m != nil {
		return m.StakeItemList
	}
	return nil
}

type QueryStakeRewardRequest struct {
	StakeUserAddress string `protobuf:"bytes,1,opt,name=stakeUserAddress,proto3" json:"stakeUserAddress,omitempty"`
	StakePoolIndex   uint32 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
	StakeRecordIndex uint32 `protobuf:"varint,3,opt,name=stakeRecordIndex,proto3" json:"stakeRecordIndex,omitempty"`
}

func (m *QueryStakeRewardRequest) Reset()         { *m = QueryStakeRewardRequest{} }
func (m *QueryStakeRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRewardRequest) ProtoMessage()    {}
func (*QueryStakeRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{6}
}
func (m *QueryStakeRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRewardRequest.Merge(m, src)
}
func (m *QueryStakeRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRewardRequest proto.InternalMessageInfo

func (m *QueryStakeRewardRequest) GetStakeUserAddress() string {
	if m != nil {
		return m.StakeUserAddress
	}
	return ""
}

func (m *QueryStakeRewardRequest) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

func (m *QueryStakeRewardRequest) GetStakeRecordIndex() uint32 {
	if m != nil {
		return m.StakeRecordIndex
	}
	return 0
}

type QueryStakeRewardResponse struct {
	RewardTokens []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,rep,name=rewardTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"rewardTokens"`
}

func (m *QueryStakeRewardResponse) Reset()         { *m = QueryStakeRewardResponse{} }
func (m *QueryStakeRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRewardResponse) ProtoMessage()    {}
func (*QueryStakeRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{7}
}
func (m *QueryStakeRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRewardResponse.Merge(m, src)
}
func (m *QueryStakeRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRewardResponse proto.InternalMessageInfo

type QueryStakeRecordCountRequest struct {
	UserAddress    string `protobuf:"bytes,1,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	StakePoolIndex uint32 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
}

func (m *QueryStakeRecordCountRequest) Reset()         { *m = QueryStakeRecordCountRequest{} }
func (m *QueryStakeRecordCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRecordCountRequest) ProtoMessage()    {}
func (*QueryStakeRecordCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{8}
}
func (m *QueryStakeRecordCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRecordCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRecordCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRecordCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRecordCountRequest.Merge(m, src)
}
func (m *QueryStakeRecordCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRecordCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRecordCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRecordCountRequest proto.InternalMessageInfo

func (m *QueryStakeRecordCountRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *QueryStakeRecordCountRequest) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

type QueryStakeRecordCountResponse struct {
	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryStakeRecordCountResponse) Reset()         { *m = QueryStakeRecordCountResponse{} }
func (m *QueryStakeRecordCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRecordCountResponse) ProtoMessage()    {}
func (*QueryStakeRecordCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{9}
}
func (m *QueryStakeRecordCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRecordCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRecordCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRecordCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRecordCountResponse.Merge(m, src)
}
func (m *QueryStakeRecordCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRecordCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRecordCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRecordCountResponse proto.InternalMessageInfo

func (m *QueryStakeRecordCountResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryStakeRecordRequest struct {
	UserAddress      string `protobuf:"bytes,1,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	StakePoolIndex   uint32 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
	StakeRecordIndex uint32 `protobuf:"varint,3,opt,name=stakeRecordIndex,proto3" json:"stakeRecordIndex,omitempty"`
}

func (m *QueryStakeRecordRequest) Reset()         { *m = QueryStakeRecordRequest{} }
func (m *QueryStakeRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRecordRequest) ProtoMessage()    {}
func (*QueryStakeRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{10}
}
func (m *QueryStakeRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRecordRequest.Merge(m, src)
}
func (m *QueryStakeRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRecordRequest proto.InternalMessageInfo

func (m *QueryStakeRecordRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *QueryStakeRecordRequest) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

func (m *QueryStakeRecordRequest) GetStakeRecordIndex() uint32 {
	if m != nil {
		return m.StakeRecordIndex
	}
	return 0
}

type QueryStakeRecordResponse struct {
	StakeRecord *UserStakeRecord `protobuf:"bytes,1,opt,name=stakeRecord,proto3" json:"stakeRecord,omitempty"`
}

func (m *QueryStakeRecordResponse) Reset()         { *m = QueryStakeRecordResponse{} }
func (m *QueryStakeRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRecordResponse) ProtoMessage()    {}
func (*QueryStakeRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{11}
}
func (m *QueryStakeRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRecordResponse.Merge(m, src)
}
func (m *QueryStakeRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRecordResponse proto.InternalMessageInfo

func (m *QueryStakeRecordResponse) GetStakeRecord() *UserStakeRecord {
	if m != nil {
		return m.StakeRecord
	}
	return nil
}

type QueryStakeRecordListRequest struct {
	UserAddress    string `protobuf:"bytes,1,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	StakePoolIndex uint32 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
}

func (m *QueryStakeRecordListRequest) Reset()         { *m = QueryStakeRecordListRequest{} }
func (m *QueryStakeRecordListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRecordListRequest) ProtoMessage()    {}
func (*QueryStakeRecordListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{12}
}
func (m *QueryStakeRecordListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRecordListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRecordListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRecordListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRecordListRequest.Merge(m, src)
}
func (m *QueryStakeRecordListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRecordListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRecordListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRecordListRequest proto.InternalMessageInfo

func (m *QueryStakeRecordListRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *QueryStakeRecordListRequest) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

type QueryStakeRecordListResponse struct {
	StakeRecordList []*UserStakeRecord `protobuf:"bytes,1,rep,name=stakeRecordList,proto3" json:"stakeRecordList,omitempty"`
}

func (m *QueryStakeRecordListResponse) Reset()         { *m = QueryStakeRecordListResponse{} }
func (m *QueryStakeRecordListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRecordListResponse) ProtoMessage()    {}
func (*QueryStakeRecordListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{13}
}
func (m *QueryStakeRecordListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRecordListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRecordListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRecordListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRecordListResponse.Merge(m, src)
}
func (m *QueryStakeRecordListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRecordListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRecordListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRecordListResponse proto.InternalMessageInfo

func (m *QueryStakeRecordListResponse) GetStakeRecordList() []*UserStakeRecord {
	if m != nil {
		return m.StakeRecordList
	}
	return nil
}

type QueryStakePoolListRequest struct {
}

func (m *QueryStakePoolListRequest) Reset()         { *m = QueryStakePoolListRequest{} }
func (m *QueryStakePoolListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakePoolListRequest) ProtoMessage()    {}
func (*QueryStakePoolListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{14}
}
func (m *QueryStakePoolListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakePoolListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakePoolListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakePoolListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakePoolListRequest.Merge(m, src)
}
func (m *QueryStakePoolListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakePoolListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakePoolListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakePoolListRequest proto.InternalMessageInfo

type QueryStakePoolListResponse struct {
	StakePoolList []*StakePool `protobuf:"bytes,1,rep,name=stakePoolList,proto3" json:"stakePoolList,omitempty"`
}

func (m *QueryStakePoolListResponse) Reset()         { *m = QueryStakePoolListResponse{} }
func (m *QueryStakePoolListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakePoolListResponse) ProtoMessage()    {}
func (*QueryStakePoolListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{15}
}
func (m *QueryStakePoolListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakePoolListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakePoolListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakePoolListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakePoolListResponse.Merge(m, src)
}
func (m *QueryStakePoolListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakePoolListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakePoolListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakePoolListResponse proto.InternalMessageInfo

func (m *QueryStakePoolListResponse) GetStakePoolList() []*StakePool {
	if m != nil {
		return m.StakePoolList
	}
	return nil
}

type QueryMiningProviderListRequest struct {
}

func (m *QueryMiningProviderListRequest) Reset()         { *m = QueryMiningProviderListRequest{} }
func (m *QueryMiningProviderListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMiningProviderListRequest) ProtoMessage()    {}
func (*QueryMiningProviderListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{16}
}
func (m *QueryMiningProviderListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMiningProviderListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMiningProviderListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMiningProviderListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMiningProviderListRequest.Merge(m, src)
}
func (m *QueryMiningProviderListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMiningProviderListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMiningProviderListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMiningProviderListRequest proto.InternalMessageInfo

type QueryMiningProviderListResponse struct {
	MiningProviderList []string `protobuf:"bytes,1,rep,name=miningProviderList,proto3" json:"miningProviderList,omitempty"`
}

func (m *QueryMiningProviderListResponse) Reset()         { *m = QueryMiningProviderListResponse{} }
func (m *QueryMiningProviderListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMiningProviderListResponse) ProtoMessage()    {}
func (*QueryMiningProviderListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{17}
}
func (m *QueryMiningProviderListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMiningProviderListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMiningProviderListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMiningProviderListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMiningProviderListResponse.Merge(m, src)
}
func (m *QueryMiningProviderListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMiningProviderListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMiningProviderListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMiningProviderListResponse proto.InternalMessageInfo

func (m *QueryMiningProviderListResponse) GetMiningProviderList() []string {
	if m != nil {
		return m.MiningProviderList
	}
	return nil
}

type QueryRewardTokenListRequest struct {
}

func (m *QueryRewardTokenListRequest) Reset()         { *m = QueryRewardTokenListRequest{} }
func (m *QueryRewardTokenListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardTokenListRequest) ProtoMessage()    {}
func (*QueryRewardTokenListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{18}
}
func (m *QueryRewardTokenListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardTokenListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardTokenListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardTokenListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardTokenListRequest.Merge(m, src)
}
func (m *QueryRewardTokenListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardTokenListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardTokenListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardTokenListRequest proto.InternalMessageInfo

type QueryRewardTokenListResponse struct {
	RewardTokenList []*RewardToken `protobuf:"bytes,1,rep,name=rewardTokenList,proto3" json:"rewardTokenList,omitempty"`
}

func (m *QueryRewardTokenListResponse) Reset()         { *m = QueryRewardTokenListResponse{} }
func (m *QueryRewardTokenListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardTokenListResponse) ProtoMessage()    {}
func (*QueryRewardTokenListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{19}
}
func (m *QueryRewardTokenListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardTokenListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardTokenListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardTokenListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardTokenListResponse.Merge(m, src)
}
func (m *QueryRewardTokenListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardTokenListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardTokenListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardTokenListResponse proto.InternalMessageInfo

func (m *QueryRewardTokenListResponse) GetRewardTokenList() []*RewardToken {
	if m != nil {
		return m.RewardTokenList
	}
	return nil
}

type QueryMaxRewardPoolNumberRequest struct {
}

func (m *QueryMaxRewardPoolNumberRequest) Reset()         { *m = QueryMaxRewardPoolNumberRequest{} }
func (m *QueryMaxRewardPoolNumberRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMaxRewardPoolNumberRequest) ProtoMessage()    {}
func (*QueryMaxRewardPoolNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{20}
}
func (m *QueryMaxRewardPoolNumberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMaxRewardPoolNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMaxRewardPoolNumberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMaxRewardPoolNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMaxRewardPoolNumberRequest.Merge(m, src)
}
func (m *QueryMaxRewardPoolNumberRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMaxRewardPoolNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMaxRewardPoolNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMaxRewardPoolNumberRequest proto.InternalMessageInfo

type QueryMaxRewardPoolNumberResponse struct {
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *QueryMaxRewardPoolNumberResponse) Reset()         { *m = QueryMaxRewardPoolNumberResponse{} }
func (m *QueryMaxRewardPoolNumberResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMaxRewardPoolNumberResponse) ProtoMessage()    {}
func (*QueryMaxRewardPoolNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{21}
}
func (m *QueryMaxRewardPoolNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMaxRewardPoolNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMaxRewardPoolNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMaxRewardPoolNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMaxRewardPoolNumberResponse.Merge(m, src)
}
func (m *QueryMaxRewardPoolNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMaxRewardPoolNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMaxRewardPoolNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMaxRewardPoolNumberResponse proto.InternalMessageInfo

func (m *QueryMaxRewardPoolNumberResponse) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type QueryMaxStakeItemNumberRequest struct {
}

func (m *QueryMaxStakeItemNumberRequest) Reset()         { *m = QueryMaxStakeItemNumberRequest{} }
func (m *QueryMaxStakeItemNumberRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMaxStakeItemNumberRequest) ProtoMessage()    {}
func (*QueryMaxStakeItemNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{22}
}
func (m *QueryMaxStakeItemNumberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMaxStakeItemNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMaxStakeItemNumberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMaxStakeItemNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMaxStakeItemNumberRequest.Merge(m, src)
}
func (m *QueryMaxStakeItemNumberRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMaxStakeItemNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMaxStakeItemNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMaxStakeItemNumberRequest proto.InternalMessageInfo

type QueryMaxStakeItemNumberResponse struct {
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *QueryMaxStakeItemNumberResponse) Reset()         { *m = QueryMaxStakeItemNumberResponse{} }
func (m *QueryMaxStakeItemNumberResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMaxStakeItemNumberResponse) ProtoMessage()    {}
func (*QueryMaxStakeItemNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{23}
}
func (m *QueryMaxStakeItemNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMaxStakeItemNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMaxStakeItemNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMaxStakeItemNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMaxStakeItemNumberResponse.Merge(m, src)
}
func (m *QueryMaxStakeItemNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMaxStakeItemNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMaxStakeItemNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMaxStakeItemNumberResponse proto.InternalMessageInfo

func (m *QueryMaxStakeItemNumberResponse) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type QueryProviderSwitchRequest struct {
}

func (m *QueryProviderSwitchRequest) Reset()         { *m = QueryProviderSwitchRequest{} }
func (m *QueryProviderSwitchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProviderSwitchRequest) ProtoMessage()    {}
func (*QueryProviderSwitchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{24}
}
func (m *QueryProviderSwitchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProviderSwitchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProviderSwitchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProviderSwitchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderSwitchRequest.Merge(m, src)
}
func (m *QueryProviderSwitchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProviderSwitchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderSwitchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderSwitchRequest proto.InternalMessageInfo

type QueryProviderSwitchResponse struct {
	ProviderSwitch bool `protobuf:"varint,1,opt,name=providerSwitch,proto3" json:"providerSwitch,omitempty"`
}

func (m *QueryProviderSwitchResponse) Reset()         { *m = QueryProviderSwitchResponse{} }
func (m *QueryProviderSwitchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProviderSwitchResponse) ProtoMessage()    {}
func (*QueryProviderSwitchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f9c3d028028de5a, []int{25}
}
func (m *QueryProviderSwitchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProviderSwitchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProviderSwitchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProviderSwitchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderSwitchResponse.Merge(m, src)
}
func (m *QueryProviderSwitchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProviderSwitchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderSwitchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderSwitchResponse proto.InternalMessageInfo

func (m *QueryProviderSwitchResponse) GetProviderSwitch() bool {
	if m != nil {
		return m.ProviderSwitch
	}
	return false
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "stafihub.stafihub.mining.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "stafihub.stafihub.mining.QueryParamsResponse")
	proto.RegisterType((*QueryStakePoolInfoRequest)(nil), "stafihub.stafihub.mining.QueryStakePoolInfoRequest")
	proto.RegisterType((*QueryStakePoolInfoResponse)(nil), "stafihub.stafihub.mining.QueryStakePoolInfoResponse")
	proto.RegisterType((*QueryStakeItemListRequest)(nil), "stafihub.stafihub.mining.QueryStakeItemListRequest")
	proto.RegisterType((*QueryStakeItemListResponse)(nil), "stafihub.stafihub.mining.QueryStakeItemListResponse")
	proto.RegisterType((*QueryStakeRewardRequest)(nil), "stafihub.stafihub.mining.QueryStakeRewardRequest")
	proto.RegisterType((*QueryStakeRewardResponse)(nil), "stafihub.stafihub.mining.QueryStakeRewardResponse")
	proto.RegisterType((*QueryStakeRecordCountRequest)(nil), "stafihub.stafihub.mining.QueryStakeRecordCountRequest")
	proto.RegisterType((*QueryStakeRecordCountResponse)(nil), "stafihub.stafihub.mining.QueryStakeRecordCountResponse")
	proto.RegisterType((*QueryStakeRecordRequest)(nil), "stafihub.stafihub.mining.QueryStakeRecordRequest")
	proto.RegisterType((*QueryStakeRecordResponse)(nil), "stafihub.stafihub.mining.QueryStakeRecordResponse")
	proto.RegisterType((*QueryStakeRecordListRequest)(nil), "stafihub.stafihub.mining.QueryStakeRecordListRequest")
	proto.RegisterType((*QueryStakeRecordListResponse)(nil), "stafihub.stafihub.mining.QueryStakeRecordListResponse")
	proto.RegisterType((*QueryStakePoolListRequest)(nil), "stafihub.stafihub.mining.QueryStakePoolListRequest")
	proto.RegisterType((*QueryStakePoolListResponse)(nil), "stafihub.stafihub.mining.QueryStakePoolListResponse")
	proto.RegisterType((*QueryMiningProviderListRequest)(nil), "stafihub.stafihub.mining.QueryMiningProviderListRequest")
	proto.RegisterType((*QueryMiningProviderListResponse)(nil), "stafihub.stafihub.mining.QueryMiningProviderListResponse")
	proto.RegisterType((*QueryRewardTokenListRequest)(nil), "stafihub.stafihub.mining.QueryRewardTokenListRequest")
	proto.RegisterType((*QueryRewardTokenListResponse)(nil), "stafihub.stafihub.mining.QueryRewardTokenListResponse")
	proto.RegisterType((*QueryMaxRewardPoolNumberRequest)(nil), "stafihub.stafihub.mining.QueryMaxRewardPoolNumberRequest")
	proto.RegisterType((*QueryMaxRewardPoolNumberResponse)(nil), "stafihub.stafihub.mining.QueryMaxRewardPoolNumberResponse")
	proto.RegisterType((*QueryMaxStakeItemNumberRequest)(nil), "stafihub.stafihub.mining.QueryMaxStakeItemNumberRequest")
	proto.RegisterType((*QueryMaxStakeItemNumberResponse)(nil), "stafihub.stafihub.mining.QueryMaxStakeItemNumberResponse")
	proto.RegisterType((*QueryProviderSwitchRequest)(nil), "stafihub.stafihub.mining.QueryProviderSwitchRequest")
	proto.RegisterType((*QueryProviderSwitchResponse)(nil), "stafihub.stafihub.mining.QueryProviderSwitchResponse")
}

func init() {
	proto.RegisterFile("stafihub/stafihub/mining/query.proto", fileDescriptor_0f9c3d028028de5a)
}

var fileDescriptor_0f9c3d028028de5a = []byte{
	// 1210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xb6, 0x34, 0xa2, 0x13, 0x92, 0x54, 0x93, 0x08, 0xd2, 0x6d, 0xea, 0x98, 0x81, 0x96,
	0xb6, 0x21, 0xbb, 0x75, 0x42, 0xd2, 0x26, 0x42, 0x48, 0x4d, 0xd4, 0x43, 0x68, 0x0b, 0xe9, 0x86,
	0x4a, 0xa8, 0x12, 0x32, 0x6b, 0x7b, 0xb2, 0x59, 0xc5, 0xde, 0x71, 0x77, 0xd6, 0xad, 0xab, 0x2a,
	0x17, 0x8e, 0x5c, 0x8a, 0xc4, 0x89, 0x0f, 0x51, 0x89, 0x0b, 0x57, 0x24, 0x38, 0xa0, 0x1e, 0x2b,
	0x81, 0x50, 0x05, 0x52, 0x55, 0x25, 0x7c, 0x10, 0xb4, 0x33, 0x6f, 0xed, 0xd9, 0x5d, 0x6f, 0x76,
	0x1d, 0xf5, 0x14, 0x7b, 0xde, 0xbf, 0xdf, 0xef, 0xbd, 0x37, 0x6f, 0x9e, 0x83, 0x3e, 0xe4, 0x81,
	0xbd, 0xe3, 0xee, 0x76, 0x6a, 0x66, 0xef, 0x43, 0xcb, 0xf5, 0x5c, 0xcf, 0x31, 0x1f, 0x74, 0xa8,
	0xff, 0xd8, 0x68, 0xfb, 0x2c, 0x60, 0x78, 0x26, 0x12, 0x1a, 0xbd, 0x0f, 0x52, 0x4b, 0x9f, 0x76,
	0x98, 0xc3, 0x84, 0x92, 0x19, 0x7e, 0x92, 0xfa, 0xfa, 0xac, 0xc3, 0x98, 0xd3, 0xa4, 0xa6, 0xdd,
	0x76, 0x4d, 0xdb, 0xf3, 0x58, 0x60, 0x07, 0x2e, 0xf3, 0x38, 0x48, 0xaf, 0xd4, 0x19, 0x6f, 0x31,
	0x6e, 0xd6, 0x6c, 0x4e, 0x65, 0x18, 0xf3, 0x61, 0xa5, 0x46, 0x03, 0xbb, 0x62, 0xb6, 0x6d, 0xc7,
	0xf5, 0x84, 0x32, 0xe8, 0x5e, 0xc8, 0xc4, 0xd7, 0xb6, 0x7d, 0xbb, 0xc5, 0x73, 0xd5, 0x5a, 0xac,
	0x41, 0x9b, 0x91, 0x5a, 0x49, 0x8d, 0x1c, 0xc5, 0xac, 0x33, 0x17, 0xa2, 0x91, 0x69, 0x84, 0xef,
	0x86, 0x78, 0xb6, 0x84, 0x6f, 0x8b, 0x3e, 0xe8, 0x50, 0x1e, 0x90, 0x7b, 0x68, 0x2a, 0x76, 0xca,
	0xdb, 0xcc, 0xe3, 0x14, 0x7f, 0x86, 0x46, 0x25, 0x86, 0x19, 0xad, 0xac, 0x5d, 0x1a, 0x5b, 0x2c,
	0x1b, 0x59, 0x59, 0x32, 0xa4, 0xe5, 0xfa, 0x5b, 0xcf, 0x5f, 0xcd, 0x8d, 0x58, 0x60, 0x45, 0x36,
	0xd0, 0x59, 0xe1, 0x76, 0x3b, 0xb0, 0xf7, 0xe8, 0x16, 0x63, 0xcd, 0x4d, 0x6f, 0x87, 0x41, 0x4c,
	0x7c, 0x11, 0x4d, 0xf0, 0xfe, 0x79, 0x83, 0x76, 0x45, 0x90, 0x71, 0x2b, 0x71, 0x4a, 0xaa, 0x48,
	0x1f, 0xe4, 0x04, 0x20, 0xde, 0x40, 0xa7, 0x7b, 0xfa, 0x80, 0xf2, 0x83, 0x6c, 0x94, 0x3d, 0x1f,
	0x56, 0xdf, 0x2a, 0x8e, 0x72, 0x33, 0xa0, 0xad, 0xdb, 0x2e, 0x0f, 0x86, 0x45, 0xe9, 0xa8, 0x28,
	0xfb, 0x4e, 0x00, 0xe5, 0x26, 0x1a, 0xe7, 0xaa, 0x60, 0x46, 0x2b, 0x9f, 0x2c, 0x80, 0x34, 0x54,
	0xb7, 0xe2, 0x96, 0xe4, 0x27, 0x0d, 0xbd, 0xd7, 0x8f, 0x64, 0xd1, 0x47, 0xb6, 0xdf, 0x88, 0xc0,
	0x5e, 0x41, 0x67, 0x84, 0xf2, 0x3d, 0x4e, 0xfd, 0x1b, 0x8d, 0x86, 0x4f, 0xb9, 0xac, 0xdc, 0x69,
	0x2b, 0x75, 0x3e, 0x80, 0xd8, 0x89, 0x41, 0xc4, 0x7a, 0x3e, 0x2d, 0x5a, 0x67, 0x7e, 0x43, 0x6a,
	0x9e, 0x14, 0x9a, 0xa9, 0x73, 0xf2, 0xbd, 0x86, 0x66, 0xd2, 0xd8, 0x20, 0x07, 0x1e, 0x7a, 0xc7,
	0x17, 0x27, 0x5f, 0xb1, 0x3d, 0xea, 0x71, 0x48, 0xc1, 0x59, 0x43, 0x36, 0xac, 0x11, 0x36, 0xac,
	0x01, 0x0d, 0x6b, 0x6c, 0x30, 0xd7, 0x5b, 0x37, 0xc3, 0x5e, 0xfa, 0xe7, 0xd5, 0xdc, 0x47, 0x8e,
	0x1b, 0x84, 0x99, 0xa9, 0xb3, 0x96, 0x09, 0xdd, 0x2d, 0xff, 0x2c, 0xf0, 0xc6, 0x9e, 0x19, 0x3c,
	0x6e, 0x53, 0x2e, 0x0c, 0xac, 0x98, 0x7f, 0xb2, 0x8b, 0x66, 0x55, 0x2c, 0x21, 0xca, 0x0d, 0xd6,
	0xf1, 0x7a, 0x95, 0x2d, 0xa3, 0xb1, 0x4e, 0x2a, 0x4f, 0xea, 0x51, 0xd1, 0x14, 0x91, 0x65, 0x74,
	0x3e, 0x23, 0x12, 0x50, 0x9f, 0x46, 0xa7, 0xea, 0xe1, 0x01, 0xf4, 0x8e, 0xfc, 0x42, 0x9e, 0x26,
	0x2a, 0x19, 0xda, 0xbd, 0x71, 0x70, 0x43, 0xd5, 0xcf, 0x89, 0x97, 0x4f, 0x02, 0x02, 0x0e, 0xb7,
	0xd0, 0x98, 0xa2, 0x0f, 0x57, 0xed, 0x72, 0x76, 0x03, 0x87, 0xbd, 0xa6, 0xfa, 0x51, 0xad, 0x89,
	0x83, 0xce, 0x25, 0x03, 0xa9, 0x97, 0xee, 0xcd, 0x95, 0x86, 0xa7, 0x9b, 0x20, 0x76, 0x31, 0xb7,
	0xd1, 0x24, 0x8f, 0x8b, 0xa0, 0x2f, 0x87, 0x60, 0x96, 0xf4, 0x40, 0xce, 0x25, 0xc7, 0x9e, 0xc2,
	0x2d, 0x3e, 0x28, 0xfa, 0xc2, 0xc4, 0xa0, 0x88, 0x04, 0x05, 0x07, 0x85, 0x18, 0x69, 0x71, 0x4b,
	0x52, 0x46, 0x25, 0x11, 0xe8, 0x8e, 0xd0, 0xdb, 0xf2, 0xd9, 0x43, 0xb7, 0x41, 0x7d, 0x15, 0xca,
	0x5d, 0x34, 0x97, 0xa9, 0x01, 0x78, 0x0c, 0x84, 0x5b, 0x29, 0xa9, 0x00, 0x75, 0xda, 0x1a, 0x20,
	0x21, 0xe7, 0xa1, 0xb0, 0x56, 0xff, 0x26, 0xaa, 0x11, 0x19, 0x94, 0x23, 0x25, 0x86, 0x70, 0x5f,
	0xa2, 0x49, 0x3f, 0x2e, 0x82, 0x04, 0x5c, 0xc8, 0x4e, 0x80, 0xe2, 0xcb, 0x4a, 0x5a, 0x93, 0xf7,
	0x23, 0x8a, 0x76, 0x57, 0xea, 0x85, 0xe9, 0xf9, 0xa2, 0xd3, 0xaa, 0x51, 0x3f, 0xc2, 0xb4, 0x86,
	0xca, 0xd9, 0x2a, 0x80, 0xeb, 0x5d, 0x34, 0xea, 0x89, 0x13, 0xb8, 0xc1, 0xf0, 0xad, 0x9f, 0x63,
	0xbb, 0xdb, 0x1b, 0xd8, 0x71, 0xef, 0xab, 0x7d, 0x00, 0x29, 0x8d, 0x1c, 0xe7, 0xb3, 0xd0, 0x29,
	0x51, 0x82, 0xb7, 0x1f, 0xb9, 0x41, 0x7d, 0x37, 0x72, 0x7c, 0x13, 0x32, 0x9d, 0x94, 0x82, 0xd3,
	0x8b, 0x68, 0xa2, 0x1d, 0x93, 0x08, 0xe7, 0x6f, 0x5b, 0x89, 0xd3, 0xc5, 0xd7, 0x53, 0xe8, 0x94,
	0xf0, 0x83, 0x9f, 0x6a, 0x68, 0x54, 0xbe, 0xe2, 0xf8, 0xe3, 0xec, 0x6c, 0xa7, 0x97, 0x07, 0x7d,
	0xa1, 0xa0, 0xb6, 0x44, 0x46, 0x2e, 0x7d, 0xf7, 0xe7, 0x7f, 0x3f, 0x9e, 0x20, 0xb8, 0x6c, 0xe6,
	0x2c, 0x3e, 0xf8, 0x57, 0x0d, 0x8d, 0xc7, 0x5e, 0x7d, 0xbc, 0x94, 0x13, 0x6a, 0xd0, 0xa2, 0xa1,
	0x7f, 0x32, 0x9c, 0x11, 0xc0, 0x5c, 0x17, 0x30, 0x3f, 0xc5, 0x6b, 0xd9, 0x30, 0xc5, 0x7d, 0xab,
	0xb6, 0x19, 0x6b, 0x56, 0x5d, 0x6f, 0x87, 0x99, 0x4f, 0xe2, 0xc3, 0x67, 0x1f, 0x3f, 0x8b, 0x08,
	0x44, 0xaf, 0x77, 0x31, 0x02, 0x89, 0x1d, 0xa4, 0x18, 0x81, 0xe4, 0xce, 0x41, 0x2a, 0x82, 0xc0,
	0x3c, 0xbe, 0x9c, 0x47, 0xc0, 0x0d, 0x68, 0xab, 0xda, 0x0c, 0xd1, 0xfd, 0xab, 0xa1, 0x31, 0xe5,
	0xe9, 0xc6, 0x95, 0x22, 0x81, 0x63, 0x2b, 0x88, 0xbe, 0x38, 0x8c, 0x09, 0x20, 0xa5, 0x02, 0x69,
	0x15, 0x7f, 0x93, 0x87, 0x54, 0xde, 0x6e, 0xc8, 0xb3, 0xb2, 0xcc, 0xec, 0xa7, 0x52, 0x0f, 0x07,
	0xca, 0xe3, 0xb6, 0x8f, 0x5f, 0x6a, 0xe8, 0x4c, 0xf2, 0x89, 0xc6, 0x2b, 0xc5, 0xf0, 0x26, 0xb7,
	0x07, 0xfd, 0xda, 0xd0, 0x76, 0x40, 0x76, 0x5b, 0x90, 0xbd, 0x83, 0x6f, 0xe5, 0x93, 0x0d, 0x8d,
	0xab, 0x62, 0x57, 0x30, 0x9f, 0x74, 0x8e, 0x62, 0x8b, 0xff, 0xee, 0x17, 0x2e, 0x34, 0x2a, 0x5a,
	0x38, 0x65, 0xe3, 0x28, 0x5a, 0x38, 0x75, 0x27, 0x20, 0xdf, 0x0a, 0x2e, 0xf7, 0xf1, 0xd7, 0xc5,
	0xb8, 0xe4, 0xb0, 0x18, 0x54, 0xb3, 0xbf, 0x34, 0x34, 0x99, 0x78, 0xbb, 0xf1, 0x72, 0x71, 0xa4,
	0xea, 0x2d, 0x5a, 0x19, 0xd6, 0x0c, 0x48, 0x5a, 0x82, 0xe4, 0x6d, 0xfc, 0x79, 0xc1, 0x82, 0x85,
	0x37, 0x29, 0xaf, 0x5e, 0xcf, 0xd4, 0xc9, 0x56, 0x7c, 0x30, 0x24, 0x76, 0x89, 0xe2, 0x93, 0xed,
	0x78, 0x83, 0x41, 0x4c, 0x36, 0x31, 0x18, 0x7e, 0xd3, 0x10, 0x4e, 0x6f, 0x09, 0xf8, 0x7a, 0x4e,
	0xfc, 0xcc, 0xd5, 0x43, 0x5f, 0x3d, 0x86, 0x25, 0xc0, 0x5f, 0x11, 0xf0, 0xaf, 0x62, 0x23, 0x1b,
	0xbe, 0xfc, 0x53, 0x8d, 0x9e, 0x3a, 0xc9, 0xe1, 0x17, 0x0d, 0x4d, 0x26, 0xf6, 0x8e, 0xdc, 0x56,
	0x1a, 0xbc, 0xc6, 0xe4, 0xb6, 0x52, 0xc6, 0x7a, 0x43, 0x96, 0x04, 0xf4, 0x05, 0x3c, 0x9f, 0x0d,
	0x5d, 0x8e, 0xb8, 0x6a, 0x10, 0xda, 0x4a, 0xdc, 0x7f, 0x68, 0x68, 0x6a, 0xc0, 0x6e, 0x82, 0x73,
	0x53, 0x98, 0xb9, 0xf2, 0xe8, 0x6b, 0xc7, 0x31, 0x05, 0x0e, 0xd7, 0x05, 0x87, 0x45, 0x7c, 0xf5,
	0x88, 0xf4, 0xdb, 0x5d, 0x18, 0xd5, 0xb2, 0x85, 0xe4, 0x3e, 0x83, 0x7f, 0x0f, 0x9b, 0x28, 0xb5,
	0x06, 0xe5, 0x37, 0x51, 0xd6, 0x6e, 0xa5, 0xaf, 0x1e, 0xc3, 0x12, 0x58, 0x5c, 0x13, 0x2c, 0x2a,
	0xd8, 0x3c, 0x9a, 0x85, 0xf2, 0x40, 0x02, 0x89, 0x9f, 0x35, 0x34, 0x11, 0x5f, 0xb9, 0x70, 0xde,
	0x2d, 0x1c, 0xb8, 0xbf, 0xe9, 0xcb, 0x43, 0x5a, 0x15, 0xbf, 0xbc, 0xbd, 0xb6, 0xe7, 0xc2, 0x74,
	0xfd, 0xe6, 0xf3, 0x83, 0x92, 0xf6, 0xe2, 0xa0, 0xa4, 0xbd, 0x3e, 0x28, 0x69, 0x3f, 0x1c, 0x96,
	0x46, 0x5e, 0x1c, 0x96, 0x46, 0x5e, 0x1e, 0x96, 0x46, 0xee, 0xcf, 0x2b, 0xbf, 0xac, 0xd3, 0xee,
	0xba, 0x91, 0x43, 0xf1, 0x13, 0xbb, 0x36, 0x2a, 0xfe, 0x81, 0xb4, 0xf4, 0x7f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x04, 0x21, 0x91, 0x9c, 0x50, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of StakePoolInfo items.
	StakePoolInfo(ctx context.Context, in *QueryStakePoolInfoRequest, opts ...grpc.CallOption) (*QueryStakePoolInfoResponse, error)
	// Queries a list of StakeItemList items.
	StakeItemList(ctx context.Context, in *QueryStakeItemListRequest, opts ...grpc.CallOption) (*QueryStakeItemListResponse, error)
	// Queries a list of StakeReward items.
	StakeReward(ctx context.Context, in *QueryStakeRewardRequest, opts ...grpc.CallOption) (*QueryStakeRewardResponse, error)
	// Queries a list of StakeRecordCount items.
	StakeRecordCount(ctx context.Context, in *QueryStakeRecordCountRequest, opts ...grpc.CallOption) (*QueryStakeRecordCountResponse, error)
	// Queries a list of StakeRecord items.
	StakeRecord(ctx context.Context, in *QueryStakeRecordRequest, opts ...grpc.CallOption) (*QueryStakeRecordResponse, error)
	// Queries a list of StakeRecordList items.
	StakeRecordList(ctx context.Context, in *QueryStakeRecordListRequest, opts ...grpc.CallOption) (*QueryStakeRecordListResponse, error)
	// Queries a list of StakePoolList items.
	StakePoolList(ctx context.Context, in *QueryStakePoolListRequest, opts ...grpc.CallOption) (*QueryStakePoolListResponse, error)
	// Queries a list of MiningProviderList items.
	MiningProviderList(ctx context.Context, in *QueryMiningProviderListRequest, opts ...grpc.CallOption) (*QueryMiningProviderListResponse, error)
	// Queries a list of RewardTokenList items.
	RewardTokenList(ctx context.Context, in *QueryRewardTokenListRequest, opts ...grpc.CallOption) (*QueryRewardTokenListResponse, error)
	// Queries a list of MaxRewardPoolNumber items.
	MaxRewardPoolNumber(ctx context.Context, in *QueryMaxRewardPoolNumberRequest, opts ...grpc.CallOption) (*QueryMaxRewardPoolNumberResponse, error)
	// Queries a list of MaxStakeItemNumber items.
	MaxStakeItemNumber(ctx context.Context, in *QueryMaxStakeItemNumberRequest, opts ...grpc.CallOption) (*QueryMaxStakeItemNumberResponse, error)
	// Queries a list of ProviderSwitch items.
	ProviderSwitch(ctx context.Context, in *QueryProviderSwitchRequest, opts ...grpc.CallOption) (*QueryProviderSwitchResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakePoolInfo(ctx context.Context, in *QueryStakePoolInfoRequest, opts ...grpc.CallOption) (*QueryStakePoolInfoResponse, error) {
	out := new(QueryStakePoolInfoResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Query/StakePoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeItemList(ctx context.Context, in *QueryStakeItemListRequest, opts ...grpc.CallOption) (*QueryStakeItemListResponse, error) {
	out := new(QueryStakeItemListResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Query/StakeItemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeReward(ctx context.Context, in *QueryStakeRewardRequest, opts ...grpc.CallOption) (*QueryStakeRewardResponse, error) {
	out := new(QueryStakeRewardResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Query/StakeReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeRecordCount(ctx context.Context, in *QueryStakeRecordCountRequest, opts ...grpc.CallOption) (*QueryStakeRecordCountResponse, error) {
	out := new(QueryStakeRecordCountResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Query/StakeRecordCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeRecord(ctx context.Context, in *QueryStakeRecordRequest, opts ...grpc.CallOption) (*QueryStakeRecordResponse, error) {
	out := new(QueryStakeRecordResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Query/StakeRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeRecordList(ctx context.Context, in *QueryStakeRecordListRequest, opts ...grpc.CallOption) (*QueryStakeRecordListResponse, error) {
	out := new(QueryStakeRecordListResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Query/StakeRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakePoolList(ctx context.Context, in *QueryStakePoolListRequest, opts ...grpc.CallOption) (*QueryStakePoolListResponse, error) {
	out := new(QueryStakePoolListResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Query/StakePoolList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MiningProviderList(ctx context.Context, in *QueryMiningProviderListRequest, opts ...grpc.CallOption) (*QueryMiningProviderListResponse, error) {
	out := new(QueryMiningProviderListResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Query/MiningProviderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardTokenList(ctx context.Context, in *QueryRewardTokenListRequest, opts ...grpc.CallOption) (*QueryRewardTokenListResponse, error) {
	out := new(QueryRewardTokenListResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Query/RewardTokenList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MaxRewardPoolNumber(ctx context.Context, in *QueryMaxRewardPoolNumberRequest, opts ...grpc.CallOption) (*QueryMaxRewardPoolNumberResponse, error) {
	out := new(QueryMaxRewardPoolNumberResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Query/MaxRewardPoolNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MaxStakeItemNumber(ctx context.Context, in *QueryMaxStakeItemNumberRequest, opts ...grpc.CallOption) (*QueryMaxStakeItemNumberResponse, error) {
	out := new(QueryMaxStakeItemNumberResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Query/MaxStakeItemNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProviderSwitch(ctx context.Context, in *QueryProviderSwitchRequest, opts ...grpc.CallOption) (*QueryProviderSwitchResponse, error) {
	out := new(QueryProviderSwitchResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Query/ProviderSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of StakePoolInfo items.
	StakePoolInfo(context.Context, *QueryStakePoolInfoRequest) (*QueryStakePoolInfoResponse, error)
	// Queries a list of StakeItemList items.
	StakeItemList(context.Context, *QueryStakeItemListRequest) (*QueryStakeItemListResponse, error)
	// Queries a list of StakeReward items.
	StakeReward(context.Context, *QueryStakeRewardRequest) (*QueryStakeRewardResponse, error)
	// Queries a list of StakeRecordCount items.
	StakeRecordCount(context.Context, *QueryStakeRecordCountRequest) (*QueryStakeRecordCountResponse, error)
	// Queries a list of StakeRecord items.
	StakeRecord(context.Context, *QueryStakeRecordRequest) (*QueryStakeRecordResponse, error)
	// Queries a list of StakeRecordList items.
	StakeRecordList(context.Context, *QueryStakeRecordListRequest) (*QueryStakeRecordListResponse, error)
	// Queries a list of StakePoolList items.
	StakePoolList(context.Context, *QueryStakePoolListRequest) (*QueryStakePoolListResponse, error)
	// Queries a list of MiningProviderList items.
	MiningProviderList(context.Context, *QueryMiningProviderListRequest) (*QueryMiningProviderListResponse, error)
	// Queries a list of RewardTokenList items.
	RewardTokenList(context.Context, *QueryRewardTokenListRequest) (*QueryRewardTokenListResponse, error)
	// Queries a list of MaxRewardPoolNumber items.
	MaxRewardPoolNumber(context.Context, *QueryMaxRewardPoolNumberRequest) (*QueryMaxRewardPoolNumberResponse, error)
	// Queries a list of MaxStakeItemNumber items.
	MaxStakeItemNumber(context.Context, *QueryMaxStakeItemNumberRequest) (*QueryMaxStakeItemNumberResponse, error)
	// Queries a list of ProviderSwitch items.
	ProviderSwitch(context.Context, *QueryProviderSwitchRequest) (*QueryProviderSwitchResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) StakePoolInfo(ctx context.Context, req *QueryStakePoolInfoRequest) (*QueryStakePoolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakePoolInfo not implemented")
}
func (*UnimplementedQueryServer) StakeItemList(ctx context.Context, req *QueryStakeItemListRequest) (*QueryStakeItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeItemList not implemented")
}
func (*UnimplementedQueryServer) StakeReward(ctx context.Context, req *QueryStakeRewardRequest) (*QueryStakeRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeReward not implemented")
}
func (*UnimplementedQueryServer) StakeRecordCount(ctx context.Context, req *QueryStakeRecordCountRequest) (*QueryStakeRecordCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeRecordCount not implemented")
}
func (*UnimplementedQueryServer) StakeRecord(ctx context.Context, req *QueryStakeRecordRequest) (*QueryStakeRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeRecord not implemented")
}
func (*UnimplementedQueryServer) StakeRecordList(ctx context.Context, req *QueryStakeRecordListRequest) (*QueryStakeRecordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeRecordList not implemented")
}
func (*UnimplementedQueryServer) StakePoolList(ctx context.Context, req *QueryStakePoolListRequest) (*QueryStakePoolListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakePoolList not implemented")
}
func (*UnimplementedQueryServer) MiningProviderList(ctx context.Context, req *QueryMiningProviderListRequest) (*QueryMiningProviderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiningProviderList not implemented")
}
func (*UnimplementedQueryServer) RewardTokenList(ctx context.Context, req *QueryRewardTokenListRequest) (*QueryRewardTokenListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardTokenList not implemented")
}
func (*UnimplementedQueryServer) MaxRewardPoolNumber(ctx context.Context, req *QueryMaxRewardPoolNumberRequest) (*QueryMaxRewardPoolNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxRewardPoolNumber not implemented")
}
func (*UnimplementedQueryServer) MaxStakeItemNumber(ctx context.Context, req *QueryMaxStakeItemNumberRequest) (*QueryMaxStakeItemNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxStakeItemNumber not implemented")
}
func (*UnimplementedQueryServer) ProviderSwitch(ctx context.Context, req *QueryProviderSwitchRequest) (*QueryProviderSwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderSwitch not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakePoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakePoolInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakePoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Query/StakePoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakePoolInfo(ctx, req.(*QueryStakePoolInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Query/StakeItemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeItemList(ctx, req.(*QueryStakeItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Query/StakeReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeReward(ctx, req.(*QueryStakeRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeRecordCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRecordCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeRecordCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Query/StakeRecordCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeRecordCount(ctx, req.(*QueryStakeRecordCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Query/StakeRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeRecord(ctx, req.(*QueryStakeRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Query/StakeRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeRecordList(ctx, req.(*QueryStakeRecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakePoolList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakePoolListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakePoolList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Query/StakePoolList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakePoolList(ctx, req.(*QueryStakePoolListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MiningProviderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMiningProviderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MiningProviderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Query/MiningProviderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MiningProviderList(ctx, req.(*QueryMiningProviderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardTokenListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Query/RewardTokenList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardTokenList(ctx, req.(*QueryRewardTokenListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MaxRewardPoolNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMaxRewardPoolNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MaxRewardPoolNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Query/MaxRewardPoolNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MaxRewardPoolNumber(ctx, req.(*QueryMaxRewardPoolNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MaxStakeItemNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMaxStakeItemNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MaxStakeItemNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Query/MaxStakeItemNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MaxStakeItemNumber(ctx, req.(*QueryMaxStakeItemNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProviderSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProviderSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProviderSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Query/ProviderSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProviderSwitch(ctx, req.(*QueryProviderSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stafihub.stafihub.mining.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "StakePoolInfo",
			Handler:    _Query_StakePoolInfo_Handler,
		},
		{
			MethodName: "StakeItemList",
			Handler:    _Query_StakeItemList_Handler,
		},
		{
			MethodName: "StakeReward",
			Handler:    _Query_StakeReward_Handler,
		},
		{
			MethodName: "StakeRecordCount",
			Handler:    _Query_StakeRecordCount_Handler,
		},
		{
			MethodName: "StakeRecord",
			Handler:    _Query_StakeRecord_Handler,
		},
		{
			MethodName: "StakeRecordList",
			Handler:    _Query_StakeRecordList_Handler,
		},
		{
			MethodName: "StakePoolList",
			Handler:    _Query_StakePoolList_Handler,
		},
		{
			MethodName: "MiningProviderList",
			Handler:    _Query_MiningProviderList_Handler,
		},
		{
			MethodName: "RewardTokenList",
			Handler:    _Query_RewardTokenList_Handler,
		},
		{
			MethodName: "MaxRewardPoolNumber",
			Handler:    _Query_MaxRewardPoolNumber_Handler,
		},
		{
			MethodName: "MaxStakeItemNumber",
			Handler:    _Query_MaxStakeItemNumber_Handler,
		},
		{
			MethodName: "ProviderSwitch",
			Handler:    _Query_ProviderSwitch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stafihub/stafihub/mining/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStakePoolInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakePoolInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakePoolInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakePoolIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakePoolInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakePoolInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakePoolInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakePool != nil {
		{
			size, err := m.StakePool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeItemListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeItemListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeItemListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakePoolIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeItemListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeItemListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeItemListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeItemList) > 0 {
		for iNdEx := len(m.StakeItemList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakeItemList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeRecordIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StakeRecordIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.StakePoolIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StakeUserAddress) > 0 {
		i -= len(m.StakeUserAddress)
		copy(dAtA[i:], m.StakeUserAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakeUserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardTokens) > 0 {
		for iNdEx := len(m.RewardTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.RewardTokens[iNdEx].Size()
				i -= size
				if _, err := m.RewardTokens[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRecordCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRecordCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRecordCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakePoolIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRecordCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRecordCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRecordCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeRecordIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StakeRecordIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.StakePoolIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeRecord != nil {
		{
			size, err := m.StakeRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRecordListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRecordListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRecordListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakePoolIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRecordListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRecordListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRecordListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeRecordList) > 0 {
		for iNdEx := len(m.StakeRecordList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakeRecordList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakePoolListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakePoolListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakePoolListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryStakePoolListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakePoolListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakePoolListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakePoolList) > 0 {
		for iNdEx := len(m.StakePoolList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakePoolList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMiningProviderListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMiningProviderListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMiningProviderListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMiningProviderListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMiningProviderListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMiningProviderListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MiningProviderList) > 0 {
		for iNdEx := len(m.MiningProviderList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MiningProviderList[iNdEx])
			copy(dAtA[i:], m.MiningProviderList[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.MiningProviderList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardTokenListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardTokenListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardTokenListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRewardTokenListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardTokenListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardTokenListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardTokenList) > 0 {
		for iNdEx := len(m.RewardTokenList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardTokenList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMaxRewardPoolNumberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMaxRewardPoolNumberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMaxRewardPoolNumberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMaxRewardPoolNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMaxRewardPoolNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMaxRewardPoolNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMaxStakeItemNumberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMaxStakeItemNumberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMaxStakeItemNumberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMaxStakeItemNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMaxStakeItemNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMaxStakeItemNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProviderSwitchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProviderSwitchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProviderSwitchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryProviderSwitchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProviderSwitchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProviderSwitchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProviderSwitch {
		i--
		if m.ProviderSwitch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStakePoolInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakePoolIndex != 0 {
		n += 1 + sovQuery(uint64(m.StakePoolIndex))
	}
	return n
}

func (m *QueryStakePoolInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakePool != nil {
		l = m.StakePool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakeItemListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakePoolIndex != 0 {
		n += 1 + sovQuery(uint64(m.StakePoolIndex))
	}
	return n
}

func (m *QueryStakeItemListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakeItemList) > 0 {
		for _, e := range m.StakeItemList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStakeRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakeUserAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovQuery(uint64(m.StakePoolIndex))
	}
	if m.StakeRecordIndex != 0 {
		n += 1 + sovQuery(uint64(m.StakeRecordIndex))
	}
	return n
}

func (m *QueryStakeRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardTokens) > 0 {
		for _, e := range m.RewardTokens {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStakeRecordCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovQuery(uint64(m.StakePoolIndex))
	}
	return n
}

func (m *QueryStakeRecordCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryStakeRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovQuery(uint64(m.StakePoolIndex))
	}
	if m.StakeRecordIndex != 0 {
		n += 1 + sovQuery(uint64(m.StakeRecordIndex))
	}
	return n
}

func (m *QueryStakeRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeRecord != nil {
		l = m.StakeRecord.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakeRecordListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovQuery(uint64(m.StakePoolIndex))
	}
	return n
}

func (m *QueryStakeRecordListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakeRecordList) > 0 {
		for _, e := range m.StakeRecordList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStakePoolListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryStakePoolListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakePoolList) > 0 {
		for _, e := range m.StakePoolList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryMiningProviderListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMiningProviderListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MiningProviderList) > 0 {
		for _, s := range m.MiningProviderList {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRewardTokenListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRewardTokenListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardTokenList) > 0 {
		for _, e := range m.RewardTokenList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryMaxRewardPoolNumberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMaxRewardPoolNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovQuery(uint64(m.Number))
	}
	return n
}

func (m *QueryMaxStakeItemNumberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMaxStakeItemNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovQuery(uint64(m.Number))
	}
	return n
}

func (m *QueryProviderSwitchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryProviderSwitchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProviderSwitch {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakePoolInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakePoolInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakePoolInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakePoolInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakePoolInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakePoolInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakePool == nil {
				m.StakePool = &StakePool{}
			}
			if err := m.StakePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeItemListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeItemListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeItemListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeItemListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeItemListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeItemListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeItemList = append(m.StakeItemList, &StakeItem{})
			if err := m.StakeItemList[len(m.StakeItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeUserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeUserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRecordIndex", wireType)
			}
			m.StakeRecordIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeRecordIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardTokens = append(m.RewardTokens, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.RewardTokens[len(m.RewardTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRecordCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRecordCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRecordCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRecordCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRecordCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRecordCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRecordIndex", wireType)
			}
			m.StakeRecordIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeRecordIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeRecord == nil {
				m.StakeRecord = &UserStakeRecord{}
			}
			if err := m.StakeRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRecordListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRecordListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRecordListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRecordListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRecordListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRecordListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRecordList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeRecordList = append(m.StakeRecordList, &UserStakeRecord{})
			if err := m.StakeRecordList[len(m.StakeRecordList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakePoolListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakePoolListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakePoolListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakePoolListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakePoolListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakePoolListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakePoolList = append(m.StakePoolList, &StakePool{})
			if err := m.StakePoolList[len(m.StakePoolList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMiningProviderListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMiningProviderListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMiningProviderListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMiningProviderListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMiningProviderListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMiningProviderListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiningProviderList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiningProviderList = append(m.MiningProviderList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardTokenListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardTokenListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardTokenListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardTokenListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardTokenListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardTokenListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTokenList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardTokenList = append(m.RewardTokenList, &RewardToken{})
			if err := m.RewardTokenList[len(m.RewardTokenList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMaxRewardPoolNumberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMaxRewardPoolNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMaxRewardPoolNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMaxRewardPoolNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMaxRewardPoolNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMaxRewardPoolNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMaxStakeItemNumberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMaxStakeItemNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMaxStakeItemNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMaxStakeItemNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMaxStakeItemNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMaxStakeItemNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProviderSwitchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProviderSwitchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProviderSwitchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProviderSwitchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProviderSwitchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProviderSwitchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderSwitch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProviderSwitch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
