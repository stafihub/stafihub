// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ledger/ledger.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_stafihub_stafihub_utils "github.com/stafihub/stafihub/utils"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoolStatus int32

const (
	Active    PoolStatus = 0
	NotActive PoolStatus = 1
	Reserved  PoolStatus = 2
)

var PoolStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "NOT_ACTIVE",
	2: "RESERVED",
}

var PoolStatus_value = map[string]int32{
	"ACTIVE":     0,
	"NOT_ACTIVE": 1,
	"RESERVED":   2,
}

func (x PoolStatus) String() string {
	return proto.EnumName(PoolStatus_name, int32(x))
}

func (PoolStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{0}
}

type PoolBondState int32

const (
	EraUpdated       PoolBondState = 0
	BondReported     PoolBondState = 1
	ActiveReported   PoolBondState = 2
	TransferSkipped  PoolBondState = 3
	TransferReported PoolBondState = 4
)

var PoolBondState_name = map[int32]string{
	0: "ERA_UPDATED",
	1: "BOND_REPORTED",
	2: "ACTIVE_REPORTED",
	3: "TRANSFER_SKIPPED",
	4: "TRANSFER_REPORTED",
}

var PoolBondState_value = map[string]int32{
	"ERA_UPDATED":       0,
	"BOND_REPORTED":     1,
	"ACTIVE_REPORTED":   2,
	"TRANSFER_SKIPPED":  3,
	"TRANSFER_REPORTED": 4,
}

func (x PoolBondState) String() string {
	return proto.EnumName(PoolBondState_name, int32(x))
}

func (PoolBondState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{1}
}

type BondAction int32

const (
	BondOnly         BondAction = 0
	UnbondOnly       BondAction = 1
	BothBondUnbond   BondAction = 2
	EitherBondUnbond BondAction = 3
	InterDeduct      BondAction = 4
)

var BondAction_name = map[int32]string{
	0: "BOND_ONLY",
	1: "UNBOND_ONLY",
	2: "BOTH_BOND_UNBOND",
	3: "EITHER_BOND_UNBOND",
	4: "INTER_DEDUCT",
}

var BondAction_value = map[string]int32{
	"BOND_ONLY":          0,
	"UNBOND_ONLY":        1,
	"BOTH_BOND_UNBOND":   2,
	"EITHER_BOND_UNBOND": 3,
	"INTER_DEDUCT":       4,
}

func (x BondAction) String() string {
	return proto.EnumName(BondAction_name, int32(x))
}

func (BondAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{2}
}

type LiquidityBondState int32

const (
	LiquidityBondStateVerifyOk      LiquidityBondState = 0
	LiquidityBondStateDenomUnmatch  LiquidityBondState = 1
	LiquidityBondStateBonderUnmatch LiquidityBondState = 2
	LiquidityBondStatePoolUnmatch   LiquidityBondState = 3
	LiquidityBondStateAmountUnmatch LiquidityBondState = 4
	LiquidityBondStateMemoUnmatch   LiquidityBondState = 5
)

var LiquidityBondState_name = map[int32]string{
	0: "LIQUIDITY_BOND_STATE_VERIFY_OK",
	1: "LIQUIDITY_BOND_STATE_DENOM_UNMATCH",
	2: "LIQUIDITY_BOND_STATE_BONDER_UNMATCH",
	3: "LIQUIDITY_BOND_STATE_POOL_UNMATCH",
	4: "LIQUIDITY_BOND_STATE_AMOUNT_UNMATCH",
	5: "LIQUIDITY_BOND_STATE_MEMO_UNMATCH",
}

var LiquidityBondState_value = map[string]int32{
	"LIQUIDITY_BOND_STATE_VERIFY_OK":      0,
	"LIQUIDITY_BOND_STATE_DENOM_UNMATCH":  1,
	"LIQUIDITY_BOND_STATE_BONDER_UNMATCH": 2,
	"LIQUIDITY_BOND_STATE_POOL_UNMATCH":   3,
	"LIQUIDITY_BOND_STATE_AMOUNT_UNMATCH": 4,
	"LIQUIDITY_BOND_STATE_MEMO_UNMATCH":   5,
}

func (x LiquidityBondState) String() string {
	return proto.EnumName(LiquidityBondState_name, int32(x))
}

func (LiquidityBondState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{3}
}

// OriginalTxType enumerates the tx type of a signature.
type OriginalTxType int32

const (
	TxTypeDealEraUpdated       OriginalTxType = 0
	TxTypeDealBondReported     OriginalTxType = 1
	TxTypeDealActiveReported   OriginalTxType = 2
	TxTypeDealValidatorUpdated OriginalTxType = 3
	TxTypeReserved             OriginalTxType = 4
)

var OriginalTxType_name = map[int32]string{
	0: "ORIGINAL_TX_TYPE_DEAL_ERAUPDATED",
	1: "ORIGINAL_TX_TYPE_DEAL_BONDREPORTED",
	2: "ORIGINAL_TX_TYPE_DEAL_ACTIVEREPORTED",
	3: "ORIGINAL_TX_TYPE_DEAL_VALIDATORUPDATED",
	4: "ORIGINAL_TX_TYPE_RESERVED",
}

var OriginalTxType_value = map[string]int32{
	"ORIGINAL_TX_TYPE_DEAL_ERAUPDATED":       0,
	"ORIGINAL_TX_TYPE_DEAL_BONDREPORTED":     1,
	"ORIGINAL_TX_TYPE_DEAL_ACTIVEREPORTED":   2,
	"ORIGINAL_TX_TYPE_DEAL_VALIDATORUPDATED": 3,
	"ORIGINAL_TX_TYPE_RESERVED":              4,
}

func (x OriginalTxType) String() string {
	return proto.EnumName(OriginalTxType_name, int32(x))
}

func (OriginalTxType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{4}
}

type IcaPoolStatus int32

const (
	IcaPoolStatusUnspecified   IcaPoolStatus = 0
	IcaPoolStatusInit          IcaPoolStatus = 1
	IcaPoolStatusCreateOne     IcaPoolStatus = 2
	IcaPoolStatusCreateTwo     IcaPoolStatus = 3
	IcaPoolStatusSetWithdrawal IcaPoolStatus = 4
)

var IcaPoolStatus_name = map[int32]string{
	0: "ICA_POOL_STATUS_UNSPECIFIED",
	1: "ICA_POOL_STATUS_INIT",
	2: "ICA_POOL_STATUS_CREATE_ONE",
	3: "ICA_POOL_STATUS_CREATE_TWO",
	4: "ICA_POOL_STATUS_SET_WITHDRAWAL",
}

var IcaPoolStatus_value = map[string]int32{
	"ICA_POOL_STATUS_UNSPECIFIED":    0,
	"ICA_POOL_STATUS_INIT":           1,
	"ICA_POOL_STATUS_CREATE_ONE":     2,
	"ICA_POOL_STATUS_CREATE_TWO":     3,
	"ICA_POOL_STATUS_SET_WITHDRAWAL": 4,
}

func (x IcaPoolStatus) String() string {
	return proto.EnumName(IcaPoolStatus_name, int32(x))
}

func (IcaPoolStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{5}
}

type InterchainTxStatus int32

const (
	InterchainTxStatusUnspecified InterchainTxStatus = 0
	InterchainTxStatusInit        InterchainTxStatus = 1
	InterchainTxStatusSuccess     InterchainTxStatus = 2
	InterchainTxStatusFailed      InterchainTxStatus = 3
)

var InterchainTxStatus_name = map[int32]string{
	0: "INTERCHAIN_TX_STATUS_UNSPECIFIED",
	1: "INTERCHAIN_TX_STATUS_INIT",
	2: "INTERCHAIN_TX_STATUS_SUCCESS",
	3: "INTERCHAIN_TX_STATUS_FAILED",
}

var InterchainTxStatus_value = map[string]int32{
	"INTERCHAIN_TX_STATUS_UNSPECIFIED": 0,
	"INTERCHAIN_TX_STATUS_INIT":        1,
	"INTERCHAIN_TX_STATUS_SUCCESS":     2,
	"INTERCHAIN_TX_STATUS_FAILED":      3,
}

func (x InterchainTxStatus) String() string {
	return proto.EnumName(InterchainTxStatus_name, int32(x))
}

func (InterchainTxStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{6}
}

type ChainEra struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Era   uint32 `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
}

func (m *ChainEra) Reset()         { *m = ChainEra{} }
func (m *ChainEra) String() string { return proto.CompactTextString(m) }
func (*ChainEra) ProtoMessage()    {}
func (*ChainEra) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{0}
}
func (m *ChainEra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainEra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainEra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainEra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainEra.Merge(m, src)
}
func (m *ChainEra) XXX_Size() int {
	return m.Size()
}
func (m *ChainEra) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainEra.DiscardUnknown(m)
}

var xxx_messageInfo_ChainEra proto.InternalMessageInfo

func (m *ChainEra) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *ChainEra) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

type Pool struct {
	Denom string   `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Addrs []string `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{1}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Pool) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type BondPipeline struct {
	Denom string    `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Pool  string    `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	Chunk LinkChunk `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk"`
}

func (m *BondPipeline) Reset()         { *m = BondPipeline{} }
func (m *BondPipeline) String() string { return proto.CompactTextString(m) }
func (*BondPipeline) ProtoMessage()    {}
func (*BondPipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{2}
}
func (m *BondPipeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondPipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondPipeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondPipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondPipeline.Merge(m, src)
}
func (m *BondPipeline) XXX_Size() int {
	return m.Size()
}
func (m *BondPipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_BondPipeline.DiscardUnknown(m)
}

var xxx_messageInfo_BondPipeline proto.InternalMessageInfo

func (m *BondPipeline) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *BondPipeline) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *BondPipeline) GetChunk() LinkChunk {
	if m != nil {
		return m.Chunk
	}
	return LinkChunk{}
}

type EraSnapshot struct {
	Denom   string   `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	ShotIds []string `protobuf:"bytes,3,rep,name=shotIds,proto3" json:"shotIds,omitempty"`
}

func (m *EraSnapshot) Reset()         { *m = EraSnapshot{} }
func (m *EraSnapshot) String() string { return proto.CompactTextString(m) }
func (*EraSnapshot) ProtoMessage()    {}
func (*EraSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{3}
}
func (m *EraSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EraSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EraSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EraSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EraSnapshot.Merge(m, src)
}
func (m *EraSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *EraSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_EraSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_EraSnapshot proto.InternalMessageInfo

func (m *EraSnapshot) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EraSnapshot) GetShotIds() []string {
	if m != nil {
		return m.ShotIds
	}
	return nil
}

type EraUnbondLimit struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *EraUnbondLimit) Reset()         { *m = EraUnbondLimit{} }
func (m *EraUnbondLimit) String() string { return proto.CompactTextString(m) }
func (*EraUnbondLimit) ProtoMessage()    {}
func (*EraUnbondLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{4}
}
func (m *EraUnbondLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EraUnbondLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EraUnbondLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EraUnbondLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EraUnbondLimit.Merge(m, src)
}
func (m *EraUnbondLimit) XXX_Size() int {
	return m.Size()
}
func (m *EraUnbondLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_EraUnbondLimit.DiscardUnknown(m)
}

var xxx_messageInfo_EraUnbondLimit proto.InternalMessageInfo

func (m *EraUnbondLimit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EraUnbondLimit) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type PoolDetail struct {
	Denom       string     `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Pool        string     `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	SubAccounts []string   `protobuf:"bytes,3,rep,name=subAccounts,proto3" json:"subAccounts,omitempty"`
	Threshold   uint32     `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Status      PoolStatus `protobuf:"varint,5,opt,name=status,proto3,enum=stafihub.stafihub.ledger.PoolStatus" json:"status,omitempty"`
}

func (m *PoolDetail) Reset()         { *m = PoolDetail{} }
func (m *PoolDetail) String() string { return proto.CompactTextString(m) }
func (*PoolDetail) ProtoMessage()    {}
func (*PoolDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{5}
}
func (m *PoolDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolDetail.Merge(m, src)
}
func (m *PoolDetail) XXX_Size() int {
	return m.Size()
}
func (m *PoolDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolDetail.DiscardUnknown(m)
}

var xxx_messageInfo_PoolDetail proto.InternalMessageInfo

func (m *PoolDetail) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *PoolDetail) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *PoolDetail) GetSubAccounts() []string {
	if m != nil {
		return m.SubAccounts
	}
	return nil
}

func (m *PoolDetail) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *PoolDetail) GetStatus() PoolStatus {
	if m != nil {
		return m.Status
	}
	return Active
}

type LinkChunk struct {
	Bond   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=bond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bond"`
	Unbond github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=unbond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"unbond"`
	Active github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=active,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"active"`
}

func (m *LinkChunk) Reset()         { *m = LinkChunk{} }
func (m *LinkChunk) String() string { return proto.CompactTextString(m) }
func (*LinkChunk) ProtoMessage()    {}
func (*LinkChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{6}
}
func (m *LinkChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkChunk.Merge(m, src)
}
func (m *LinkChunk) XXX_Size() int {
	return m.Size()
}
func (m *LinkChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkChunk.DiscardUnknown(m)
}

var xxx_messageInfo_LinkChunk proto.InternalMessageInfo

type BondSnapshot struct {
	Denom     string        `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Pool      string        `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	Era       uint32        `protobuf:"varint,3,opt,name=era,proto3" json:"era,omitempty"`
	Chunk     LinkChunk     `protobuf:"bytes,4,opt,name=chunk,proto3" json:"chunk"`
	BondState PoolBondState `protobuf:"varint,6,opt,name=bond_state,json=bondState,proto3,enum=stafihub.stafihub.ledger.PoolBondState" json:"bond_state,omitempty"`
}

func (m *BondSnapshot) Reset()         { *m = BondSnapshot{} }
func (m *BondSnapshot) String() string { return proto.CompactTextString(m) }
func (*BondSnapshot) ProtoMessage()    {}
func (*BondSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{7}
}
func (m *BondSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondSnapshot.Merge(m, src)
}
func (m *BondSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *BondSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_BondSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_BondSnapshot proto.InternalMessageInfo

func (m *BondSnapshot) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *BondSnapshot) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *BondSnapshot) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *BondSnapshot) GetChunk() LinkChunk {
	if m != nil {
		return m.Chunk
	}
	return LinkChunk{}
}

func (m *BondSnapshot) GetBondState() PoolBondState {
	if m != nil {
		return m.BondState
	}
	return EraUpdated
}

type ExchangeRate struct {
	Denom string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Value github_com_stafihub_stafihub_utils.Dec `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/stafihub/stafihub/utils.Dec" json:"value"`
}

func (m *ExchangeRate) Reset()         { *m = ExchangeRate{} }
func (m *ExchangeRate) String() string { return proto.CompactTextString(m) }
func (*ExchangeRate) ProtoMessage()    {}
func (*ExchangeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{8}
}
func (m *ExchangeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeRate.Merge(m, src)
}
func (m *ExchangeRate) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeRate.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeRate proto.InternalMessageInfo

func (m *ExchangeRate) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type TotalProtocolFee struct {
	Denom string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Value github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"value"`
}

func (m *TotalProtocolFee) Reset()         { *m = TotalProtocolFee{} }
func (m *TotalProtocolFee) String() string { return proto.CompactTextString(m) }
func (*TotalProtocolFee) ProtoMessage()    {}
func (*TotalProtocolFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{9}
}
func (m *TotalProtocolFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalProtocolFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalProtocolFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalProtocolFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalProtocolFee.Merge(m, src)
}
func (m *TotalProtocolFee) XXX_Size() int {
	return m.Size()
}
func (m *TotalProtocolFee) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalProtocolFee.DiscardUnknown(m)
}

var xxx_messageInfo_TotalProtocolFee proto.InternalMessageInfo

func (m *TotalProtocolFee) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type EraExchangeRate struct {
	Denom string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Era   uint32                                 `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
	Value github_com_stafihub_stafihub_utils.Dec `protobuf:"bytes,3,opt,name=value,proto3,customtype=github.com/stafihub/stafihub/utils.Dec" json:"value"`
}

func (m *EraExchangeRate) Reset()         { *m = EraExchangeRate{} }
func (m *EraExchangeRate) String() string { return proto.CompactTextString(m) }
func (*EraExchangeRate) ProtoMessage()    {}
func (*EraExchangeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{10}
}
func (m *EraExchangeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EraExchangeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EraExchangeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EraExchangeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EraExchangeRate.Merge(m, src)
}
func (m *EraExchangeRate) XXX_Size() int {
	return m.Size()
}
func (m *EraExchangeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_EraExchangeRate.DiscardUnknown(m)
}

var xxx_messageInfo_EraExchangeRate proto.InternalMessageInfo

func (m *EraExchangeRate) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EraExchangeRate) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

type UnbondRelayFee struct {
	Denom string                                  `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Value github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"value"`
}

func (m *UnbondRelayFee) Reset()         { *m = UnbondRelayFee{} }
func (m *UnbondRelayFee) String() string { return proto.CompactTextString(m) }
func (*UnbondRelayFee) ProtoMessage()    {}
func (*UnbondRelayFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{11}
}
func (m *UnbondRelayFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondRelayFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondRelayFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondRelayFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondRelayFee.Merge(m, src)
}
func (m *UnbondRelayFee) XXX_Size() int {
	return m.Size()
}
func (m *UnbondRelayFee) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondRelayFee.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondRelayFee proto.InternalMessageInfo

func (m *UnbondRelayFee) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type Unbonding struct {
	Unbonder  string                                 `protobuf:"bytes,1,opt,name=unbonder,proto3" json:"unbonder,omitempty"`
	Amount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Recipient string                                 `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *Unbonding) Reset()         { *m = Unbonding{} }
func (m *Unbonding) String() string { return proto.CompactTextString(m) }
func (*Unbonding) ProtoMessage()    {}
func (*Unbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{12}
}
func (m *Unbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Unbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Unbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Unbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unbonding.Merge(m, src)
}
func (m *Unbonding) XXX_Size() int {
	return m.Size()
}
func (m *Unbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_Unbonding.DiscardUnknown(m)
}

var xxx_messageInfo_Unbonding proto.InternalMessageInfo

func (m *Unbonding) GetUnbonder() string {
	if m != nil {
		return m.Unbonder
	}
	return ""
}

func (m *Unbonding) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

type BondRecord struct {
	Denom  string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Bonder string                                 `protobuf:"bytes,2,opt,name=bonder,proto3" json:"bonder,omitempty"`
	Pool   string                                 `protobuf:"bytes,3,opt,name=pool,proto3" json:"pool,omitempty"`
	Txhash string                                 `protobuf:"bytes,4,opt,name=txhash,proto3" json:"txhash,omitempty"`
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	State  LiquidityBondState                     `protobuf:"varint,6,opt,name=state,proto3,enum=stafihub.stafihub.ledger.LiquidityBondState" json:"state,omitempty"`
}

func (m *BondRecord) Reset()         { *m = BondRecord{} }
func (m *BondRecord) String() string { return proto.CompactTextString(m) }
func (*BondRecord) ProtoMessage()    {}
func (*BondRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{13}
}
func (m *BondRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondRecord.Merge(m, src)
}
func (m *BondRecord) XXX_Size() int {
	return m.Size()
}
func (m *BondRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_BondRecord.DiscardUnknown(m)
}

var xxx_messageInfo_BondRecord proto.InternalMessageInfo

func (m *BondRecord) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *BondRecord) GetBonder() string {
	if m != nil {
		return m.Bonder
	}
	return ""
}

func (m *BondRecord) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *BondRecord) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

func (m *BondRecord) GetState() LiquidityBondState {
	if m != nil {
		return m.State
	}
	return LiquidityBondStateVerifyOk
}

type Signature struct {
	Denom  string         `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Era    uint32         `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
	Pool   string         `protobuf:"bytes,3,opt,name=pool,proto3" json:"pool,omitempty"`
	TxType OriginalTxType `protobuf:"varint,4,opt,name=txType,proto3,enum=stafihub.stafihub.ledger.OriginalTxType" json:"txType,omitempty"`
	PropId string         `protobuf:"bytes,5,opt,name=propId,proto3" json:"propId,omitempty"`
	Sigs   []string       `protobuf:"bytes,6,rep,name=sigs,proto3" json:"sigs,omitempty"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{14}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Signature) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *Signature) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *Signature) GetTxType() OriginalTxType {
	if m != nil {
		return m.TxType
	}
	return TxTypeDealEraUpdated
}

func (m *Signature) GetPropId() string {
	if m != nil {
		return m.PropId
	}
	return ""
}

func (m *Signature) GetSigs() []string {
	if m != nil {
		return m.Sigs
	}
	return nil
}

type RParams struct {
	Denom           string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	GasPrice        string `protobuf:"bytes,2,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	EraSeconds      uint32 `protobuf:"varint,3,opt,name=eraSeconds,proto3" json:"eraSeconds,omitempty"`
	Offset          int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	BondingDuration uint32 `protobuf:"varint,5,opt,name=bondingDuration,proto3" json:"bondingDuration,omitempty"`
	LeastBond       string `protobuf:"bytes,6,opt,name=leastBond,proto3" json:"leastBond,omitempty"`
}

func (m *RParams) Reset()         { *m = RParams{} }
func (m *RParams) String() string { return proto.CompactTextString(m) }
func (*RParams) ProtoMessage()    {}
func (*RParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{15}
}
func (m *RParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RParams.Merge(m, src)
}
func (m *RParams) XXX_Size() int {
	return m.Size()
}
func (m *RParams) XXX_DiscardUnknown() {
	xxx_messageInfo_RParams.DiscardUnknown(m)
}

var xxx_messageInfo_RParams proto.InternalMessageInfo

func (m *RParams) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *RParams) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func (m *RParams) GetEraSeconds() uint32 {
	if m != nil {
		return m.EraSeconds
	}
	return 0
}

func (m *RParams) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *RParams) GetBondingDuration() uint32 {
	if m != nil {
		return m.BondingDuration
	}
	return 0
}

func (m *RParams) GetLeastBond() string {
	if m != nil {
		return m.LeastBond
	}
	return ""
}

type IcaAccount struct {
	Owner            string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Address          string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	CtrlConnectionId string `protobuf:"bytes,3,opt,name=ctrlConnectionId,proto3" json:"ctrlConnectionId,omitempty"`
	CtrlPortId       string `protobuf:"bytes,4,opt,name=ctrlPortId,proto3" json:"ctrlPortId,omitempty"`
	CtrlChannelId    string `protobuf:"bytes,5,opt,name=ctrlChannelId,proto3" json:"ctrlChannelId,omitempty"`
	HostConnectionId string `protobuf:"bytes,6,opt,name=hostConnectionId,proto3" json:"hostConnectionId,omitempty"`
	HostPortId       string `protobuf:"bytes,7,opt,name=hostPortId,proto3" json:"hostPortId,omitempty"`
	HostChannelId    string `protobuf:"bytes,8,opt,name=hostChannelId,proto3" json:"hostChannelId,omitempty"`
}

func (m *IcaAccount) Reset()         { *m = IcaAccount{} }
func (m *IcaAccount) String() string { return proto.CompactTextString(m) }
func (*IcaAccount) ProtoMessage()    {}
func (*IcaAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{16}
}
func (m *IcaAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IcaAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IcaAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IcaAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcaAccount.Merge(m, src)
}
func (m *IcaAccount) XXX_Size() int {
	return m.Size()
}
func (m *IcaAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_IcaAccount.DiscardUnknown(m)
}

var xxx_messageInfo_IcaAccount proto.InternalMessageInfo

func (m *IcaAccount) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *IcaAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IcaAccount) GetCtrlConnectionId() string {
	if m != nil {
		return m.CtrlConnectionId
	}
	return ""
}

func (m *IcaAccount) GetCtrlPortId() string {
	if m != nil {
		return m.CtrlPortId
	}
	return ""
}

func (m *IcaAccount) GetCtrlChannelId() string {
	if m != nil {
		return m.CtrlChannelId
	}
	return ""
}

func (m *IcaAccount) GetHostConnectionId() string {
	if m != nil {
		return m.HostConnectionId
	}
	return ""
}

func (m *IcaAccount) GetHostPortId() string {
	if m != nil {
		return m.HostPortId
	}
	return ""
}

func (m *IcaAccount) GetHostChannelId() string {
	if m != nil {
		return m.HostChannelId
	}
	return ""
}

type IcaPoolDetail struct {
	Denom             string        `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Index             uint32        `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Status            IcaPoolStatus `protobuf:"varint,3,opt,name=status,proto3,enum=stafihub.stafihub.ledger.IcaPoolStatus" json:"status,omitempty"`
	DelegationAccount *IcaAccount   `protobuf:"bytes,4,opt,name=DelegationAccount,proto3" json:"DelegationAccount,omitempty"`
	WithdrawalAccount *IcaAccount   `protobuf:"bytes,5,opt,name=WithdrawalAccount,proto3" json:"WithdrawalAccount,omitempty"`
}

func (m *IcaPoolDetail) Reset()         { *m = IcaPoolDetail{} }
func (m *IcaPoolDetail) String() string { return proto.CompactTextString(m) }
func (*IcaPoolDetail) ProtoMessage()    {}
func (*IcaPoolDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_e71eacad52bcf67e, []int{17}
}
func (m *IcaPoolDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IcaPoolDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IcaPoolDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IcaPoolDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcaPoolDetail.Merge(m, src)
}
func (m *IcaPoolDetail) XXX_Size() int {
	return m.Size()
}
func (m *IcaPoolDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_IcaPoolDetail.DiscardUnknown(m)
}

var xxx_messageInfo_IcaPoolDetail proto.InternalMessageInfo

func (m *IcaPoolDetail) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *IcaPoolDetail) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *IcaPoolDetail) GetStatus() IcaPoolStatus {
	if m != nil {
		return m.Status
	}
	return IcaPoolStatusUnspecified
}

func (m *IcaPoolDetail) GetDelegationAccount() *IcaAccount {
	if m != nil {
		return m.DelegationAccount
	}
	return nil
}

func (m *IcaPoolDetail) GetWithdrawalAccount() *IcaAccount {
	if m != nil {
		return m.WithdrawalAccount
	}
	return nil
}

func init() {
	proto.RegisterEnum("stafihub.stafihub.ledger.PoolStatus", PoolStatus_name, PoolStatus_value)
	proto.RegisterEnum("stafihub.stafihub.ledger.PoolBondState", PoolBondState_name, PoolBondState_value)
	proto.RegisterEnum("stafihub.stafihub.ledger.BondAction", BondAction_name, BondAction_value)
	proto.RegisterEnum("stafihub.stafihub.ledger.LiquidityBondState", LiquidityBondState_name, LiquidityBondState_value)
	proto.RegisterEnum("stafihub.stafihub.ledger.OriginalTxType", OriginalTxType_name, OriginalTxType_value)
	proto.RegisterEnum("stafihub.stafihub.ledger.IcaPoolStatus", IcaPoolStatus_name, IcaPoolStatus_value)
	proto.RegisterEnum("stafihub.stafihub.ledger.InterchainTxStatus", InterchainTxStatus_name, InterchainTxStatus_value)
	proto.RegisterType((*ChainEra)(nil), "stafihub.stafihub.ledger.ChainEra")
	proto.RegisterType((*Pool)(nil), "stafihub.stafihub.ledger.Pool")
	proto.RegisterType((*BondPipeline)(nil), "stafihub.stafihub.ledger.BondPipeline")
	proto.RegisterType((*EraSnapshot)(nil), "stafihub.stafihub.ledger.EraSnapshot")
	proto.RegisterType((*EraUnbondLimit)(nil), "stafihub.stafihub.ledger.EraUnbondLimit")
	proto.RegisterType((*PoolDetail)(nil), "stafihub.stafihub.ledger.PoolDetail")
	proto.RegisterType((*LinkChunk)(nil), "stafihub.stafihub.ledger.LinkChunk")
	proto.RegisterType((*BondSnapshot)(nil), "stafihub.stafihub.ledger.BondSnapshot")
	proto.RegisterType((*ExchangeRate)(nil), "stafihub.stafihub.ledger.ExchangeRate")
	proto.RegisterType((*TotalProtocolFee)(nil), "stafihub.stafihub.ledger.TotalProtocolFee")
	proto.RegisterType((*EraExchangeRate)(nil), "stafihub.stafihub.ledger.EraExchangeRate")
	proto.RegisterType((*UnbondRelayFee)(nil), "stafihub.stafihub.ledger.UnbondRelayFee")
	proto.RegisterType((*Unbonding)(nil), "stafihub.stafihub.ledger.Unbonding")
	proto.RegisterType((*BondRecord)(nil), "stafihub.stafihub.ledger.BondRecord")
	proto.RegisterType((*Signature)(nil), "stafihub.stafihub.ledger.Signature")
	proto.RegisterType((*RParams)(nil), "stafihub.stafihub.ledger.RParams")
	proto.RegisterType((*IcaAccount)(nil), "stafihub.stafihub.ledger.IcaAccount")
	proto.RegisterType((*IcaPoolDetail)(nil), "stafihub.stafihub.ledger.IcaPoolDetail")
}

func init() { proto.RegisterFile("ledger/ledger.proto", fileDescriptor_e71eacad52bcf67e) }

var fileDescriptor_e71eacad52bcf67e = []byte{
	// 1913 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x4b, 0x6f, 0xdb, 0xd8,
	0x15, 0x36, 0xf5, 0x70, 0xac, 0xe3, 0xd8, 0x61, 0x38, 0x6e, 0xa0, 0x70, 0x12, 0x85, 0x51, 0x82,
	0x89, 0x9b, 0x99, 0xca, 0x88, 0xbb, 0x6a, 0x31, 0xd3, 0x94, 0x92, 0xe8, 0x31, 0x67, 0x64, 0x51,
	0xa5, 0x28, 0xa7, 0xe9, 0x46, 0xbd, 0x26, 0xaf, 0x25, 0xd6, 0x34, 0xa9, 0x92, 0x57, 0x89, 0xbd,
	0xea, 0x76, 0x20, 0xa0, 0x40, 0xff, 0x80, 0x8a, 0x02, 0xed, 0x4f, 0x68, 0x57, 0x5d, 0x75, 0x37,
	0x40, 0x37, 0x03, 0x74, 0x53, 0x0c, 0x8a, 0x69, 0x9b, 0xfc, 0x83, 0xfe, 0x82, 0xe2, 0x3e, 0xf4,
	0xb2, 0x24, 0x3b, 0x8f, 0x95, 0x79, 0xcf, 0x3d, 0xdf, 0x77, 0x1e, 0xf7, 0x9c, 0x73, 0xaf, 0x05,
	0x1f, 0x04, 0xd8, 0xeb, 0xe0, 0x78, 0x87, 0xff, 0x29, 0xf5, 0xe2, 0x88, 0x44, 0x4a, 0x3e, 0x21,
	0xe8, 0xd8, 0xef, 0xf6, 0x8f, 0x4a, 0xe3, 0x0f, 0xbe, 0xaf, 0x6e, 0x75, 0xa2, 0x4e, 0xc4, 0x94,
	0x76, 0xe8, 0x17, 0xd7, 0x57, 0x0b, 0x6e, 0x94, 0x9c, 0x46, 0xc9, 0xce, 0x11, 0x4a, 0xf0, 0xce,
	0x8b, 0x27, 0x47, 0x98, 0xa0, 0x27, 0x3b, 0x6e, 0xe4, 0x87, 0x7c, 0xbf, 0xb8, 0x0b, 0x6b, 0x95,
	0x2e, 0xf2, 0x43, 0x23, 0x46, 0xca, 0x16, 0x64, 0x3d, 0x1c, 0x46, 0xa7, 0x79, 0x49, 0x93, 0xb6,
	0x73, 0x36, 0x5f, 0x28, 0x32, 0xa4, 0x71, 0x8c, 0xf2, 0x29, 0x4d, 0xda, 0xde, 0xb0, 0xe9, 0x67,
	0x71, 0x17, 0x32, 0x8d, 0x28, 0x0a, 0x96, 0xe8, 0x6f, 0x41, 0x16, 0x79, 0x5e, 0x9c, 0xe4, 0x53,
	0x5a, 0x9a, 0x4a, 0xd9, 0xa2, 0x78, 0x0e, 0xd7, 0xcb, 0x51, 0xe8, 0x35, 0xfc, 0x1e, 0x0e, 0xfc,
	0x10, 0x2f, 0xc1, 0x2a, 0x90, 0xe9, 0x45, 0x51, 0xc0, 0x8c, 0xe5, 0x6c, 0xf6, 0xad, 0x3c, 0x85,
	0xac, 0xdb, 0xed, 0x87, 0x27, 0xf9, 0xb4, 0x26, 0x6d, 0xaf, 0xef, 0x3e, 0x28, 0x2d, 0xcb, 0x40,
	0xa9, 0xe6, 0x87, 0x27, 0x15, 0xaa, 0x5a, 0xce, 0x7c, 0xfd, 0xdd, 0xbd, 0x15, 0x9b, 0xe3, 0x8a,
	0x9f, 0xc1, 0xba, 0x11, 0xa3, 0x66, 0x88, 0x7a, 0x49, 0x37, 0x22, 0x4b, 0x2c, 0xe7, 0xe1, 0x1a,
	0xdd, 0x35, 0xbd, 0x24, 0x9f, 0x66, 0x7e, 0x8f, 0x96, 0xc5, 0x4f, 0x61, 0xd3, 0x88, 0x51, 0x2b,
	0x3c, 0x8a, 0x42, 0xaf, 0xe6, 0x9f, 0xfa, 0x64, 0x79, 0xdc, 0x01, 0xdd, 0x16, 0x99, 0xe2, 0x8b,
	0xe2, 0x9f, 0x25, 0x00, 0x9a, 0xac, 0x2a, 0x26, 0xc8, 0x0f, 0xde, 0x22, 0x6c, 0x0d, 0xd6, 0x93,
	0xfe, 0x91, 0xee, 0xba, 0x51, 0x3f, 0x24, 0x23, 0xa7, 0xa6, 0x45, 0xca, 0x1d, 0xc8, 0x91, 0x6e,
	0x8c, 0x93, 0x6e, 0x14, 0x78, 0xf9, 0x0c, 0x33, 0x3a, 0x11, 0x28, 0x9f, 0xc2, 0x6a, 0x42, 0x10,
	0xe9, 0x27, 0xf9, 0xac, 0x26, 0x6d, 0x6f, 0xee, 0x3e, 0x5c, 0x9e, 0x37, 0xea, 0x5f, 0x93, 0xe9,
	0xda, 0x02, 0x53, 0xfc, 0xb7, 0x04, 0xb9, 0x71, 0x3a, 0x95, 0x32, 0x64, 0x68, 0xf4, 0xdc, 0xe9,
	0x72, 0x89, 0x26, 0xf7, 0xdb, 0xef, 0xee, 0x7d, 0xd4, 0xf1, 0x09, 0x65, 0x71, 0xa3, 0xd3, 0x1d,
	0x51, 0x65, 0xfc, 0xcf, 0x0f, 0x12, 0xef, 0x64, 0x87, 0x9c, 0xf7, 0x70, 0x52, 0x32, 0x43, 0x62,
	0x33, 0xac, 0xb2, 0x07, 0xab, 0x7d, 0x96, 0x43, 0x1e, 0xe5, 0x5b, 0xb3, 0x08, 0x34, 0xe5, 0x41,
	0x2e, 0xf1, 0x5f, 0x60, 0x56, 0x0f, 0xef, 0xc0, 0xc3, 0xd1, 0xc5, 0x7f, 0x48, 0xbc, 0x22, 0xaf,
	0xa8, 0x8b, 0x45, 0x47, 0x23, 0x3a, 0x22, 0x3d, 0xee, 0x88, 0x49, 0x8d, 0x66, 0xde, 0xad, 0x46,
	0x95, 0x3d, 0x00, 0x1a, 0x5d, 0x9b, 0xa6, 0x1f, 0xe7, 0x57, 0xd9, 0x89, 0x3d, 0xba, 0xfc, 0xc4,
	0x98, 0xf3, 0x54, 0xdd, 0xce, 0x1d, 0x8d, 0x3e, 0x8b, 0xbf, 0x82, 0xeb, 0xc6, 0x99, 0xdb, 0x45,
	0x61, 0x07, 0xdb, 0x88, 0x2c, 0x6b, 0xb3, 0x2a, 0x64, 0x5f, 0xa0, 0xa0, 0x8f, 0x2f, 0x39, 0x8a,
	0x91, 0xc5, 0xc9, 0x47, 0x9f, 0xf8, 0x41, 0x52, 0xaa, 0x62, 0xd7, 0xe6, 0xe0, 0x62, 0x08, 0xb2,
	0x13, 0x11, 0x14, 0x34, 0xe8, 0x20, 0x71, 0xa3, 0x60, 0x0f, 0xbf, 0x87, 0xbd, 0xcb, 0x8e, 0x4c,
	0xd8, 0xfb, 0x0d, 0xdc, 0x30, 0x62, 0xf4, 0x06, 0xe1, 0xcd, 0x4d, 0xac, 0x89, 0x03, 0xe9, 0xf7,
	0x09, 0xf8, 0x2b, 0x09, 0x36, 0xf9, 0x1c, 0xb0, 0x71, 0x80, 0xce, 0x97, 0xc7, 0xfb, 0xcb, 0xe9,
	0x78, 0xd7, 0x77, 0x6f, 0x97, 0x78, 0x58, 0x25, 0x3a, 0x84, 0x4b, 0x62, 0x08, 0x97, 0x2a, 0x91,
	0x1f, 0x96, 0x77, 0x84, 0x27, 0x8f, 0xde, 0x20, 0x15, 0x14, 0x30, 0x72, 0xe5, 0xb7, 0x12, 0xe4,
	0xb8, 0x2b, 0x7e, 0xd8, 0x51, 0x54, 0x58, 0xe3, 0xdd, 0x81, 0x63, 0xe1, 0xc8, 0x78, 0xcd, 0xfa,
	0xe5, 0x94, 0x0e, 0x8c, 0x77, 0xed, 0x3b, 0x8e, 0xa6, 0xd3, 0x26, 0xc6, 0xae, 0xdf, 0xf3, 0x71,
	0x48, 0x78, 0x1a, 0xed, 0x89, 0xa0, 0xf8, 0x3f, 0x09, 0xa0, 0xcc, 0x12, 0xe3, 0x46, 0xb1, 0xb7,
	0x24, 0x2d, 0xb7, 0x60, 0x55, 0x38, 0xc9, 0xbb, 0x49, 0xac, 0xc6, 0x3d, 0x96, 0x9e, 0xea, 0xb1,
	0x5b, 0xb0, 0x4a, 0xce, 0xba, 0x28, 0xe9, 0xb2, 0x96, 0xca, 0xd9, 0x62, 0x35, 0x15, 0x4e, 0xf6,
	0xbd, 0xc2, 0x29, 0x43, 0x76, 0xba, 0xd7, 0x3e, 0xb9, 0xac, 0x63, 0x7f, 0xdd, 0xf7, 0x3d, 0x9f,
	0x9c, 0x4f, 0x1a, 0x8e, 0x43, 0x8b, 0x7f, 0x91, 0x20, 0xd7, 0xf4, 0x3b, 0x21, 0x22, 0xfd, 0xf8,
	0xcd, 0x6b, 0x71, 0x51, 0xb4, 0x3f, 0xa5, 0xd1, 0x3a, 0xe7, 0x3d, 0xcc, 0xa2, 0xdd, 0xdc, 0xdd,
	0x5e, 0xee, 0x8e, 0x15, 0xfb, 0x1d, 0x3f, 0x44, 0x81, 0xc3, 0xf4, 0x6d, 0x81, 0xa3, 0xf9, 0xea,
	0xc5, 0x51, 0xcf, 0xf4, 0x78, 0x5e, 0x6c, 0xb1, 0xa2, 0xd6, 0x12, 0xbf, 0x93, 0xe4, 0x57, 0xd9,
	0xfd, 0xc1, 0xbe, 0x8b, 0x7f, 0x95, 0xe0, 0x9a, 0xdd, 0x40, 0x31, 0x3a, 0x4d, 0x96, 0x78, 0xad,
	0xc2, 0x5a, 0x07, 0x25, 0x8d, 0xd8, 0x77, 0x45, 0xcf, 0xda, 0xe3, 0xb5, 0x52, 0x00, 0xc0, 0x31,
	0x6a, 0x62, 0x37, 0x0a, 0xd9, 0x65, 0x49, 0x03, 0x9b, 0x92, 0x50, 0x4f, 0xa2, 0xe3, 0xe3, 0x04,
	0x13, 0x16, 0x4b, 0xd6, 0x16, 0x2b, 0x65, 0x1b, 0x6e, 0x88, 0x7a, 0xad, 0xf6, 0x63, 0x44, 0xfc,
	0x28, 0x64, 0xae, 0x6e, 0xd8, 0x17, 0xc5, 0xb4, 0xd4, 0x02, 0x8c, 0x12, 0x42, 0x13, 0xce, 0xce,
	0x27, 0x67, 0x4f, 0x04, 0xc5, 0x3f, 0xa4, 0x00, 0x4c, 0x17, 0x89, 0x6b, 0x90, 0x06, 0x10, 0xbd,
	0x0c, 0xc7, 0x85, 0xcf, 0x17, 0xf4, 0x3a, 0xa7, 0xef, 0x0e, 0x9c, 0x24, 0xc2, 0xff, 0xd1, 0x52,
	0x79, 0x0c, 0xb2, 0x4b, 0xe2, 0xa0, 0x12, 0x85, 0x21, 0x76, 0xa9, 0x39, 0xd3, 0x13, 0x47, 0x31,
	0x27, 0xa7, 0xa1, 0x52, 0x59, 0x23, 0x8a, 0x89, 0xe9, 0x89, 0x42, 0x9c, 0x92, 0x28, 0x0f, 0x61,
	0x83, 0x61, 0xba, 0x28, 0x0c, 0x71, 0x30, 0xce, 0xfd, 0xac, 0x90, 0x5a, 0xec, 0x46, 0x09, 0x99,
	0xb1, 0xc8, 0xa3, 0x9a, 0x93, 0x53, 0x8b, 0x54, 0x26, 0x2c, 0x5e, 0xe3, 0x16, 0x27, 0x12, 0x6a,
	0x91, 0x61, 0xc6, 0x16, 0xd7, 0xb8, 0xc5, 0x19, 0x61, 0xf1, 0x4f, 0x29, 0xd8, 0x30, 0x5d, 0x74,
	0xe5, 0xbb, 0x63, 0x0b, 0xb2, 0x7e, 0xe8, 0xe1, 0xb3, 0xd1, 0x93, 0x85, 0x2d, 0x94, 0xa7, 0xe3,
	0x97, 0x43, 0xfa, 0xaa, 0x7b, 0x48, 0x18, 0x99, 0x7d, 0x3c, 0x28, 0x36, 0xdc, 0xac, 0xe2, 0x00,
	0x77, 0xd8, 0x69, 0x8a, 0x73, 0x12, 0x37, 0xe3, 0xc3, 0x4b, 0xb9, 0x84, 0xae, 0x3d, 0x0f, 0xa7,
	0x9c, 0xcf, 0x7c, 0xd2, 0xf5, 0x62, 0xf4, 0x12, 0x05, 0x23, 0xce, 0xec, 0xdb, 0x70, 0xce, 0xc1,
	0x1f, 0x63, 0xfe, 0x34, 0xe3, 0xde, 0xd3, 0xba, 0xd5, 0x2b, 0x8e, 0x79, 0x68, 0xc8, 0x2b, 0x2a,
	0x0c, 0x86, 0xda, 0xaa, 0xce, 0x1e, 0x0a, 0xca, 0x5d, 0x80, 0xba, 0xe5, 0xb4, 0xc5, 0x9e, 0xa4,
	0x6e, 0x0c, 0x86, 0x5a, 0xae, 0x1e, 0x11, 0xb1, 0xad, 0xc2, 0x9a, 0x6d, 0x34, 0x0d, 0xfb, 0xd0,
	0xa8, 0xca, 0x29, 0xf5, 0xfa, 0x60, 0xa8, 0xad, 0xd9, 0x38, 0xc1, 0xf1, 0x0b, 0xec, 0xa9, 0x99,
	0xaf, 0xfe, 0x58, 0x58, 0x79, 0xfc, 0x2f, 0x09, 0x36, 0x66, 0x2e, 0x6c, 0xe5, 0x1e, 0xac, 0x1b,
	0xb6, 0xde, 0x6e, 0x35, 0xaa, 0xba, 0x63, 0x54, 0xe5, 0x15, 0x75, 0x73, 0x30, 0xd4, 0x80, 0xbe,
	0x32, 0x7b, 0x1e, 0x22, 0xd8, 0x53, 0x1e, 0xc0, 0x46, 0xd9, 0xaa, 0x57, 0xdb, 0xb6, 0xd1, 0xb0,
	0x6c, 0xaa, 0x22, 0xa9, 0xf2, 0x60, 0xa8, 0x5d, 0xe7, 0x23, 0xb6, 0x17, 0xc5, 0x54, 0xe9, 0x11,
	0xdc, 0xe0, 0x4e, 0x4d, 0xd4, 0x52, 0xaa, 0x32, 0x18, 0x6a, 0x9b, 0xdc, 0xb5, 0xb1, 0xe2, 0xf7,
	0x41, 0x76, 0x6c, 0xbd, 0xde, 0xdc, 0x33, 0xec, 0x76, 0xf3, 0x4b, 0xb3, 0xd1, 0x30, 0xaa, 0x72,
	0x5a, 0xfd, 0x60, 0x30, 0xd4, 0x6e, 0x38, 0x31, 0x0a, 0x93, 0x63, 0x1c, 0x37, 0x4f, 0xfc, 0x5e,
	0x0f, 0x7b, 0xca, 0xc7, 0x70, 0x73, 0xac, 0x3a, 0x66, 0xcd, 0xa8, 0x5b, 0x83, 0xa1, 0x26, 0x8f,
	0x74, 0x47, 0xbc, 0x22, 0xbc, 0xbf, 0x8b, 0xd1, 0xaf, 0xb3, 0x1a, 0x56, 0x3e, 0x84, 0x1c, 0x73,
	0xdd, 0xaa, 0xd7, 0x9e, 0xcb, 0x2b, 0x3c, 0x21, 0x74, 0xdb, 0x0a, 0x83, 0x73, 0x1a, 0x78, 0xab,
	0x3e, 0xd9, 0x96, 0x78, 0xe0, 0xfc, 0x22, 0x63, 0x0a, 0xdb, 0x20, 0x97, 0x2d, 0x67, 0xbf, 0xcd,
	0x74, 0xb8, 0xea, 0x28, 0xa8, 0x72, 0x44, 0xba, 0x94, 0x88, 0x6b, 0x2b, 0x9f, 0x80, 0x62, 0x98,
	0xce, 0xbe, 0x61, 0xcf, 0xe8, 0xa6, 0xb9, 0xab, 0x86, 0x4f, 0xba, 0x38, 0x9e, 0xd2, 0xbe, 0x0f,
	0xd7, 0xcd, 0xba, 0x63, 0xd8, 0xed, 0xaa, 0x51, 0x6d, 0x55, 0x1c, 0x39, 0xa3, 0xde, 0x18, 0x0c,
	0xb5, 0x75, 0x33, 0x24, 0x38, 0xae, 0x62, 0xaf, 0xef, 0x12, 0x11, 0xcd, 0xb7, 0x69, 0x50, 0xe6,
	0x27, 0xbe, 0x52, 0x86, 0x42, 0xcd, 0xfc, 0x59, 0xcb, 0xac, 0x9a, 0xce, 0x73, 0x6e, 0xb0, 0xe9,
	0xe8, 0x8e, 0xd1, 0x3e, 0x34, 0x6c, 0x73, 0xef, 0x79, 0xdb, 0xfa, 0x52, 0x5e, 0x51, 0x0b, 0x83,
	0xa1, 0xa6, 0xce, 0x63, 0x0f, 0x71, 0xec, 0x1f, 0x9f, 0x5b, 0x27, 0xca, 0x17, 0x50, 0x5c, 0xc8,
	0x51, 0x35, 0xea, 0xd6, 0x41, 0xbb, 0x55, 0x3f, 0xd0, 0x9d, 0xca, 0xbe, 0x2c, 0xa9, 0xc5, 0xc1,
	0x50, 0x2b, 0xcc, 0xf3, 0x54, 0x69, 0xcb, 0xb6, 0xc2, 0x53, 0x44, 0xdc, 0xae, 0x52, 0x83, 0x07,
	0x0b, 0xb9, 0xe8, 0xa7, 0x61, 0x8f, 0xc9, 0x52, 0xea, 0x83, 0xc1, 0x50, 0xbb, 0x37, 0x4f, 0x56,
	0x66, 0x37, 0xef, 0x88, 0x6d, 0x1f, 0xee, 0x2f, 0x64, 0x6b, 0x58, 0x56, 0x6d, 0xcc, 0x95, 0x56,
	0xef, 0x0f, 0x86, 0xda, 0xdd, 0x79, 0x2e, 0x5a, 0xdb, 0x57, 0xf9, 0xa5, 0x1f, 0x58, 0xad, 0xba,
	0x33, 0xe6, 0xca, 0x2c, 0xf3, 0x4b, 0x67, 0xb7, 0xf3, 0x55, 0x7e, 0x1d, 0x18, 0x07, 0xd6, 0x98,
	0x2b, 0xbb, 0xcc, 0xaf, 0x03, 0x7c, 0x1a, 0x09, 0x26, 0x71, 0xb8, 0xff, 0x4d, 0xc1, 0xe6, 0xec,
	0xfd, 0xa9, 0xfc, 0x04, 0x34, 0xcb, 0x36, 0x3f, 0x37, 0xeb, 0x7a, 0xad, 0xed, 0xfc, 0xbc, 0xed,
	0x3c, 0x6f, 0xd0, 0x03, 0xd1, 0x6b, 0x6d, 0xc3, 0xd6, 0x27, 0xfd, 0x99, 0x1f, 0x0c, 0xb5, 0x2d,
	0x8e, 0xa8, 0x62, 0x14, 0x4c, 0x75, 0x6a, 0x19, 0x8a, 0x8b, 0xf1, 0xd4, 0xdd, 0xa9, 0xf6, 0x55,
	0x07, 0x43, 0xed, 0xd6, 0x84, 0x61, 0xa6, 0x91, 0xf7, 0xe0, 0xe1, 0x62, 0x0e, 0xde, 0xde, 0x53,
	0xdd, 0x7d, 0x67, 0x30, 0xd4, 0xf2, 0x13, 0x96, 0x0b, 0x7d, 0xfe, 0x05, 0x7c, 0xb4, 0x98, 0xe7,
	0x50, 0xaf, 0x99, 0x55, 0xdd, 0xb1, 0xec, 0x51, 0x44, 0x69, 0x5e, 0xac, 0x13, 0xa6, 0x43, 0x14,
	0xf8, 0x1e, 0x22, 0x51, 0x3c, 0x8a, 0xeb, 0x09, 0xdc, 0x9e, 0xe3, 0x1a, 0xcf, 0xb9, 0x0c, 0xef,
	0x48, 0xf1, 0x04, 0x99, 0x9d, 0x76, 0x7f, 0x9b, 0xdc, 0x3d, 0x62, 0xb0, 0x7e, 0x06, 0x1f, 0x9a,
	0x15, 0x9d, 0x17, 0x13, 0x3d, 0xbf, 0x56, 0xb3, 0xdd, 0xaa, 0x37, 0x1b, 0x46, 0xc5, 0xdc, 0x33,
	0x59, 0x76, 0x59, 0x54, 0x33, 0x98, 0x56, 0x98, 0xf4, 0xb0, 0xeb, 0x1f, 0xfb, 0xd8, 0x53, 0x76,
	0x60, 0xeb, 0x22, 0xdc, 0xac, 0x9b, 0x8e, 0x2c, 0xa9, 0xdf, 0x1b, 0x0c, 0xb5, 0x9b, 0x33, 0x38,
	0x33, 0xf4, 0x89, 0xf2, 0x63, 0x50, 0x2f, 0x02, 0x2a, 0xb6, 0x41, 0xeb, 0xc6, 0xaa, 0x1b, 0x72,
	0x8a, 0x1f, 0xc5, 0x0c, 0xac, 0x12, 0x63, 0x44, 0xb0, 0x15, 0xe2, 0x4b, 0xb0, 0xce, 0x33, 0x4b,
	0x4e, 0x2f, 0xc5, 0x3a, 0x2f, 0x23, 0x3a, 0x23, 0x2e, 0x62, 0x9b, 0x86, 0xd3, 0x7e, 0x66, 0x3a,
	0xfb, 0x55, 0x5b, 0x7f, 0xa6, 0xd7, 0xe4, 0x0c, 0x4f, 0xfb, 0x0c, 0xbe, 0x89, 0xc9, 0xe4, 0x66,
	0x12, 0x39, 0xfc, 0x7d, 0x0a, 0x14, 0x36, 0x9a, 0xdc, 0x2e, 0xf2, 0x43, 0xe7, 0x4c, 0x24, 0xf2,
	0x73, 0xd0, 0xd8, 0x10, 0xab, 0xec, 0xeb, 0x66, 0x9d, 0x9e, 0xca, 0xc2, 0x6c, 0xb2, 0x6e, 0x98,
	0x47, 0x4f, 0xa7, 0xf4, 0x47, 0x70, 0x7b, 0x21, 0x91, 0xc8, 0x2b, 0x0f, 0x72, 0x8e, 0x81, 0x25,
	0xf7, 0x29, 0xdc, 0x59, 0x08, 0x6d, 0xb6, 0x2a, 0x15, 0xa3, 0xd9, 0x94, 0x53, 0xea, 0xdd, 0xc1,
	0x50, 0xbb, 0x3d, 0x8f, 0x6e, 0xf6, 0x5d, 0x97, 0xbe, 0xbf, 0x68, 0x35, 0x2c, 0x22, 0xd8, 0xd3,
	0xcd, 0x1a, 0xab, 0x4c, 0x5e, 0x0d, 0x73, 0xf8, 0x3d, 0xe4, 0x07, 0xa3, 0x22, 0x2b, 0x1b, 0x5f,
	0xbf, 0x2a, 0x48, 0xdf, 0xbc, 0x2a, 0x48, 0xff, 0x79, 0x55, 0x90, 0x7e, 0xf7, 0xba, 0xb0, 0xf2,
	0xcd, 0xeb, 0xc2, 0xca, 0x3f, 0x5f, 0x17, 0x56, 0x7e, 0xf1, 0xf1, 0xa5, 0xff, 0xd2, 0x9d, 0x89,
	0x1f, 0xd3, 0xf8, 0x3f, 0x04, 0x47, 0xab, 0xec, 0x37, 0xb0, 0x1f, 0xfe, 0x3f, 0x00, 0x00, 0xff,
	0xff, 0x85, 0x50, 0x64, 0xd1, 0x6a, 0x13, 0x00, 0x00,
}

func (m *ChainEra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainEra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainEra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Era != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintLedger(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondPipeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondPipeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondPipeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Chunk.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EraSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EraSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EraSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShotIds) > 0 {
		for iNdEx := len(m.ShotIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShotIds[iNdEx])
			copy(dAtA[i:], m.ShotIds[iNdEx])
			i = encodeVarintLedger(dAtA, i, uint64(len(m.ShotIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EraUnbondLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EraUnbondLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EraUnbondLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Threshold != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SubAccounts) > 0 {
		for iNdEx := len(m.SubAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubAccounts[iNdEx])
			copy(dAtA[i:], m.SubAccounts[iNdEx])
			i = encodeVarintLedger(dAtA, i, uint64(len(m.SubAccounts[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LinkChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LinkChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Active.Size()
		i -= size
		if _, err := m.Active.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Unbond.Size()
		i -= size
		if _, err := m.Unbond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Bond.Size()
		i -= size
		if _, err := m.Bond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BondSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BondState != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.BondState))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.Chunk.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Era != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TotalProtocolFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalProtocolFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalProtocolFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EraExchangeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EraExchangeRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EraExchangeRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Era != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondRelayFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondRelayFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondRelayFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Unbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Unbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Unbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Unbonder) > 0 {
		i -= len(m.Unbonder)
		copy(dAtA[i:], m.Unbonder)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Unbonder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Txhash) > 0 {
		i -= len(m.Txhash)
		copy(dAtA[i:], m.Txhash)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Txhash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bonder) > 0 {
		i -= len(m.Bonder)
		copy(dAtA[i:], m.Bonder)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Bonder)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sigs) > 0 {
		for iNdEx := len(m.Sigs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Sigs[iNdEx])
			copy(dAtA[i:], m.Sigs[iNdEx])
			i = encodeVarintLedger(dAtA, i, uint64(len(m.Sigs[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TxType != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Era != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeastBond) > 0 {
		i -= len(m.LeastBond)
		copy(dAtA[i:], m.LeastBond)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.LeastBond)))
		i--
		dAtA[i] = 0x32
	}
	if m.BondingDuration != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.BondingDuration))
		i--
		dAtA[i] = 0x28
	}
	if m.Offset != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.EraSeconds != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.EraSeconds))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GasPrice) > 0 {
		i -= len(m.GasPrice)
		copy(dAtA[i:], m.GasPrice)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.GasPrice)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IcaAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IcaAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IcaAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostChannelId) > 0 {
		i -= len(m.HostChannelId)
		copy(dAtA[i:], m.HostChannelId)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.HostChannelId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.HostPortId) > 0 {
		i -= len(m.HostPortId)
		copy(dAtA[i:], m.HostPortId)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.HostPortId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HostConnectionId) > 0 {
		i -= len(m.HostConnectionId)
		copy(dAtA[i:], m.HostConnectionId)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.HostConnectionId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CtrlChannelId) > 0 {
		i -= len(m.CtrlChannelId)
		copy(dAtA[i:], m.CtrlChannelId)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.CtrlChannelId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CtrlPortId) > 0 {
		i -= len(m.CtrlPortId)
		copy(dAtA[i:], m.CtrlPortId)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.CtrlPortId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CtrlConnectionId) > 0 {
		i -= len(m.CtrlConnectionId)
		copy(dAtA[i:], m.CtrlConnectionId)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.CtrlConnectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IcaPoolDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IcaPoolDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IcaPoolDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithdrawalAccount != nil {
		{
			size, err := m.WithdrawalAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DelegationAccount != nil {
		{
			size, err := m.DelegationAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLedger(dAtA []byte, offset int, v uint64) int {
	offset -= sovLedger(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainEra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovLedger(uint64(m.Era))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			l = len(s)
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	return n
}

func (m *BondPipeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = m.Chunk.Size()
	n += 1 + l + sovLedger(uint64(l))
	return n
}

func (m *EraSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if len(m.ShotIds) > 0 {
		for _, s := range m.ShotIds {
			l = len(s)
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	return n
}

func (m *EraUnbondLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovLedger(uint64(m.Limit))
	}
	return n
}

func (m *PoolDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if len(m.SubAccounts) > 0 {
		for _, s := range m.SubAccounts {
			l = len(s)
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovLedger(uint64(m.Threshold))
	}
	if m.Status != 0 {
		n += 1 + sovLedger(uint64(m.Status))
	}
	return n
}

func (m *LinkChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Bond.Size()
	n += 1 + l + sovLedger(uint64(l))
	l = m.Unbond.Size()
	n += 1 + l + sovLedger(uint64(l))
	l = m.Active.Size()
	n += 1 + l + sovLedger(uint64(l))
	return n
}

func (m *BondSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovLedger(uint64(m.Era))
	}
	l = m.Chunk.Size()
	n += 1 + l + sovLedger(uint64(l))
	if m.BondState != 0 {
		n += 1 + sovLedger(uint64(m.BondState))
	}
	return n
}

func (m *ExchangeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovLedger(uint64(l))
	return n
}

func (m *TotalProtocolFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovLedger(uint64(l))
	return n
}

func (m *EraExchangeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovLedger(uint64(m.Era))
	}
	l = m.Value.Size()
	n += 1 + l + sovLedger(uint64(l))
	return n
}

func (m *UnbondRelayFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovLedger(uint64(l))
	return n
}

func (m *Unbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Unbonder)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLedger(uint64(l))
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}

func (m *BondRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Bonder)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Txhash)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLedger(uint64(l))
	if m.State != 0 {
		n += 1 + sovLedger(uint64(m.State))
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovLedger(uint64(m.Era))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.TxType != 0 {
		n += 1 + sovLedger(uint64(m.TxType))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if len(m.Sigs) > 0 {
		for _, s := range m.Sigs {
			l = len(s)
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	return n
}

func (m *RParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.GasPrice)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.EraSeconds != 0 {
		n += 1 + sovLedger(uint64(m.EraSeconds))
	}
	if m.Offset != 0 {
		n += 1 + sovLedger(uint64(m.Offset))
	}
	if m.BondingDuration != 0 {
		n += 1 + sovLedger(uint64(m.BondingDuration))
	}
	l = len(m.LeastBond)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}

func (m *IcaAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.CtrlConnectionId)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.CtrlPortId)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.CtrlChannelId)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.HostConnectionId)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.HostPortId)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.HostChannelId)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}

func (m *IcaPoolDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovLedger(uint64(m.Index))
	}
	if m.Status != 0 {
		n += 1 + sovLedger(uint64(m.Status))
	}
	if m.DelegationAccount != nil {
		l = m.DelegationAccount.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.WithdrawalAccount != nil {
		l = m.WithdrawalAccount.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}

func sovLedger(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLedger(x uint64) (n int) {
	return sovLedger(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainEra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainEra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainEra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondPipeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondPipeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondPipeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Chunk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EraSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EraSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EraSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotIds = append(m.ShotIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EraUnbondLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EraUnbondLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EraUnbondLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAccounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubAccounts = append(m.SubAccounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= PoolStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unbond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Unbond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Active.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Chunk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondState", wireType)
			}
			m.BondState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BondState |= PoolBondState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalProtocolFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalProtocolFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalProtocolFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EraExchangeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EraExchangeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EraExchangeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondRelayFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondRelayFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondRelayFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Unbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unbonder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unbonder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bonder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bonder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= LiquidityBondState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= OriginalTxType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sigs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sigs = append(m.Sigs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraSeconds", wireType)
			}
			m.EraSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EraSeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondingDuration", wireType)
			}
			m.BondingDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BondingDuration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeastBond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeastBond = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IcaAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IcaAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IcaAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtrlConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtrlConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtrlPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtrlPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtrlChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtrlChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IcaPoolDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IcaPoolDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IcaPoolDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= IcaPoolStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegationAccount == nil {
				m.DelegationAccount = &IcaAccount{}
			}
			if err := m.DelegationAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WithdrawalAccount == nil {
				m.WithdrawalAccount = &IcaAccount{}
			}
			if err := m.WithdrawalAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLedger(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLedger
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLedger
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLedger
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLedger        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLedger          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLedger = fmt.Errorf("proto: unexpected end of group")
)
