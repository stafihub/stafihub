// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ledger/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetExchangeRateRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetExchangeRateRequest) Reset()         { *m = QueryGetExchangeRateRequest{} }
func (m *QueryGetExchangeRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExchangeRateRequest) ProtoMessage()    {}
func (*QueryGetExchangeRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{0}
}
func (m *QueryGetExchangeRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExchangeRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExchangeRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExchangeRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExchangeRateRequest.Merge(m, src)
}
func (m *QueryGetExchangeRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExchangeRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExchangeRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExchangeRateRequest proto.InternalMessageInfo

func (m *QueryGetExchangeRateRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetExchangeRateResponse struct {
	ExchangeRate ExchangeRate `protobuf:"bytes,1,opt,name=exchangeRate,proto3" json:"exchangeRate"`
}

func (m *QueryGetExchangeRateResponse) Reset()         { *m = QueryGetExchangeRateResponse{} }
func (m *QueryGetExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExchangeRateResponse) ProtoMessage()    {}
func (*QueryGetExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{1}
}
func (m *QueryGetExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExchangeRateResponse.Merge(m, src)
}
func (m *QueryGetExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExchangeRateResponse proto.InternalMessageInfo

func (m *QueryGetExchangeRateResponse) GetExchangeRate() ExchangeRate {
	if m != nil {
		return m.ExchangeRate
	}
	return ExchangeRate{}
}

type QueryExchangeRateAllRequest struct {
}

func (m *QueryExchangeRateAllRequest) Reset()         { *m = QueryExchangeRateAllRequest{} }
func (m *QueryExchangeRateAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRateAllRequest) ProtoMessage()    {}
func (*QueryExchangeRateAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{2}
}
func (m *QueryExchangeRateAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRateAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRateAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRateAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRateAllRequest.Merge(m, src)
}
func (m *QueryExchangeRateAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRateAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRateAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRateAllRequest proto.InternalMessageInfo

type QueryExchangeRateAllResponse struct {
	ExchangeRates []ExchangeRate `protobuf:"bytes,1,rep,name=exchangeRates,proto3" json:"exchangeRates"`
}

func (m *QueryExchangeRateAllResponse) Reset()         { *m = QueryExchangeRateAllResponse{} }
func (m *QueryExchangeRateAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRateAllResponse) ProtoMessage()    {}
func (*QueryExchangeRateAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{3}
}
func (m *QueryExchangeRateAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRateAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRateAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRateAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRateAllResponse.Merge(m, src)
}
func (m *QueryExchangeRateAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRateAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRateAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRateAllResponse proto.InternalMessageInfo

func (m *QueryExchangeRateAllResponse) GetExchangeRates() []ExchangeRate {
	if m != nil {
		return m.ExchangeRates
	}
	return nil
}

type QueryGetEraExchangeRateRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Era   uint32 `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
}

func (m *QueryGetEraExchangeRateRequest) Reset()         { *m = QueryGetEraExchangeRateRequest{} }
func (m *QueryGetEraExchangeRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraExchangeRateRequest) ProtoMessage()    {}
func (*QueryGetEraExchangeRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{4}
}
func (m *QueryGetEraExchangeRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraExchangeRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraExchangeRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraExchangeRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraExchangeRateRequest.Merge(m, src)
}
func (m *QueryGetEraExchangeRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraExchangeRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraExchangeRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraExchangeRateRequest proto.InternalMessageInfo

func (m *QueryGetEraExchangeRateRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetEraExchangeRateRequest) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

type QueryGetEraExchangeRateResponse struct {
	EraExchangeRate EraExchangeRate `protobuf:"bytes,1,opt,name=eraExchangeRate,proto3" json:"eraExchangeRate"`
}

func (m *QueryGetEraExchangeRateResponse) Reset()         { *m = QueryGetEraExchangeRateResponse{} }
func (m *QueryGetEraExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraExchangeRateResponse) ProtoMessage()    {}
func (*QueryGetEraExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{5}
}
func (m *QueryGetEraExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraExchangeRateResponse.Merge(m, src)
}
func (m *QueryGetEraExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraExchangeRateResponse proto.InternalMessageInfo

func (m *QueryGetEraExchangeRateResponse) GetEraExchangeRate() EraExchangeRate {
	if m != nil {
		return m.EraExchangeRate
	}
	return EraExchangeRate{}
}

type QueryEraExchangeRatesByDenomRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryEraExchangeRatesByDenomRequest) Reset()         { *m = QueryEraExchangeRatesByDenomRequest{} }
func (m *QueryEraExchangeRatesByDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEraExchangeRatesByDenomRequest) ProtoMessage()    {}
func (*QueryEraExchangeRatesByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{6}
}
func (m *QueryEraExchangeRatesByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEraExchangeRatesByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEraExchangeRatesByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEraExchangeRatesByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEraExchangeRatesByDenomRequest.Merge(m, src)
}
func (m *QueryEraExchangeRatesByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEraExchangeRatesByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEraExchangeRatesByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEraExchangeRatesByDenomRequest proto.InternalMessageInfo

func (m *QueryEraExchangeRatesByDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryEraExchangeRatesByDenomResponse struct {
	EraExchangeRates []EraExchangeRate `protobuf:"bytes,1,rep,name=eraExchangeRates,proto3" json:"eraExchangeRates"`
}

func (m *QueryEraExchangeRatesByDenomResponse) Reset()         { *m = QueryEraExchangeRatesByDenomResponse{} }
func (m *QueryEraExchangeRatesByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEraExchangeRatesByDenomResponse) ProtoMessage()    {}
func (*QueryEraExchangeRatesByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{7}
}
func (m *QueryEraExchangeRatesByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEraExchangeRatesByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEraExchangeRatesByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEraExchangeRatesByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEraExchangeRatesByDenomResponse.Merge(m, src)
}
func (m *QueryEraExchangeRatesByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEraExchangeRatesByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEraExchangeRatesByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEraExchangeRatesByDenomResponse proto.InternalMessageInfo

func (m *QueryEraExchangeRatesByDenomResponse) GetEraExchangeRates() []EraExchangeRate {
	if m != nil {
		return m.EraExchangeRates
	}
	return nil
}

type QueryBondedPoolsByDenomRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryBondedPoolsByDenomRequest) Reset()         { *m = QueryBondedPoolsByDenomRequest{} }
func (m *QueryBondedPoolsByDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBondedPoolsByDenomRequest) ProtoMessage()    {}
func (*QueryBondedPoolsByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{8}
}
func (m *QueryBondedPoolsByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBondedPoolsByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBondedPoolsByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBondedPoolsByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBondedPoolsByDenomRequest.Merge(m, src)
}
func (m *QueryBondedPoolsByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBondedPoolsByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBondedPoolsByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBondedPoolsByDenomRequest proto.InternalMessageInfo

func (m *QueryBondedPoolsByDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryBondedPoolsByDenomResponse struct {
	Addrs []string `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (m *QueryBondedPoolsByDenomResponse) Reset()         { *m = QueryBondedPoolsByDenomResponse{} }
func (m *QueryBondedPoolsByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBondedPoolsByDenomResponse) ProtoMessage()    {}
func (*QueryBondedPoolsByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{9}
}
func (m *QueryBondedPoolsByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBondedPoolsByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBondedPoolsByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBondedPoolsByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBondedPoolsByDenomResponse.Merge(m, src)
}
func (m *QueryBondedPoolsByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBondedPoolsByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBondedPoolsByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBondedPoolsByDenomResponse proto.InternalMessageInfo

func (m *QueryBondedPoolsByDenomResponse) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type QueryGetPoolDetailRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Pool  string `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *QueryGetPoolDetailRequest) Reset()         { *m = QueryGetPoolDetailRequest{} }
func (m *QueryGetPoolDetailRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolDetailRequest) ProtoMessage()    {}
func (*QueryGetPoolDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{10}
}
func (m *QueryGetPoolDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolDetailRequest.Merge(m, src)
}
func (m *QueryGetPoolDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolDetailRequest proto.InternalMessageInfo

func (m *QueryGetPoolDetailRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetPoolDetailRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

type QueryGetPoolDetailResponse struct {
	Detail PoolDetail `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail"`
}

func (m *QueryGetPoolDetailResponse) Reset()         { *m = QueryGetPoolDetailResponse{} }
func (m *QueryGetPoolDetailResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolDetailResponse) ProtoMessage()    {}
func (*QueryGetPoolDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{11}
}
func (m *QueryGetPoolDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolDetailResponse.Merge(m, src)
}
func (m *QueryGetPoolDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolDetailResponse proto.InternalMessageInfo

func (m *QueryGetPoolDetailResponse) GetDetail() PoolDetail {
	if m != nil {
		return m.Detail
	}
	return PoolDetail{}
}

type QueryGetChainEraRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetChainEraRequest) Reset()         { *m = QueryGetChainEraRequest{} }
func (m *QueryGetChainEraRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainEraRequest) ProtoMessage()    {}
func (*QueryGetChainEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{12}
}
func (m *QueryGetChainEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainEraRequest.Merge(m, src)
}
func (m *QueryGetChainEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainEraRequest proto.InternalMessageInfo

func (m *QueryGetChainEraRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetChainEraResponse struct {
	Era uint32 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
}

func (m *QueryGetChainEraResponse) Reset()         { *m = QueryGetChainEraResponse{} }
func (m *QueryGetChainEraResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainEraResponse) ProtoMessage()    {}
func (*QueryGetChainEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{13}
}
func (m *QueryGetChainEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainEraResponse.Merge(m, src)
}
func (m *QueryGetChainEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainEraResponse proto.InternalMessageInfo

func (m *QueryGetChainEraResponse) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

type QueryGetCurrentEraSnapshotRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetCurrentEraSnapshotRequest) Reset()         { *m = QueryGetCurrentEraSnapshotRequest{} }
func (m *QueryGetCurrentEraSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEraSnapshotRequest) ProtoMessage()    {}
func (*QueryGetCurrentEraSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{14}
}
func (m *QueryGetCurrentEraSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEraSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEraSnapshotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEraSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEraSnapshotRequest.Merge(m, src)
}
func (m *QueryGetCurrentEraSnapshotRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEraSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEraSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEraSnapshotRequest proto.InternalMessageInfo

func (m *QueryGetCurrentEraSnapshotRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetCurrentEraSnapshotResponse struct {
	ShotIds []string `protobuf:"bytes,1,rep,name=shotIds,proto3" json:"shotIds,omitempty"`
}

func (m *QueryGetCurrentEraSnapshotResponse) Reset()         { *m = QueryGetCurrentEraSnapshotResponse{} }
func (m *QueryGetCurrentEraSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEraSnapshotResponse) ProtoMessage()    {}
func (*QueryGetCurrentEraSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{15}
}
func (m *QueryGetCurrentEraSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEraSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEraSnapshotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEraSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEraSnapshotResponse.Merge(m, src)
}
func (m *QueryGetCurrentEraSnapshotResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEraSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEraSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEraSnapshotResponse proto.InternalMessageInfo

func (m *QueryGetCurrentEraSnapshotResponse) GetShotIds() []string {
	if m != nil {
		return m.ShotIds
	}
	return nil
}

type QueryGetProtocolFeeReceiverRequest struct {
}

func (m *QueryGetProtocolFeeReceiverRequest) Reset()         { *m = QueryGetProtocolFeeReceiverRequest{} }
func (m *QueryGetProtocolFeeReceiverRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtocolFeeReceiverRequest) ProtoMessage()    {}
func (*QueryGetProtocolFeeReceiverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{16}
}
func (m *QueryGetProtocolFeeReceiverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtocolFeeReceiverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtocolFeeReceiverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtocolFeeReceiverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtocolFeeReceiverRequest.Merge(m, src)
}
func (m *QueryGetProtocolFeeReceiverRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtocolFeeReceiverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtocolFeeReceiverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtocolFeeReceiverRequest proto.InternalMessageInfo

type QueryGetProtocolFeeReceiverResponse struct {
	Receiver string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (m *QueryGetProtocolFeeReceiverResponse) Reset()         { *m = QueryGetProtocolFeeReceiverResponse{} }
func (m *QueryGetProtocolFeeReceiverResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtocolFeeReceiverResponse) ProtoMessage()    {}
func (*QueryGetProtocolFeeReceiverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{17}
}
func (m *QueryGetProtocolFeeReceiverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtocolFeeReceiverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtocolFeeReceiverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtocolFeeReceiverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtocolFeeReceiverResponse.Merge(m, src)
}
func (m *QueryGetProtocolFeeReceiverResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtocolFeeReceiverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtocolFeeReceiverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtocolFeeReceiverResponse proto.InternalMessageInfo

func (m *QueryGetProtocolFeeReceiverResponse) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

type QueryGetStakingRewardCommissionRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetStakingRewardCommissionRequest) Reset() {
	*m = QueryGetStakingRewardCommissionRequest{}
}
func (m *QueryGetStakingRewardCommissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakingRewardCommissionRequest) ProtoMessage()    {}
func (*QueryGetStakingRewardCommissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{18}
}
func (m *QueryGetStakingRewardCommissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakingRewardCommissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakingRewardCommissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakingRewardCommissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakingRewardCommissionRequest.Merge(m, src)
}
func (m *QueryGetStakingRewardCommissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakingRewardCommissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakingRewardCommissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakingRewardCommissionRequest proto.InternalMessageInfo

func (m *QueryGetStakingRewardCommissionRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetStakingRewardCommissionResponse struct {
	Commission string `protobuf:"bytes,1,opt,name=commission,proto3" json:"commission,omitempty"`
}

func (m *QueryGetStakingRewardCommissionResponse) Reset() {
	*m = QueryGetStakingRewardCommissionResponse{}
}
func (m *QueryGetStakingRewardCommissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakingRewardCommissionResponse) ProtoMessage()    {}
func (*QueryGetStakingRewardCommissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{19}
}
func (m *QueryGetStakingRewardCommissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakingRewardCommissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakingRewardCommissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakingRewardCommissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakingRewardCommissionResponse.Merge(m, src)
}
func (m *QueryGetStakingRewardCommissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakingRewardCommissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakingRewardCommissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakingRewardCommissionResponse proto.InternalMessageInfo

func (m *QueryGetStakingRewardCommissionResponse) GetCommission() string {
	if m != nil {
		return m.Commission
	}
	return ""
}

type QueryGetUnbondRelayFeeRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetUnbondRelayFeeRequest) Reset()         { *m = QueryGetUnbondRelayFeeRequest{} }
func (m *QueryGetUnbondRelayFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUnbondRelayFeeRequest) ProtoMessage()    {}
func (*QueryGetUnbondRelayFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{20}
}
func (m *QueryGetUnbondRelayFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnbondRelayFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnbondRelayFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnbondRelayFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnbondRelayFeeRequest.Merge(m, src)
}
func (m *QueryGetUnbondRelayFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnbondRelayFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnbondRelayFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnbondRelayFeeRequest proto.InternalMessageInfo

func (m *QueryGetUnbondRelayFeeRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetUnbondRelayFeeResponse struct {
	Fee UnbondRelayFee `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee"`
}

func (m *QueryGetUnbondRelayFeeResponse) Reset()         { *m = QueryGetUnbondRelayFeeResponse{} }
func (m *QueryGetUnbondRelayFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUnbondRelayFeeResponse) ProtoMessage()    {}
func (*QueryGetUnbondRelayFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{21}
}
func (m *QueryGetUnbondRelayFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnbondRelayFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnbondRelayFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnbondRelayFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnbondRelayFeeResponse.Merge(m, src)
}
func (m *QueryGetUnbondRelayFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnbondRelayFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnbondRelayFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnbondRelayFeeResponse proto.InternalMessageInfo

func (m *QueryGetUnbondRelayFeeResponse) GetFee() UnbondRelayFee {
	if m != nil {
		return m.Fee
	}
	return UnbondRelayFee{}
}

type QueryGetUnbondCommissionRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetUnbondCommissionRequest) Reset()         { *m = QueryGetUnbondCommissionRequest{} }
func (m *QueryGetUnbondCommissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUnbondCommissionRequest) ProtoMessage()    {}
func (*QueryGetUnbondCommissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{22}
}
func (m *QueryGetUnbondCommissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnbondCommissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnbondCommissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnbondCommissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnbondCommissionRequest.Merge(m, src)
}
func (m *QueryGetUnbondCommissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnbondCommissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnbondCommissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnbondCommissionRequest proto.InternalMessageInfo

func (m *QueryGetUnbondCommissionRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetUnbondCommissionResponse struct {
	Commission string `protobuf:"bytes,1,opt,name=commission,proto3" json:"commission,omitempty"`
}

func (m *QueryGetUnbondCommissionResponse) Reset()         { *m = QueryGetUnbondCommissionResponse{} }
func (m *QueryGetUnbondCommissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUnbondCommissionResponse) ProtoMessage()    {}
func (*QueryGetUnbondCommissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{23}
}
func (m *QueryGetUnbondCommissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnbondCommissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnbondCommissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnbondCommissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnbondCommissionResponse.Merge(m, src)
}
func (m *QueryGetUnbondCommissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnbondCommissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnbondCommissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnbondCommissionResponse proto.InternalMessageInfo

func (m *QueryGetUnbondCommissionResponse) GetCommission() string {
	if m != nil {
		return m.Commission
	}
	return ""
}

type QueryGetEraUnbondLimitRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetEraUnbondLimitRequest) Reset()         { *m = QueryGetEraUnbondLimitRequest{} }
func (m *QueryGetEraUnbondLimitRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraUnbondLimitRequest) ProtoMessage()    {}
func (*QueryGetEraUnbondLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{24}
}
func (m *QueryGetEraUnbondLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraUnbondLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraUnbondLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraUnbondLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraUnbondLimitRequest.Merge(m, src)
}
func (m *QueryGetEraUnbondLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraUnbondLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraUnbondLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraUnbondLimitRequest proto.InternalMessageInfo

func (m *QueryGetEraUnbondLimitRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetEraUnbondLimitResponse struct {
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *QueryGetEraUnbondLimitResponse) Reset()         { *m = QueryGetEraUnbondLimitResponse{} }
func (m *QueryGetEraUnbondLimitResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraUnbondLimitResponse) ProtoMessage()    {}
func (*QueryGetEraUnbondLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{25}
}
func (m *QueryGetEraUnbondLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraUnbondLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraUnbondLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraUnbondLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraUnbondLimitResponse.Merge(m, src)
}
func (m *QueryGetEraUnbondLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraUnbondLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraUnbondLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraUnbondLimitResponse proto.InternalMessageInfo

func (m *QueryGetEraUnbondLimitResponse) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryGetBondPipelineRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Pool  string `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *QueryGetBondPipelineRequest) Reset()         { *m = QueryGetBondPipelineRequest{} }
func (m *QueryGetBondPipelineRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBondPipelineRequest) ProtoMessage()    {}
func (*QueryGetBondPipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{26}
}
func (m *QueryGetBondPipelineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBondPipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBondPipelineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBondPipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBondPipelineRequest.Merge(m, src)
}
func (m *QueryGetBondPipelineRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBondPipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBondPipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBondPipelineRequest proto.InternalMessageInfo

func (m *QueryGetBondPipelineRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetBondPipelineRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

type QueryGetBondPipelineResponse struct {
	Pipeline BondPipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline"`
}

func (m *QueryGetBondPipelineResponse) Reset()         { *m = QueryGetBondPipelineResponse{} }
func (m *QueryGetBondPipelineResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBondPipelineResponse) ProtoMessage()    {}
func (*QueryGetBondPipelineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{27}
}
func (m *QueryGetBondPipelineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBondPipelineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBondPipelineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBondPipelineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBondPipelineResponse.Merge(m, src)
}
func (m *QueryGetBondPipelineResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBondPipelineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBondPipelineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBondPipelineResponse proto.InternalMessageInfo

func (m *QueryGetBondPipelineResponse) GetPipeline() BondPipeline {
	if m != nil {
		return m.Pipeline
	}
	return BondPipeline{}
}

type QueryGetEraSnapshotRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Era   uint32 `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
}

func (m *QueryGetEraSnapshotRequest) Reset()         { *m = QueryGetEraSnapshotRequest{} }
func (m *QueryGetEraSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraSnapshotRequest) ProtoMessage()    {}
func (*QueryGetEraSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{28}
}
func (m *QueryGetEraSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraSnapshotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraSnapshotRequest.Merge(m, src)
}
func (m *QueryGetEraSnapshotRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraSnapshotRequest proto.InternalMessageInfo

func (m *QueryGetEraSnapshotRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetEraSnapshotRequest) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

type QueryGetEraSnapshotResponse struct {
	ShotIds []string `protobuf:"bytes,1,rep,name=shotIds,proto3" json:"shotIds,omitempty"`
}

func (m *QueryGetEraSnapshotResponse) Reset()         { *m = QueryGetEraSnapshotResponse{} }
func (m *QueryGetEraSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraSnapshotResponse) ProtoMessage()    {}
func (*QueryGetEraSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{29}
}
func (m *QueryGetEraSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraSnapshotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraSnapshotResponse.Merge(m, src)
}
func (m *QueryGetEraSnapshotResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraSnapshotResponse proto.InternalMessageInfo

func (m *QueryGetEraSnapshotResponse) GetShotIds() []string {
	if m != nil {
		return m.ShotIds
	}
	return nil
}

type QueryGetSnapshotRequest struct {
	ShotId string `protobuf:"bytes,1,opt,name=shotId,proto3" json:"shotId,omitempty"`
}

func (m *QueryGetSnapshotRequest) Reset()         { *m = QueryGetSnapshotRequest{} }
func (m *QueryGetSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSnapshotRequest) ProtoMessage()    {}
func (*QueryGetSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{30}
}
func (m *QueryGetSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSnapshotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSnapshotRequest.Merge(m, src)
}
func (m *QueryGetSnapshotRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSnapshotRequest proto.InternalMessageInfo

func (m *QueryGetSnapshotRequest) GetShotId() string {
	if m != nil {
		return m.ShotId
	}
	return ""
}

type QueryGetSnapshotResponse struct {
	Shot BondSnapshot `protobuf:"bytes,1,opt,name=shot,proto3" json:"shot"`
}

func (m *QueryGetSnapshotResponse) Reset()         { *m = QueryGetSnapshotResponse{} }
func (m *QueryGetSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSnapshotResponse) ProtoMessage()    {}
func (*QueryGetSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{31}
}
func (m *QueryGetSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSnapshotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSnapshotResponse.Merge(m, src)
}
func (m *QueryGetSnapshotResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSnapshotResponse proto.InternalMessageInfo

func (m *QueryGetSnapshotResponse) GetShot() BondSnapshot {
	if m != nil {
		return m.Shot
	}
	return BondSnapshot{}
}

type QueryGetTotalExpectedActiveRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Era   uint32 `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
}

func (m *QueryGetTotalExpectedActiveRequest) Reset()         { *m = QueryGetTotalExpectedActiveRequest{} }
func (m *QueryGetTotalExpectedActiveRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTotalExpectedActiveRequest) ProtoMessage()    {}
func (*QueryGetTotalExpectedActiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{32}
}
func (m *QueryGetTotalExpectedActiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTotalExpectedActiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTotalExpectedActiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTotalExpectedActiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTotalExpectedActiveRequest.Merge(m, src)
}
func (m *QueryGetTotalExpectedActiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTotalExpectedActiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTotalExpectedActiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTotalExpectedActiveRequest proto.InternalMessageInfo

func (m *QueryGetTotalExpectedActiveRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetTotalExpectedActiveRequest) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

type QueryGetTotalExpectedActiveResponse struct {
	Active github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=active,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"active"`
}

func (m *QueryGetTotalExpectedActiveResponse) Reset()         { *m = QueryGetTotalExpectedActiveResponse{} }
func (m *QueryGetTotalExpectedActiveResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTotalExpectedActiveResponse) ProtoMessage()    {}
func (*QueryGetTotalExpectedActiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{33}
}
func (m *QueryGetTotalExpectedActiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTotalExpectedActiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTotalExpectedActiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTotalExpectedActiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTotalExpectedActiveResponse.Merge(m, src)
}
func (m *QueryGetTotalExpectedActiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTotalExpectedActiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTotalExpectedActiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTotalExpectedActiveResponse proto.InternalMessageInfo

type QueryGetBondRecordRequest struct {
	Denom  string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Txhash string `protobuf:"bytes,2,opt,name=txhash,proto3" json:"txhash,omitempty"`
}

func (m *QueryGetBondRecordRequest) Reset()         { *m = QueryGetBondRecordRequest{} }
func (m *QueryGetBondRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBondRecordRequest) ProtoMessage()    {}
func (*QueryGetBondRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{34}
}
func (m *QueryGetBondRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBondRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBondRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBondRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBondRecordRequest.Merge(m, src)
}
func (m *QueryGetBondRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBondRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBondRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBondRecordRequest proto.InternalMessageInfo

func (m *QueryGetBondRecordRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetBondRecordRequest) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

type QueryGetBondRecordResponse struct {
	BondRecord BondRecord `protobuf:"bytes,1,opt,name=bondRecord,proto3" json:"bondRecord"`
}

func (m *QueryGetBondRecordResponse) Reset()         { *m = QueryGetBondRecordResponse{} }
func (m *QueryGetBondRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBondRecordResponse) ProtoMessage()    {}
func (*QueryGetBondRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{35}
}
func (m *QueryGetBondRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBondRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBondRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBondRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBondRecordResponse.Merge(m, src)
}
func (m *QueryGetBondRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBondRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBondRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBondRecordResponse proto.InternalMessageInfo

func (m *QueryGetBondRecordResponse) GetBondRecord() BondRecord {
	if m != nil {
		return m.BondRecord
	}
	return BondRecord{}
}

type QueryGetSignatureRequest struct {
	Denom  string         `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Era    uint32         `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
	Pool   string         `protobuf:"bytes,3,opt,name=pool,proto3" json:"pool,omitempty"`
	TxType OriginalTxType `protobuf:"varint,4,opt,name=txType,proto3,enum=stafihub.stafihub.ledger.OriginalTxType" json:"txType,omitempty"`
	PropId string         `protobuf:"bytes,5,opt,name=propId,proto3" json:"propId,omitempty"`
}

func (m *QueryGetSignatureRequest) Reset()         { *m = QueryGetSignatureRequest{} }
func (m *QueryGetSignatureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignatureRequest) ProtoMessage()    {}
func (*QueryGetSignatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{36}
}
func (m *QueryGetSignatureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignatureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignatureRequest.Merge(m, src)
}
func (m *QueryGetSignatureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignatureRequest proto.InternalMessageInfo

func (m *QueryGetSignatureRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetSignatureRequest) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetSignatureRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *QueryGetSignatureRequest) GetTxType() OriginalTxType {
	if m != nil {
		return m.TxType
	}
	return TxTypeDealEraUpdated
}

func (m *QueryGetSignatureRequest) GetPropId() string {
	if m != nil {
		return m.PropId
	}
	return ""
}

type QueryGetSignatureResponse struct {
	Signature Signature `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature"`
}

func (m *QueryGetSignatureResponse) Reset()         { *m = QueryGetSignatureResponse{} }
func (m *QueryGetSignatureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignatureResponse) ProtoMessage()    {}
func (*QueryGetSignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{37}
}
func (m *QueryGetSignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignatureResponse.Merge(m, src)
}
func (m *QueryGetSignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignatureResponse proto.InternalMessageInfo

func (m *QueryGetSignatureResponse) GetSignature() Signature {
	if m != nil {
		return m.Signature
	}
	return Signature{}
}

type QueryGetRParamsRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetRParamsRequest) Reset()         { *m = QueryGetRParamsRequest{} }
func (m *QueryGetRParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRParamsRequest) ProtoMessage()    {}
func (*QueryGetRParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{38}
}
func (m *QueryGetRParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRParamsRequest.Merge(m, src)
}
func (m *QueryGetRParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRParamsRequest proto.InternalMessageInfo

func (m *QueryGetRParamsRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetRParamsResponse struct {
	RParams RParams `protobuf:"bytes,1,opt,name=rParams,proto3" json:"rParams"`
}

func (m *QueryGetRParamsResponse) Reset()         { *m = QueryGetRParamsResponse{} }
func (m *QueryGetRParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRParamsResponse) ProtoMessage()    {}
func (*QueryGetRParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{39}
}
func (m *QueryGetRParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRParamsResponse.Merge(m, src)
}
func (m *QueryGetRParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRParamsResponse proto.InternalMessageInfo

func (m *QueryGetRParamsResponse) GetRParams() RParams {
	if m != nil {
		return m.RParams
	}
	return RParams{}
}

type QueryTotalProtocolFeeRequest struct {
}

func (m *QueryTotalProtocolFeeRequest) Reset()         { *m = QueryTotalProtocolFeeRequest{} }
func (m *QueryTotalProtocolFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalProtocolFeeRequest) ProtoMessage()    {}
func (*QueryTotalProtocolFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{40}
}
func (m *QueryTotalProtocolFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalProtocolFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalProtocolFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalProtocolFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalProtocolFeeRequest.Merge(m, src)
}
func (m *QueryTotalProtocolFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalProtocolFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalProtocolFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalProtocolFeeRequest proto.InternalMessageInfo

type QueryTotalProtocolFeeResponse struct {
	TotalProtocolFeeList []*TotalProtocolFee `protobuf:"bytes,1,rep,name=totalProtocolFeeList,proto3" json:"totalProtocolFeeList,omitempty"`
}

func (m *QueryTotalProtocolFeeResponse) Reset()         { *m = QueryTotalProtocolFeeResponse{} }
func (m *QueryTotalProtocolFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalProtocolFeeResponse) ProtoMessage()    {}
func (*QueryTotalProtocolFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{41}
}
func (m *QueryTotalProtocolFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalProtocolFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalProtocolFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalProtocolFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalProtocolFeeResponse.Merge(m, src)
}
func (m *QueryTotalProtocolFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalProtocolFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalProtocolFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalProtocolFeeResponse proto.InternalMessageInfo

func (m *QueryTotalProtocolFeeResponse) GetTotalProtocolFeeList() []*TotalProtocolFee {
	if m != nil {
		return m.TotalProtocolFeeList
	}
	return nil
}

type QueryRelayFeeReceiverRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryRelayFeeReceiverRequest) Reset()         { *m = QueryRelayFeeReceiverRequest{} }
func (m *QueryRelayFeeReceiverRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRelayFeeReceiverRequest) ProtoMessage()    {}
func (*QueryRelayFeeReceiverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{42}
}
func (m *QueryRelayFeeReceiverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRelayFeeReceiverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRelayFeeReceiverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRelayFeeReceiverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRelayFeeReceiverRequest.Merge(m, src)
}
func (m *QueryRelayFeeReceiverRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRelayFeeReceiverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRelayFeeReceiverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRelayFeeReceiverRequest proto.InternalMessageInfo

func (m *QueryRelayFeeReceiverRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryRelayFeeReceiverResponse struct {
	Receiver string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (m *QueryRelayFeeReceiverResponse) Reset()         { *m = QueryRelayFeeReceiverResponse{} }
func (m *QueryRelayFeeReceiverResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRelayFeeReceiverResponse) ProtoMessage()    {}
func (*QueryRelayFeeReceiverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{43}
}
func (m *QueryRelayFeeReceiverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRelayFeeReceiverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRelayFeeReceiverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRelayFeeReceiverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRelayFeeReceiverResponse.Merge(m, src)
}
func (m *QueryRelayFeeReceiverResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRelayFeeReceiverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRelayFeeReceiverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRelayFeeReceiverResponse proto.InternalMessageInfo

func (m *QueryRelayFeeReceiverResponse) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

type QueryUnbondSwitchRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryUnbondSwitchRequest) Reset()         { *m = QueryUnbondSwitchRequest{} }
func (m *QueryUnbondSwitchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnbondSwitchRequest) ProtoMessage()    {}
func (*QueryUnbondSwitchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{44}
}
func (m *QueryUnbondSwitchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnbondSwitchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnbondSwitchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnbondSwitchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnbondSwitchRequest.Merge(m, src)
}
func (m *QueryUnbondSwitchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnbondSwitchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnbondSwitchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnbondSwitchRequest proto.InternalMessageInfo

func (m *QueryUnbondSwitchRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryUnbondSwitchResponse struct {
	IsOpen bool `protobuf:"varint,1,opt,name=isOpen,proto3" json:"isOpen,omitempty"`
}

func (m *QueryUnbondSwitchResponse) Reset()         { *m = QueryUnbondSwitchResponse{} }
func (m *QueryUnbondSwitchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnbondSwitchResponse) ProtoMessage()    {}
func (*QueryUnbondSwitchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{45}
}
func (m *QueryUnbondSwitchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnbondSwitchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnbondSwitchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnbondSwitchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnbondSwitchResponse.Merge(m, src)
}
func (m *QueryUnbondSwitchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnbondSwitchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnbondSwitchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnbondSwitchResponse proto.InternalMessageInfo

func (m *QueryUnbondSwitchResponse) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

type QueryPoolUnbondNextSequenceRequest struct {
	Denom     string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Pool      string `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	UnlockEra uint32 `protobuf:"varint,3,opt,name=unlockEra,proto3" json:"unlockEra,omitempty"`
}

func (m *QueryPoolUnbondNextSequenceRequest) Reset()         { *m = QueryPoolUnbondNextSequenceRequest{} }
func (m *QueryPoolUnbondNextSequenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolUnbondNextSequenceRequest) ProtoMessage()    {}
func (*QueryPoolUnbondNextSequenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{46}
}
func (m *QueryPoolUnbondNextSequenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolUnbondNextSequenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolUnbondNextSequenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolUnbondNextSequenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolUnbondNextSequenceRequest.Merge(m, src)
}
func (m *QueryPoolUnbondNextSequenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolUnbondNextSequenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolUnbondNextSequenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolUnbondNextSequenceRequest proto.InternalMessageInfo

func (m *QueryPoolUnbondNextSequenceRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryPoolUnbondNextSequenceRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *QueryPoolUnbondNextSequenceRequest) GetUnlockEra() uint32 {
	if m != nil {
		return m.UnlockEra
	}
	return 0
}

type QueryPoolUnbondNextSequenceResponse struct {
	NextSequence uint32 `protobuf:"varint,1,opt,name=nextSequence,proto3" json:"nextSequence,omitempty"`
}

func (m *QueryPoolUnbondNextSequenceResponse) Reset()         { *m = QueryPoolUnbondNextSequenceResponse{} }
func (m *QueryPoolUnbondNextSequenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolUnbondNextSequenceResponse) ProtoMessage()    {}
func (*QueryPoolUnbondNextSequenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{47}
}
func (m *QueryPoolUnbondNextSequenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolUnbondNextSequenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolUnbondNextSequenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolUnbondNextSequenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolUnbondNextSequenceResponse.Merge(m, src)
}
func (m *QueryPoolUnbondNextSequenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolUnbondNextSequenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolUnbondNextSequenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolUnbondNextSequenceResponse proto.InternalMessageInfo

func (m *QueryPoolUnbondNextSequenceResponse) GetNextSequence() uint32 {
	if m != nil {
		return m.NextSequence
	}
	return 0
}

type QueryPoolUnbondingsRequest struct {
	Denom     string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Pool      string `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	UnlockEra uint32 `protobuf:"varint,3,opt,name=unlockEra,proto3" json:"unlockEra,omitempty"`
}

func (m *QueryPoolUnbondingsRequest) Reset()         { *m = QueryPoolUnbondingsRequest{} }
func (m *QueryPoolUnbondingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolUnbondingsRequest) ProtoMessage()    {}
func (*QueryPoolUnbondingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{48}
}
func (m *QueryPoolUnbondingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolUnbondingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolUnbondingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolUnbondingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolUnbondingsRequest.Merge(m, src)
}
func (m *QueryPoolUnbondingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolUnbondingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolUnbondingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolUnbondingsRequest proto.InternalMessageInfo

func (m *QueryPoolUnbondingsRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryPoolUnbondingsRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *QueryPoolUnbondingsRequest) GetUnlockEra() uint32 {
	if m != nil {
		return m.UnlockEra
	}
	return 0
}

type QueryPoolUnbondingsResponse struct {
	Unbondings []*Unbonding `protobuf:"bytes,1,rep,name=unbondings,proto3" json:"unbondings,omitempty"`
}

func (m *QueryPoolUnbondingsResponse) Reset()         { *m = QueryPoolUnbondingsResponse{} }
func (m *QueryPoolUnbondingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolUnbondingsResponse) ProtoMessage()    {}
func (*QueryPoolUnbondingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{49}
}
func (m *QueryPoolUnbondingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolUnbondingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolUnbondingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolUnbondingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolUnbondingsResponse.Merge(m, src)
}
func (m *QueryPoolUnbondingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolUnbondingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolUnbondingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolUnbondingsResponse proto.InternalMessageInfo

func (m *QueryPoolUnbondingsResponse) GetUnbondings() []*Unbonding {
	if m != nil {
		return m.Unbondings
	}
	return nil
}

type QueryIcaPoolListRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryIcaPoolListRequest) Reset()         { *m = QueryIcaPoolListRequest{} }
func (m *QueryIcaPoolListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIcaPoolListRequest) ProtoMessage()    {}
func (*QueryIcaPoolListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{50}
}
func (m *QueryIcaPoolListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIcaPoolListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIcaPoolListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIcaPoolListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIcaPoolListRequest.Merge(m, src)
}
func (m *QueryIcaPoolListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIcaPoolListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIcaPoolListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIcaPoolListRequest proto.InternalMessageInfo

func (m *QueryIcaPoolListRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryIcaPoolListResponse struct {
	IcaPoolList []*IcaPoolDetail `protobuf:"bytes,1,rep,name=icaPoolList,proto3" json:"icaPoolList,omitempty"`
}

func (m *QueryIcaPoolListResponse) Reset()         { *m = QueryIcaPoolListResponse{} }
func (m *QueryIcaPoolListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIcaPoolListResponse) ProtoMessage()    {}
func (*QueryIcaPoolListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{51}
}
func (m *QueryIcaPoolListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIcaPoolListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIcaPoolListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIcaPoolListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIcaPoolListResponse.Merge(m, src)
}
func (m *QueryIcaPoolListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIcaPoolListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIcaPoolListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIcaPoolListResponse proto.InternalMessageInfo

func (m *QueryIcaPoolListResponse) GetIcaPoolList() []*IcaPoolDetail {
	if m != nil {
		return m.IcaPoolList
	}
	return nil
}

type QueryInterchainTxStatusRequest struct {
	PropId string `protobuf:"bytes,1,opt,name=propId,proto3" json:"propId,omitempty"`
}

func (m *QueryInterchainTxStatusRequest) Reset()         { *m = QueryInterchainTxStatusRequest{} }
func (m *QueryInterchainTxStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInterchainTxStatusRequest) ProtoMessage()    {}
func (*QueryInterchainTxStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{52}
}
func (m *QueryInterchainTxStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInterchainTxStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInterchainTxStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInterchainTxStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInterchainTxStatusRequest.Merge(m, src)
}
func (m *QueryInterchainTxStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInterchainTxStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInterchainTxStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInterchainTxStatusRequest proto.InternalMessageInfo

func (m *QueryInterchainTxStatusRequest) GetPropId() string {
	if m != nil {
		return m.PropId
	}
	return ""
}

type QueryInterchainTxStatusResponse struct {
	InterchainTxStatus InterchainTxStatus `protobuf:"varint,1,opt,name=interchainTxStatus,proto3,enum=stafihub.stafihub.ledger.InterchainTxStatus" json:"interchainTxStatus,omitempty"`
}

func (m *QueryInterchainTxStatusResponse) Reset()         { *m = QueryInterchainTxStatusResponse{} }
func (m *QueryInterchainTxStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInterchainTxStatusResponse) ProtoMessage()    {}
func (*QueryInterchainTxStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca959e2684fc7842, []int{53}
}
func (m *QueryInterchainTxStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInterchainTxStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInterchainTxStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInterchainTxStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInterchainTxStatusResponse.Merge(m, src)
}
func (m *QueryInterchainTxStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInterchainTxStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInterchainTxStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInterchainTxStatusResponse proto.InternalMessageInfo

func (m *QueryInterchainTxStatusResponse) GetInterchainTxStatus() InterchainTxStatus {
	if m != nil {
		return m.InterchainTxStatus
	}
	return InterchainTxStatusUnspecified
}

func init() {
	proto.RegisterType((*QueryGetExchangeRateRequest)(nil), "stafihub.stafihub.ledger.QueryGetExchangeRateRequest")
	proto.RegisterType((*QueryGetExchangeRateResponse)(nil), "stafihub.stafihub.ledger.QueryGetExchangeRateResponse")
	proto.RegisterType((*QueryExchangeRateAllRequest)(nil), "stafihub.stafihub.ledger.QueryExchangeRateAllRequest")
	proto.RegisterType((*QueryExchangeRateAllResponse)(nil), "stafihub.stafihub.ledger.QueryExchangeRateAllResponse")
	proto.RegisterType((*QueryGetEraExchangeRateRequest)(nil), "stafihub.stafihub.ledger.QueryGetEraExchangeRateRequest")
	proto.RegisterType((*QueryGetEraExchangeRateResponse)(nil), "stafihub.stafihub.ledger.QueryGetEraExchangeRateResponse")
	proto.RegisterType((*QueryEraExchangeRatesByDenomRequest)(nil), "stafihub.stafihub.ledger.QueryEraExchangeRatesByDenomRequest")
	proto.RegisterType((*QueryEraExchangeRatesByDenomResponse)(nil), "stafihub.stafihub.ledger.QueryEraExchangeRatesByDenomResponse")
	proto.RegisterType((*QueryBondedPoolsByDenomRequest)(nil), "stafihub.stafihub.ledger.QueryBondedPoolsByDenomRequest")
	proto.RegisterType((*QueryBondedPoolsByDenomResponse)(nil), "stafihub.stafihub.ledger.QueryBondedPoolsByDenomResponse")
	proto.RegisterType((*QueryGetPoolDetailRequest)(nil), "stafihub.stafihub.ledger.QueryGetPoolDetailRequest")
	proto.RegisterType((*QueryGetPoolDetailResponse)(nil), "stafihub.stafihub.ledger.QueryGetPoolDetailResponse")
	proto.RegisterType((*QueryGetChainEraRequest)(nil), "stafihub.stafihub.ledger.QueryGetChainEraRequest")
	proto.RegisterType((*QueryGetChainEraResponse)(nil), "stafihub.stafihub.ledger.QueryGetChainEraResponse")
	proto.RegisterType((*QueryGetCurrentEraSnapshotRequest)(nil), "stafihub.stafihub.ledger.QueryGetCurrentEraSnapshotRequest")
	proto.RegisterType((*QueryGetCurrentEraSnapshotResponse)(nil), "stafihub.stafihub.ledger.QueryGetCurrentEraSnapshotResponse")
	proto.RegisterType((*QueryGetProtocolFeeReceiverRequest)(nil), "stafihub.stafihub.ledger.QueryGetProtocolFeeReceiverRequest")
	proto.RegisterType((*QueryGetProtocolFeeReceiverResponse)(nil), "stafihub.stafihub.ledger.QueryGetProtocolFeeReceiverResponse")
	proto.RegisterType((*QueryGetStakingRewardCommissionRequest)(nil), "stafihub.stafihub.ledger.QueryGetStakingRewardCommissionRequest")
	proto.RegisterType((*QueryGetStakingRewardCommissionResponse)(nil), "stafihub.stafihub.ledger.QueryGetStakingRewardCommissionResponse")
	proto.RegisterType((*QueryGetUnbondRelayFeeRequest)(nil), "stafihub.stafihub.ledger.QueryGetUnbondRelayFeeRequest")
	proto.RegisterType((*QueryGetUnbondRelayFeeResponse)(nil), "stafihub.stafihub.ledger.QueryGetUnbondRelayFeeResponse")
	proto.RegisterType((*QueryGetUnbondCommissionRequest)(nil), "stafihub.stafihub.ledger.QueryGetUnbondCommissionRequest")
	proto.RegisterType((*QueryGetUnbondCommissionResponse)(nil), "stafihub.stafihub.ledger.QueryGetUnbondCommissionResponse")
	proto.RegisterType((*QueryGetEraUnbondLimitRequest)(nil), "stafihub.stafihub.ledger.QueryGetEraUnbondLimitRequest")
	proto.RegisterType((*QueryGetEraUnbondLimitResponse)(nil), "stafihub.stafihub.ledger.QueryGetEraUnbondLimitResponse")
	proto.RegisterType((*QueryGetBondPipelineRequest)(nil), "stafihub.stafihub.ledger.QueryGetBondPipelineRequest")
	proto.RegisterType((*QueryGetBondPipelineResponse)(nil), "stafihub.stafihub.ledger.QueryGetBondPipelineResponse")
	proto.RegisterType((*QueryGetEraSnapshotRequest)(nil), "stafihub.stafihub.ledger.QueryGetEraSnapshotRequest")
	proto.RegisterType((*QueryGetEraSnapshotResponse)(nil), "stafihub.stafihub.ledger.QueryGetEraSnapshotResponse")
	proto.RegisterType((*QueryGetSnapshotRequest)(nil), "stafihub.stafihub.ledger.QueryGetSnapshotRequest")
	proto.RegisterType((*QueryGetSnapshotResponse)(nil), "stafihub.stafihub.ledger.QueryGetSnapshotResponse")
	proto.RegisterType((*QueryGetTotalExpectedActiveRequest)(nil), "stafihub.stafihub.ledger.QueryGetTotalExpectedActiveRequest")
	proto.RegisterType((*QueryGetTotalExpectedActiveResponse)(nil), "stafihub.stafihub.ledger.QueryGetTotalExpectedActiveResponse")
	proto.RegisterType((*QueryGetBondRecordRequest)(nil), "stafihub.stafihub.ledger.QueryGetBondRecordRequest")
	proto.RegisterType((*QueryGetBondRecordResponse)(nil), "stafihub.stafihub.ledger.QueryGetBondRecordResponse")
	proto.RegisterType((*QueryGetSignatureRequest)(nil), "stafihub.stafihub.ledger.QueryGetSignatureRequest")
	proto.RegisterType((*QueryGetSignatureResponse)(nil), "stafihub.stafihub.ledger.QueryGetSignatureResponse")
	proto.RegisterType((*QueryGetRParamsRequest)(nil), "stafihub.stafihub.ledger.QueryGetRParamsRequest")
	proto.RegisterType((*QueryGetRParamsResponse)(nil), "stafihub.stafihub.ledger.QueryGetRParamsResponse")
	proto.RegisterType((*QueryTotalProtocolFeeRequest)(nil), "stafihub.stafihub.ledger.QueryTotalProtocolFeeRequest")
	proto.RegisterType((*QueryTotalProtocolFeeResponse)(nil), "stafihub.stafihub.ledger.QueryTotalProtocolFeeResponse")
	proto.RegisterType((*QueryRelayFeeReceiverRequest)(nil), "stafihub.stafihub.ledger.QueryRelayFeeReceiverRequest")
	proto.RegisterType((*QueryRelayFeeReceiverResponse)(nil), "stafihub.stafihub.ledger.QueryRelayFeeReceiverResponse")
	proto.RegisterType((*QueryUnbondSwitchRequest)(nil), "stafihub.stafihub.ledger.QueryUnbondSwitchRequest")
	proto.RegisterType((*QueryUnbondSwitchResponse)(nil), "stafihub.stafihub.ledger.QueryUnbondSwitchResponse")
	proto.RegisterType((*QueryPoolUnbondNextSequenceRequest)(nil), "stafihub.stafihub.ledger.QueryPoolUnbondNextSequenceRequest")
	proto.RegisterType((*QueryPoolUnbondNextSequenceResponse)(nil), "stafihub.stafihub.ledger.QueryPoolUnbondNextSequenceResponse")
	proto.RegisterType((*QueryPoolUnbondingsRequest)(nil), "stafihub.stafihub.ledger.QueryPoolUnbondingsRequest")
	proto.RegisterType((*QueryPoolUnbondingsResponse)(nil), "stafihub.stafihub.ledger.QueryPoolUnbondingsResponse")
	proto.RegisterType((*QueryIcaPoolListRequest)(nil), "stafihub.stafihub.ledger.QueryIcaPoolListRequest")
	proto.RegisterType((*QueryIcaPoolListResponse)(nil), "stafihub.stafihub.ledger.QueryIcaPoolListResponse")
	proto.RegisterType((*QueryInterchainTxStatusRequest)(nil), "stafihub.stafihub.ledger.QueryInterchainTxStatusRequest")
	proto.RegisterType((*QueryInterchainTxStatusResponse)(nil), "stafihub.stafihub.ledger.QueryInterchainTxStatusResponse")
}

func init() { proto.RegisterFile("ledger/query.proto", fileDescriptor_ca959e2684fc7842) }

var fileDescriptor_ca959e2684fc7842 = []byte{
	// 2152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xdd, 0x6f, 0x1c, 0x57,
	0x15, 0xcf, 0x34, 0x89, 0x1b, 0x9f, 0x7c, 0x72, 0x1b, 0x5c, 0x33, 0xa4, 0x8e, 0x7b, 0x13, 0xe5,
	0x83, 0xa6, 0xbb, 0x89, 0xed, 0xf8, 0x23, 0x5f, 0xb5, 0x37, 0x71, 0xd2, 0x45, 0x51, 0x6b, 0xd6,
	0x01, 0x09, 0x88, 0x18, 0xc6, 0xbb, 0x37, 0xbb, 0xa3, 0x8c, 0x67, 0xa6, 0x33, 0xb3, 0xad, 0xad,
	0x60, 0x55, 0x82, 0x7f, 0x00, 0x89, 0x7f, 0x02, 0x1e, 0x90, 0xfa, 0xc2, 0x43, 0x25, 0x04, 0x42,
	0x02, 0x54, 0x01, 0x42, 0x95, 0x90, 0x10, 0xe2, 0xa1, 0x44, 0x09, 0xaf, 0x3c, 0xf1, 0x0f, 0xa0,
	0x7b, 0xef, 0x99, 0xef, 0x6f, 0xd3, 0x27, 0xef, 0xdc, 0x9d, 0xdf, 0xb9, 0xbf, 0x73, 0xee, 0xb9,
	0xe7, 0x9c, 0xfd, 0x19, 0x88, 0xc9, 0x06, 0x43, 0xe6, 0xb6, 0x3f, 0x18, 0x33, 0x77, 0xb7, 0xe5,
	0xb8, 0xb6, 0x6f, 0x93, 0x69, 0xcf, 0xd7, 0x9f, 0x18, 0xa3, 0xf1, 0x56, 0x2b, 0xfc, 0x20, 0xdf,
	0x52, 0x4f, 0x0f, 0xed, 0xa1, 0x2d, 0x5e, 0x6a, 0xf3, 0x4f, 0xf2, 0x7d, 0xf5, 0x35, 0xb4, 0x21,
	0xff, 0xe0, 0xe2, 0x99, 0xa1, 0x6d, 0x0f, 0x4d, 0xd6, 0xd6, 0x1d, 0xa3, 0xad, 0x5b, 0x96, 0xed,
	0xeb, 0xbe, 0x61, 0x5b, 0x9e, 0xfc, 0x96, 0xce, 0xc3, 0xd7, 0xbf, 0xc5, 0x77, 0x7c, 0xc0, 0xfc,
	0xf5, 0x9d, 0xfe, 0x48, 0xb7, 0x86, 0xac, 0xa7, 0xfb, 0xac, 0xc7, 0x3e, 0x18, 0x33, 0xcf, 0x27,
	0xa7, 0xe1, 0xf0, 0x80, 0x59, 0xf6, 0xf6, 0xb4, 0x32, 0xab, 0x5c, 0x9a, 0xec, 0xc9, 0x07, 0xea,
	0xc0, 0x99, 0x7c, 0x90, 0xe7, 0xd8, 0x96, 0xc7, 0xc8, 0x06, 0x1c, 0x63, 0xb1, 0x75, 0x01, 0x3e,
	0x3a, 0x77, 0xa1, 0x55, 0xe4, 0x4e, 0x2b, 0x6e, 0xa5, 0x73, 0xe8, 0xb3, 0x2f, 0xce, 0x1e, 0xe8,
	0x25, 0x2c, 0xd0, 0x37, 0x90, 0x66, 0xfc, 0xc5, 0x35, 0xd3, 0x44, 0x9a, 0xd4, 0x45, 0x42, 0x99,
	0xaf, 0x91, 0x50, 0x0f, 0x8e, 0xc7, 0xcd, 0x79, 0xd3, 0xca, 0xec, 0xc1, 0xc6, 0x8c, 0x92, 0x26,
	0xe8, 0xbb, 0x30, 0x13, 0x06, 0xc1, 0xd5, 0x6b, 0x07, 0x8f, 0x9c, 0x82, 0x83, 0xcc, 0xd5, 0xa7,
	0x5f, 0x99, 0x55, 0x2e, 0x1d, 0xef, 0xf1, 0x8f, 0xf4, 0x47, 0x70, 0xb6, 0xd0, 0x12, 0x3a, 0xf0,
	0x5d, 0x38, 0xc9, 0x92, 0x5f, 0x61, 0x50, 0x2f, 0x97, 0xb8, 0x90, 0x04, 0xa0, 0x17, 0x69, 0x3b,
	0xf4, 0x26, 0x9c, 0x93, 0xb1, 0x4b, 0xae, 0x7b, 0x9d, 0xdd, 0x7b, 0x9c, 0x6f, 0x79, 0x26, 0xfc,
	0x44, 0x81, 0xf3, 0xe5, 0x68, 0x74, 0xe0, 0xfb, 0x70, 0x2a, 0xb5, 0x71, 0x70, 0x08, 0x8d, 0x3d,
	0xc8, 0x18, 0xa2, 0x8b, 0x78, 0x14, 0x1d, 0xdb, 0x1a, 0xb0, 0xc1, 0x86, 0x6d, 0x9b, 0xf5, 0xd8,
	0x2f, 0x61, 0xe0, 0xf3, 0x70, 0xc8, 0xfb, 0x34, 0x1c, 0xd6, 0x07, 0x03, 0x57, 0x92, 0x9d, 0xec,
	0xc9, 0x07, 0xba, 0x0e, 0x5f, 0x0b, 0x4e, 0x8c, 0xa3, 0xee, 0x31, 0x5f, 0x37, 0xcc, 0xf2, 0x63,
	0x27, 0x70, 0xc8, 0xb1, 0x6d, 0x53, 0x9c, 0xfb, 0x64, 0x4f, 0x7c, 0xa6, 0x3f, 0x04, 0x35, 0xcf,
	0x0c, 0x6e, 0xdd, 0x81, 0x89, 0x81, 0x58, 0xc1, 0xa3, 0x3e, 0x5f, 0x1c, 0xa8, 0x08, 0x8d, 0x31,
	0x42, 0x24, 0x6d, 0xc3, 0xeb, 0xc1, 0x0e, 0x77, 0x47, 0xba, 0x61, 0xad, 0xbb, 0x7a, 0x79, 0x48,
	0xae, 0xc0, 0x74, 0x16, 0x80, 0x84, 0x30, 0x73, 0x95, 0x28, 0x73, 0x57, 0xe0, 0xcd, 0xf0, 0xed,
	0xb1, 0xeb, 0x32, 0x8b, 0x27, 0xf0, 0xa6, 0xa5, 0x3b, 0xde, 0xc8, 0xf6, 0xcb, 0x37, 0xba, 0x03,
	0xb4, 0x0c, 0x8a, 0x5b, 0x4e, 0xc3, 0xab, 0xfc, 0xb9, 0x3b, 0x08, 0x0e, 0x20, 0x78, 0xa4, 0xe7,
	0x23, 0xfc, 0x06, 0xaf, 0x64, 0x7d, 0xdb, 0xbc, 0xcf, 0x58, 0x8f, 0xf5, 0x99, 0xf1, 0x21, 0x73,
	0x83, 0xc2, 0xb0, 0x86, 0xc9, 0x5d, 0xf4, 0x16, 0x6e, 0xa3, 0xc2, 0x11, 0x17, 0xd7, 0x90, 0x65,
	0xf8, 0x4c, 0xef, 0xc0, 0x85, 0xc0, 0xc4, 0xa6, 0xaf, 0x3f, 0x35, 0xac, 0x61, 0x8f, 0x7d, 0xa4,
	0xbb, 0x83, 0xbb, 0xf6, 0xf6, 0xb6, 0xe1, 0x79, 0x86, 0x6d, 0x95, 0x3b, 0xda, 0x85, 0x8b, 0x95,
	0x78, 0xa4, 0x31, 0x03, 0xd0, 0x0f, 0x57, 0xd1, 0x4a, 0x6c, 0x85, 0x5e, 0x87, 0x37, 0x02, 0x53,
	0xdf, 0xb6, 0xb6, 0x6c, 0x6b, 0xd0, 0x63, 0xa6, 0xbe, 0x2b, 0x1c, 0x2a, 0x63, 0xb0, 0x15, 0x55,
	0xaa, 0x34, 0x0c, 0x37, 0x5e, 0x85, 0x83, 0x4f, 0x58, 0x50, 0x52, 0x2e, 0x15, 0xe7, 0x59, 0x12,
	0x8e, 0xb9, 0xc6, 0xa1, 0xe1, 0x55, 0x0a, 0xf7, 0xa8, 0x1b, 0x9e, 0x0e, 0xcc, 0x16, 0x03, 0x9b,
	0xc7, 0x65, 0xdd, 0xd5, 0xa5, 0x99, 0x87, 0xc6, 0xb6, 0x51, 0x91, 0x82, 0x8b, 0x89, 0x0a, 0x9e,
	0x80, 0x45, 0xb7, 0xdf, 0xe4, 0x0b, 0x98, 0xf3, 0xf2, 0x81, 0x3e, 0x88, 0x7a, 0x26, 0xaf, 0x1c,
	0x1b, 0x86, 0xc3, 0x4c, 0xc3, 0x62, 0xcd, 0xef, 0xff, 0x28, 0xea, 0xa3, 0x49, 0x43, 0xb8, 0xfd,
	0xbb, 0x70, 0xc4, 0xc1, 0xb5, 0xea, 0x1e, 0x1a, 0xb7, 0x80, 0x27, 0x13, 0xa2, 0xe9, 0xbd, 0xa8,
	0xd2, 0xd4, 0xbd, 0xa1, 0x39, 0x8d, 0x6a, 0x29, 0x36, 0x2c, 0x34, 0xba, 0xac, 0xd7, 0xa2, 0x32,
	0x94, 0xde, 0x7b, 0x0a, 0x26, 0xe4, 0x5b, 0xb8, 0x39, 0x3e, 0xd1, 0xc7, 0x51, 0x21, 0xca, 0x6c,
	0xb4, 0x0a, 0x87, 0xf8, 0x73, 0xbd, 0x98, 0x04, 0x68, 0x8c, 0x89, 0x40, 0xd2, 0x87, 0x51, 0xf5,
	0x78, 0x64, 0xfb, 0xba, 0xb9, 0xbe, 0xe3, 0xb0, 0xbe, 0xcf, 0x06, 0x6b, 0x7d, 0xdf, 0xf8, 0xb0,
	0x71, 0x03, 0xdf, 0x8e, 0xaa, 0x4c, 0xae, 0x35, 0xa4, 0x7d, 0x1f, 0x26, 0x74, 0xb1, 0x22, 0xed,
	0x75, 0x5a, 0x9c, 0xd0, 0x3f, 0xbf, 0x38, 0x7b, 0x61, 0x68, 0xf8, 0x9c, 0x74, 0xdf, 0xde, 0x6e,
	0xf7, 0x6d, 0x6f, 0xdb, 0xf6, 0xf0, 0xcf, 0xdb, 0xde, 0xe0, 0x69, 0xdb, 0xdf, 0x75, 0x98, 0xd7,
	0xea, 0x5a, 0x7e, 0x0f, 0xd1, 0xb4, 0x1b, 0x75, 0x9f, 0x8e, 0xb8, 0x8e, 0x7d, 0xdb, 0x1d, 0x94,
	0x73, 0x9e, 0x82, 0x09, 0x7f, 0x67, 0xa4, 0x7b, 0x23, 0xcc, 0x3f, 0x7c, 0xa2, 0xa3, 0x28, 0x2f,
	0xe2, 0xa6, 0x90, 0xf0, 0x37, 0x01, 0xb6, 0xc2, 0xd5, 0xea, 0x2e, 0x14, 0x59, 0xc0, 0x58, 0xc7,
	0xd0, 0xf4, 0x13, 0x25, 0x76, 0xa0, 0xc6, 0xd0, 0xd2, 0xfd, 0xb1, 0xdb, 0x34, 0xd0, 0xe1, 0x25,
	0x3a, 0x18, 0x5d, 0x22, 0xb2, 0xca, 0x5d, 0x7b, 0xb4, 0xeb, 0xb0, 0xe9, 0x43, 0xb3, 0xca, 0xa5,
	0x13, 0x65, 0xe5, 0xeb, 0x7d, 0xd7, 0x18, 0x1a, 0x96, 0x6e, 0x3e, 0x12, 0xef, 0xf7, 0x10, 0xc7,
	0x83, 0xe3, 0xb8, 0xb6, 0xd3, 0x1d, 0x4c, 0x1f, 0x96, 0xc1, 0x91, 0x4f, 0x74, 0x10, 0xc5, 0x39,
	0xc6, 0x18, 0x63, 0xf3, 0x00, 0x26, 0xbd, 0x60, 0x11, 0x43, 0x73, 0xae, 0x78, 0xe7, 0x10, 0x8f,
	0x91, 0x89, 0xb0, 0xb4, 0x05, 0x53, 0xc1, 0x2e, 0xbd, 0x0d, 0xdd, 0xd5, 0xb7, 0xbd, 0xf2, 0xaa,
	0xf5, 0x38, 0xba, 0x4b, 0xe1, 0xfb, 0xc8, 0x69, 0x0d, 0x5e, 0x75, 0xe5, 0x12, 0x32, 0x7a, 0xb3,
	0x98, 0x11, 0x62, 0x91, 0x4f, 0x80, 0xa3, 0x33, 0x58, 0x92, 0x44, 0x1e, 0x27, 0x5a, 0xa6, 0x6c,
	0xa8, 0x1f, 0x63, 0xa9, 0xcd, 0x7e, 0x8f, 0x1c, 0x7e, 0x00, 0xa7, 0xfd, 0xd4, 0x77, 0x0f, 0x0d,
	0xcf, 0xc7, 0x61, 0xef, 0x1b, 0xc5, 0x84, 0x32, 0x16, 0x73, 0xed, 0xd0, 0x05, 0x24, 0x18, 0xf5,
	0xb0, 0x44, 0xc7, 0x2f, 0x08, 0xda, 0x4d, 0xa4, 0x9d, 0x45, 0xd5, 0x98, 0x00, 0xae, 0x62, 0xe6,
	0xca, 0x0e, 0xb1, 0xf9, 0x91, 0xe1, 0xf7, 0x47, 0xe5, 0xdb, 0xcd, 0x63, 0xe6, 0x24, 0x11, 0xb8,
	0xd5, 0x14, 0x4c, 0x18, 0xde, 0xfb, 0x0e, 0x93, 0x9d, 0xec, 0x48, 0x0f, 0x9f, 0xa8, 0x89, 0x35,
	0x89, 0x0f, 0x73, 0x12, 0xf8, 0x1e, 0xdb, 0xf1, 0x37, 0xf9, 0x46, 0x56, 0xbf, 0x79, 0x77, 0x21,
	0x67, 0x60, 0x72, 0x6c, 0x99, 0x76, 0xff, 0xe9, 0xba, 0xab, 0x8b, 0x1b, 0x73, 0xbc, 0x17, 0x2d,
	0xd0, 0x2e, 0xd6, 0xac, 0xa2, 0xdd, 0x90, 0x2c, 0x85, 0x63, 0x56, 0x6c, 0x1d, 0x1b, 0x61, 0x62,
	0x8d, 0x0e, 0xb0, 0x88, 0x44, 0xa6, 0x0c, 0x6b, 0xe8, 0x7d, 0xd9, 0x84, 0xb7, 0xb0, 0xf9, 0xa4,
	0x77, 0x41, 0xa2, 0x77, 0x01, 0xc6, 0xe1, 0x2a, 0x66, 0xdb, 0xb9, 0xaa, 0x49, 0x86, 0x0f, 0x63,
	0x31, 0x58, 0x38, 0x2e, 0x77, 0xfb, 0x3a, 0xdf, 0x86, 0x27, 0x5c, 0xf9, 0x41, 0x33, 0x4c, 0x8d,
	0x04, 0x00, 0x19, 0x75, 0xe1, 0xa8, 0x11, 0x2d, 0x23, 0xa5, 0x8b, 0xc5, 0x94, 0xd0, 0x06, 0xfe,
	0x0a, 0x88, 0x63, 0xe9, 0x32, 0x4e, 0x2a, 0x5d, 0xcb, 0x67, 0x6e, 0x9f, 0xcf, 0xe5, 0x8f, 0x76,
	0x36, 0x7d, 0xdd, 0x1f, 0x7b, 0xb1, 0x36, 0x8a, 0x35, 0x4c, 0x49, 0xd4, 0xb0, 0x8f, 0x71, 0x2e,
	0xcb, 0x43, 0x22, 0xcf, 0xc7, 0x40, 0x8c, 0xcc, 0xb7, 0xc2, 0xcc, 0x89, 0xb9, 0x2b, 0x25, 0x74,
	0xb3, 0x16, 0x73, 0xec, 0xcc, 0xfd, 0xf7, 0x32, 0x1c, 0x16, 0x0c, 0xc8, 0xa7, 0x0a, 0x9c, 0x4c,
	0x29, 0x06, 0xe4, 0x7a, 0xb1, 0xfd, 0x12, 0x59, 0x42, 0x5d, 0x6c, 0x0a, 0x93, 0xae, 0xd2, 0xa5,
	0x1f, 0xff, 0xed, 0xdf, 0x3f, 0x7b, 0xe5, 0x1a, 0x69, 0xb7, 0x03, 0x58, 0xf4, 0x01, 0xb5, 0x93,
	0xe0, 0x47, 0xbe, 0xe6, 0xea, 0x3e, 0x6b, 0x3f, 0x13, 0xc7, 0xbc, 0x47, 0x7e, 0xa5, 0xc0, 0xc9,
	0x94, 0xb8, 0x50, 0xc9, 0x3d, 0x5f, 0xab, 0xa8, 0xe4, 0x5e, 0xa0, 0x61, 0xd0, 0x79, 0xc1, 0xfd,
	0x6d, 0xf2, 0x56, 0x4d, 0xee, 0x9a, 0x6e, 0x9a, 0xe4, 0x2f, 0x0a, 0x90, 0xac, 0xac, 0x40, 0x96,
	0x6b, 0xc4, 0x2f, 0x57, 0xd3, 0x50, 0x57, 0xf6, 0x81, 0x44, 0x07, 0xd6, 0x84, 0x03, 0x37, 0xc9,
	0x4a, 0x89, 0x03, 0xae, 0xae, 0xe5, 0x1e, 0x40, 0xfb, 0x19, 0x73, 0xf5, 0x3d, 0xf2, 0x2f, 0x05,
	0x5e, 0x2f, 0x50, 0x1a, 0xc8, 0xed, 0xaa, 0xb8, 0x96, 0xea, 0x1b, 0xea, 0x9d, 0xfd, 0xc2, 0xd1,
	0xbb, 0x75, 0xe1, 0xdd, 0x3b, 0xe4, 0x76, 0x03, 0xef, 0x3c, 0x6d, 0x6b, 0x57, 0x13, 0x0e, 0x86,
	0x89, 0xf6, 0x27, 0x05, 0x48, 0x56, 0x8e, 0xa8, 0x3c, 0xb0, 0x42, 0xe5, 0xa3, 0xf2, 0xc0, 0x8a,
	0xb5, 0x0f, 0xfa, 0x8e, 0x70, 0x69, 0x85, 0x2c, 0x15, 0xbb, 0xb4, 0x25, 0xd0, 0x1a, 0x2f, 0xdf,
	0x39, 0xce, 0xfc, 0x5a, 0x81, 0xe3, 0x09, 0x6d, 0x83, 0xcc, 0x57, 0xa7, 0x4f, 0x46, 0x50, 0x51,
	0x17, 0x9a, 0x81, 0x90, 0xfd, 0xaa, 0x60, 0x7f, 0x83, 0x2c, 0x17, 0xb3, 0x1f, 0x32, 0x5f, 0x50,
	0xd7, 0xa4, 0x5a, 0x12, 0x25, 0x1b, 0x5f, 0xdc, 0x23, 0xbf, 0x54, 0xe0, 0x68, 0x4c, 0x07, 0x21,
	0xd7, 0xaa, 0x79, 0xa4, 0x44, 0x16, 0x75, 0xae, 0x09, 0xa4, 0x7e, 0x91, 0xe2, 0xc4, 0x45, 0x99,
	0xd5, 0x98, 0xab, 0x87, 0xe1, 0xfe, 0xbb, 0x02, 0x5f, 0xcd, 0x95, 0x53, 0xc8, 0xcd, 0x1a, 0x34,
	0x8a, 0xf4, 0x1b, 0xf5, 0xd6, 0xfe, 0xc0, 0xe8, 0x4d, 0x47, 0x78, 0x73, 0x8b, 0xdc, 0xa8, 0xf0,
	0x46, 0x5a, 0xe0, 0xfe, 0x68, 0x1e, 0xda, 0x08, 0x1d, 0xfb, 0xab, 0x02, 0x53, 0xf9, 0x0a, 0x0e,
	0xa9, 0x41, 0xae, 0x58, 0x1e, 0x52, 0x6f, 0xef, 0x13, 0x5d, 0xff, 0xa4, 0x1c, 0x84, 0x6b, 0x4f,
	0x18, 0xd3, 0x82, 0x89, 0x92, 0xbc, 0x50, 0x40, 0x2d, 0xd6, 0x83, 0xc8, 0x6a, 0x35, 0xad, 0x72,
	0x29, 0x4a, 0x5d, 0xfb, 0x3f, 0x2c, 0xd4, 0xbf, 0xfd, 0xfc, 0xe0, 0x3c, 0x69, 0x46, 0x73, 0x85,
	0x1d, 0x2d, 0x52, 0x65, 0xc8, 0x1f, 0x15, 0xf8, 0x4a, 0x46, 0x72, 0x22, 0x4b, 0xd5, 0xcc, 0x72,
	0xb5, 0x2d, 0x75, 0xb9, 0x39, 0x10, 0x3d, 0xb9, 0x23, 0x3c, 0x59, 0x26, 0x8b, 0xe5, 0x9e, 0xc8,
	0x39, 0x50, 0x73, 0x39, 0x9c, 0x1f, 0x57, 0x98, 0x7e, 0x7f, 0x50, 0xe0, 0xb5, 0x1c, 0x79, 0x8a,
	0xac, 0xd4, 0x65, 0x94, 0x3d, 0x9f, 0x1b, 0xfb, 0x81, 0x36, 0xab, 0x0f, 0xe8, 0x4e, 0xf6, 0x40,
	0x92, 0x5a, 0x57, 0x9d, 0x03, 0xc9, 0x15, 0xd5, 0xd4, 0xe5, 0xe6, 0xc0, 0x66, 0x07, 0xc2, 0x6b,
	0x01, 0x7a, 0x21, 0x84, 0xb7, 0xf0, 0x40, 0x7e, 0x2f, 0x27, 0xc9, 0xb8, 0xe2, 0x55, 0x67, 0x92,
	0xcc, 0x11, 0xeb, 0xea, 0x4c, 0x92, 0x79, 0xd2, 0x5c, 0xdd, 0xb2, 0x26, 0xc8, 0x07, 0x2a, 0x5c,
	0xba, 0xbf, 0xfc, 0x56, 0x81, 0x13, 0x49, 0x29, 0x8d, 0x2c, 0xd4, 0x8a, 0x69, 0xba, 0x42, 0x5f,
	0x6f, 0x88, 0x6a, 0xd6, 0x21, 0xf3, 0x4a, 0x32, 0xce, 0x63, 0xd8, 0x21, 0x43, 0xfa, 0x35, 0x3a,
	0x64, 0x9a, 0xfb, 0x5c, 0x13, 0x48, 0xb3, 0x1b, 0x10, 0x91, 0x96, 0x9a, 0xe2, 0x1e, 0x79, 0x2e,
	0x1b, 0x49, 0x8e, 0x48, 0x57, 0xa7, 0x91, 0x14, 0x2b, 0x85, 0x75, 0x1a, 0x49, 0x89, 0x32, 0x48,
	0xbb, 0xc2, 0xa1, 0xbb, 0x64, 0xad, 0xdc, 0x21, 0x21, 0x88, 0x68, 0x0c, 0x6d, 0x68, 0x52, 0x0e,
	0x4c, 0x1d, 0xc9, 0x6f, 0xe4, 0xcc, 0x15, 0x69, 0x71, 0x75, 0x66, 0xae, 0x8c, 0x8c, 0x58, 0x67,
	0xe6, 0xca, 0x0a, 0x86, 0x8d, 0x6e, 0x85, 0x2b, 0xa0, 0x11, 0x7b, 0xa9, 0x48, 0xee, 0x91, 0x9f,
	0x2b, 0x70, 0x2c, 0xae, 0xb8, 0x91, 0x3a, 0x19, 0x92, 0x12, 0x14, 0xd5, 0xf9, 0x46, 0x18, 0x64,
	0xdf, 0x16, 0xec, 0x2f, 0x93, 0x8b, 0x15, 0x69, 0x15, 0x32, 0xfb, 0x85, 0x02, 0x10, 0xc9, 0x70,
	0xe4, 0x6a, 0xf5, 0xa6, 0x49, 0x85, 0x4f, 0xbd, 0xd6, 0x00, 0x81, 0x24, 0x17, 0x05, 0xc9, 0xab,
	0xa4, 0x55, 0x4e, 0xd2, 0xd5, 0x1c, 0x81, 0x0b, 0x6b, 0xe6, 0xa7, 0x0a, 0x9c, 0x4a, 0x4b, 0x6c,
	0xa4, 0xaa, 0xfa, 0x15, 0xa8, 0x80, 0xea, 0x52, 0x63, 0x1c, 0xb2, 0x5f, 0x10, 0xec, 0x5b, 0xe4,
	0x4a, 0x31, 0x7b, 0x99, 0xe4, 0xf1, 0xb9, 0x89, 0xfc, 0x4e, 0x81, 0x53, 0x69, 0xe5, 0xae, 0x92,
	0x7b, 0x81, 0x40, 0x58, 0xc9, 0xbd, 0x48, 0x22, 0xa4, 0xb7, 0x04, 0xf7, 0x45, 0xb2, 0x50, 0xcc,
	0x3d, 0x9c, 0x1d, 0xc2, 0x51, 0x2f, 0x8c, 0xff, 0x27, 0x0a, 0x1c, 0x8b, 0xcb, 0x81, 0x95, 0x69,
	0x9d, 0xa3, 0x36, 0x56, 0xa6, 0x75, 0x9e, 0xde, 0x58, 0xa7, 0x5a, 0x62, 0x97, 0xf5, 0x04, 0x30,
	0xa4, 0xfc, 0x1f, 0x05, 0xa6, 0xf2, 0xe5, 0xc1, 0xca, 0x6a, 0x59, 0xaa, 0x61, 0x56, 0x56, 0xcb,
	0x72, 0x4d, 0x92, 0x7e, 0x47, 0x38, 0xb4, 0x41, 0xde, 0x2b, 0x19, 0xbb, 0xf9, 0xaf, 0x3a, 0xf4,
	0xca, 0x62, 0x3b, 0xbe, 0xe6, 0xa1, 0x91, 0x54, 0x0f, 0x6e, 0x3f, 0x0b, 0x05, 0xc6, 0x3d, 0xf2,
	0x67, 0x05, 0x4e, 0x24, 0xd5, 0xc5, 0xca, 0x7e, 0x9c, 0x2b, 0x79, 0x56, 0xf6, 0xe3, 0x7c, 0x09,
	0x93, 0x3e, 0x14, 0x7e, 0xdd, 0x27, 0xf7, 0x6a, 0xf9, 0xc5, 0xa1, 0x65, 0xde, 0xf0, 0xde, 0x1c,
	0x93, 0x25, 0x2b, 0x7b, 0x73, 0x56, 0xf3, 0xac, 0xec, 0xcd, 0x39, 0xaa, 0x67, 0x9d, 0x6c, 0x33,
	0xfa, 0xba, 0xfc, 0xd9, 0x6d, 0x1a, 0x9e, 0x9f, 0x50, 0x3e, 0xb2, 0x9a, 0x62, 0xa5, 0xf2, 0x51,
	0x28, 0x89, 0x56, 0x2a, 0x1f, 0xc5, 0x92, 0x68, 0x9d, 0xdf, 0x3e, 0x91, 0xd4, 0xa9, 0xf9, 0x3b,
	0xfc, 0x57, 0x90, 0x3f, 0xf6, 0xda, 0xcf, 0xa4, 0xea, 0xba, 0xd7, 0x59, 0xff, 0xec, 0xc5, 0x8c,
	0xf2, 0xf9, 0x8b, 0x19, 0xe5, 0xf9, 0x8b, 0x19, 0xe5, 0xa7, 0x2f, 0x67, 0x0e, 0x7c, 0xfe, 0x72,
	0xe6, 0xc0, 0x3f, 0x5e, 0xce, 0x1c, 0xf8, 0xde, 0x5b, 0xb1, 0x7f, 0xf6, 0x65, 0x8d, 0xef, 0x84,
	0x55, 0x70, 0xd7, 0x61, 0xde, 0xd6, 0x84, 0x28, 0x83, 0xf3, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0xde, 0x3a, 0xf8, 0x63, 0x1d, 0x26, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a list of getExchangeRate items.
	GetExchangeRate(ctx context.Context, in *QueryGetExchangeRateRequest, opts ...grpc.CallOption) (*QueryGetExchangeRateResponse, error)
	// Queries a list of exchangeRateAll items.
	ExchangeRateAll(ctx context.Context, in *QueryExchangeRateAllRequest, opts ...grpc.CallOption) (*QueryExchangeRateAllResponse, error)
	// Queries a list of getEraExchangeRate items.
	GetEraExchangeRate(ctx context.Context, in *QueryGetEraExchangeRateRequest, opts ...grpc.CallOption) (*QueryGetEraExchangeRateResponse, error)
	// Queries a list of eraExchangeRatesByDenom items.
	EraExchangeRatesByDenom(ctx context.Context, in *QueryEraExchangeRatesByDenomRequest, opts ...grpc.CallOption) (*QueryEraExchangeRatesByDenomResponse, error)
	// Queries a list of bondedPoolsByDenom items.
	BondedPoolsByDenom(ctx context.Context, in *QueryBondedPoolsByDenomRequest, opts ...grpc.CallOption) (*QueryBondedPoolsByDenomResponse, error)
	// Queries a list of getPoolDetail items.
	GetPoolDetail(ctx context.Context, in *QueryGetPoolDetailRequest, opts ...grpc.CallOption) (*QueryGetPoolDetailResponse, error)
	// Queries a list of getChainEra items.
	GetChainEra(ctx context.Context, in *QueryGetChainEraRequest, opts ...grpc.CallOption) (*QueryGetChainEraResponse, error)
	// Queries a list of getCurrentEraSnapshot items.
	GetCurrentEraSnapshot(ctx context.Context, in *QueryGetCurrentEraSnapshotRequest, opts ...grpc.CallOption) (*QueryGetCurrentEraSnapshotResponse, error)
	// Queries a list of getReceiver items.
	GetProtocolFeeReceiver(ctx context.Context, in *QueryGetProtocolFeeReceiverRequest, opts ...grpc.CallOption) (*QueryGetProtocolFeeReceiverResponse, error)
	// Queries a list of getCommission items.
	GetStakingRewardCommission(ctx context.Context, in *QueryGetStakingRewardCommissionRequest, opts ...grpc.CallOption) (*QueryGetStakingRewardCommissionResponse, error)
	// Queries a list of getUnbondFee items.
	GetUnbondRelayFee(ctx context.Context, in *QueryGetUnbondRelayFeeRequest, opts ...grpc.CallOption) (*QueryGetUnbondRelayFeeResponse, error)
	// Queries a list of getUnbondCommission items.
	GetUnbondCommission(ctx context.Context, in *QueryGetUnbondCommissionRequest, opts ...grpc.CallOption) (*QueryGetUnbondCommissionResponse, error)
	// Queries a list of getEraUnbondLimit items.
	GetEraUnbondLimit(ctx context.Context, in *QueryGetEraUnbondLimitRequest, opts ...grpc.CallOption) (*QueryGetEraUnbondLimitResponse, error)
	// Queries a list of getBondPipeline items.
	GetBondPipeline(ctx context.Context, in *QueryGetBondPipelineRequest, opts ...grpc.CallOption) (*QueryGetBondPipelineResponse, error)
	// Queries a list of getEraSnapshot items.
	GetEraSnapshot(ctx context.Context, in *QueryGetEraSnapshotRequest, opts ...grpc.CallOption) (*QueryGetEraSnapshotResponse, error)
	// Queries a list of getSnapshot items.
	GetSnapshot(ctx context.Context, in *QueryGetSnapshotRequest, opts ...grpc.CallOption) (*QueryGetSnapshotResponse, error)
	// Queries a list of getTotalExpectedActive items.
	GetTotalExpectedActive(ctx context.Context, in *QueryGetTotalExpectedActiveRequest, opts ...grpc.CallOption) (*QueryGetTotalExpectedActiveResponse, error)
	// Queries a list of getBondRecord items.
	GetBondRecord(ctx context.Context, in *QueryGetBondRecordRequest, opts ...grpc.CallOption) (*QueryGetBondRecordResponse, error)
	// Queries a list of getSignature items.
	GetSignature(ctx context.Context, in *QueryGetSignatureRequest, opts ...grpc.CallOption) (*QueryGetSignatureResponse, error)
	// Queries a list of GetRParams items.
	GetRParams(ctx context.Context, in *QueryGetRParamsRequest, opts ...grpc.CallOption) (*QueryGetRParamsResponse, error)
	// Queries a list of TotalFeeList items.
	TotalProtocolFee(ctx context.Context, in *QueryTotalProtocolFeeRequest, opts ...grpc.CallOption) (*QueryTotalProtocolFeeResponse, error)
	// Queries a list of RelayFeeReceiver items.
	RelayFeeReceiver(ctx context.Context, in *QueryRelayFeeReceiverRequest, opts ...grpc.CallOption) (*QueryRelayFeeReceiverResponse, error)
	// Queries a list of UnbondSwitch items.
	UnbondSwitch(ctx context.Context, in *QueryUnbondSwitchRequest, opts ...grpc.CallOption) (*QueryUnbondSwitchResponse, error)
	// Queries a list of PoolUnbondNextSequence items.
	PoolUnbondNextSequence(ctx context.Context, in *QueryPoolUnbondNextSequenceRequest, opts ...grpc.CallOption) (*QueryPoolUnbondNextSequenceResponse, error)
	// Queries a list of PoolUnbondings items.
	PoolUnbondings(ctx context.Context, in *QueryPoolUnbondingsRequest, opts ...grpc.CallOption) (*QueryPoolUnbondingsResponse, error)
	// Queries a list of IcaPoolList items.
	IcaPoolList(ctx context.Context, in *QueryIcaPoolListRequest, opts ...grpc.CallOption) (*QueryIcaPoolListResponse, error)
	// Queries a list of InterchainTxStatus items.
	InterchainTxStatus(ctx context.Context, in *QueryInterchainTxStatusRequest, opts ...grpc.CallOption) (*QueryInterchainTxStatusResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetExchangeRate(ctx context.Context, in *QueryGetExchangeRateRequest, opts ...grpc.CallOption) (*QueryGetExchangeRateResponse, error) {
	out := new(QueryGetExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExchangeRateAll(ctx context.Context, in *QueryExchangeRateAllRequest, opts ...grpc.CallOption) (*QueryExchangeRateAllResponse, error) {
	out := new(QueryExchangeRateAllResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/ExchangeRateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEraExchangeRate(ctx context.Context, in *QueryGetEraExchangeRateRequest, opts ...grpc.CallOption) (*QueryGetEraExchangeRateResponse, error) {
	out := new(QueryGetEraExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetEraExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EraExchangeRatesByDenom(ctx context.Context, in *QueryEraExchangeRatesByDenomRequest, opts ...grpc.CallOption) (*QueryEraExchangeRatesByDenomResponse, error) {
	out := new(QueryEraExchangeRatesByDenomResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/EraExchangeRatesByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BondedPoolsByDenom(ctx context.Context, in *QueryBondedPoolsByDenomRequest, opts ...grpc.CallOption) (*QueryBondedPoolsByDenomResponse, error) {
	out := new(QueryBondedPoolsByDenomResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/BondedPoolsByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPoolDetail(ctx context.Context, in *QueryGetPoolDetailRequest, opts ...grpc.CallOption) (*QueryGetPoolDetailResponse, error) {
	out := new(QueryGetPoolDetailResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetPoolDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetChainEra(ctx context.Context, in *QueryGetChainEraRequest, opts ...grpc.CallOption) (*QueryGetChainEraResponse, error) {
	out := new(QueryGetChainEraResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetChainEra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentEraSnapshot(ctx context.Context, in *QueryGetCurrentEraSnapshotRequest, opts ...grpc.CallOption) (*QueryGetCurrentEraSnapshotResponse, error) {
	out := new(QueryGetCurrentEraSnapshotResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetCurrentEraSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtocolFeeReceiver(ctx context.Context, in *QueryGetProtocolFeeReceiverRequest, opts ...grpc.CallOption) (*QueryGetProtocolFeeReceiverResponse, error) {
	out := new(QueryGetProtocolFeeReceiverResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetProtocolFeeReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakingRewardCommission(ctx context.Context, in *QueryGetStakingRewardCommissionRequest, opts ...grpc.CallOption) (*QueryGetStakingRewardCommissionResponse, error) {
	out := new(QueryGetStakingRewardCommissionResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetStakingRewardCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUnbondRelayFee(ctx context.Context, in *QueryGetUnbondRelayFeeRequest, opts ...grpc.CallOption) (*QueryGetUnbondRelayFeeResponse, error) {
	out := new(QueryGetUnbondRelayFeeResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetUnbondRelayFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUnbondCommission(ctx context.Context, in *QueryGetUnbondCommissionRequest, opts ...grpc.CallOption) (*QueryGetUnbondCommissionResponse, error) {
	out := new(QueryGetUnbondCommissionResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetUnbondCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEraUnbondLimit(ctx context.Context, in *QueryGetEraUnbondLimitRequest, opts ...grpc.CallOption) (*QueryGetEraUnbondLimitResponse, error) {
	out := new(QueryGetEraUnbondLimitResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetEraUnbondLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBondPipeline(ctx context.Context, in *QueryGetBondPipelineRequest, opts ...grpc.CallOption) (*QueryGetBondPipelineResponse, error) {
	out := new(QueryGetBondPipelineResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetBondPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEraSnapshot(ctx context.Context, in *QueryGetEraSnapshotRequest, opts ...grpc.CallOption) (*QueryGetEraSnapshotResponse, error) {
	out := new(QueryGetEraSnapshotResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetEraSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSnapshot(ctx context.Context, in *QueryGetSnapshotRequest, opts ...grpc.CallOption) (*QueryGetSnapshotResponse, error) {
	out := new(QueryGetSnapshotResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTotalExpectedActive(ctx context.Context, in *QueryGetTotalExpectedActiveRequest, opts ...grpc.CallOption) (*QueryGetTotalExpectedActiveResponse, error) {
	out := new(QueryGetTotalExpectedActiveResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetTotalExpectedActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBondRecord(ctx context.Context, in *QueryGetBondRecordRequest, opts ...grpc.CallOption) (*QueryGetBondRecordResponse, error) {
	out := new(QueryGetBondRecordResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetBondRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSignature(ctx context.Context, in *QueryGetSignatureRequest, opts ...grpc.CallOption) (*QueryGetSignatureResponse, error) {
	out := new(QueryGetSignatureResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRParams(ctx context.Context, in *QueryGetRParamsRequest, opts ...grpc.CallOption) (*QueryGetRParamsResponse, error) {
	out := new(QueryGetRParamsResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/GetRParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalProtocolFee(ctx context.Context, in *QueryTotalProtocolFeeRequest, opts ...grpc.CallOption) (*QueryTotalProtocolFeeResponse, error) {
	out := new(QueryTotalProtocolFeeResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/TotalProtocolFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RelayFeeReceiver(ctx context.Context, in *QueryRelayFeeReceiverRequest, opts ...grpc.CallOption) (*QueryRelayFeeReceiverResponse, error) {
	out := new(QueryRelayFeeReceiverResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/RelayFeeReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnbondSwitch(ctx context.Context, in *QueryUnbondSwitchRequest, opts ...grpc.CallOption) (*QueryUnbondSwitchResponse, error) {
	out := new(QueryUnbondSwitchResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/UnbondSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolUnbondNextSequence(ctx context.Context, in *QueryPoolUnbondNextSequenceRequest, opts ...grpc.CallOption) (*QueryPoolUnbondNextSequenceResponse, error) {
	out := new(QueryPoolUnbondNextSequenceResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/PoolUnbondNextSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolUnbondings(ctx context.Context, in *QueryPoolUnbondingsRequest, opts ...grpc.CallOption) (*QueryPoolUnbondingsResponse, error) {
	out := new(QueryPoolUnbondingsResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/PoolUnbondings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IcaPoolList(ctx context.Context, in *QueryIcaPoolListRequest, opts ...grpc.CallOption) (*QueryIcaPoolListResponse, error) {
	out := new(QueryIcaPoolListResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/IcaPoolList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InterchainTxStatus(ctx context.Context, in *QueryInterchainTxStatusRequest, opts ...grpc.CallOption) (*QueryInterchainTxStatusResponse, error) {
	out := new(QueryInterchainTxStatusResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.ledger.Query/InterchainTxStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a list of getExchangeRate items.
	GetExchangeRate(context.Context, *QueryGetExchangeRateRequest) (*QueryGetExchangeRateResponse, error)
	// Queries a list of exchangeRateAll items.
	ExchangeRateAll(context.Context, *QueryExchangeRateAllRequest) (*QueryExchangeRateAllResponse, error)
	// Queries a list of getEraExchangeRate items.
	GetEraExchangeRate(context.Context, *QueryGetEraExchangeRateRequest) (*QueryGetEraExchangeRateResponse, error)
	// Queries a list of eraExchangeRatesByDenom items.
	EraExchangeRatesByDenom(context.Context, *QueryEraExchangeRatesByDenomRequest) (*QueryEraExchangeRatesByDenomResponse, error)
	// Queries a list of bondedPoolsByDenom items.
	BondedPoolsByDenom(context.Context, *QueryBondedPoolsByDenomRequest) (*QueryBondedPoolsByDenomResponse, error)
	// Queries a list of getPoolDetail items.
	GetPoolDetail(context.Context, *QueryGetPoolDetailRequest) (*QueryGetPoolDetailResponse, error)
	// Queries a list of getChainEra items.
	GetChainEra(context.Context, *QueryGetChainEraRequest) (*QueryGetChainEraResponse, error)
	// Queries a list of getCurrentEraSnapshot items.
	GetCurrentEraSnapshot(context.Context, *QueryGetCurrentEraSnapshotRequest) (*QueryGetCurrentEraSnapshotResponse, error)
	// Queries a list of getReceiver items.
	GetProtocolFeeReceiver(context.Context, *QueryGetProtocolFeeReceiverRequest) (*QueryGetProtocolFeeReceiverResponse, error)
	// Queries a list of getCommission items.
	GetStakingRewardCommission(context.Context, *QueryGetStakingRewardCommissionRequest) (*QueryGetStakingRewardCommissionResponse, error)
	// Queries a list of getUnbondFee items.
	GetUnbondRelayFee(context.Context, *QueryGetUnbondRelayFeeRequest) (*QueryGetUnbondRelayFeeResponse, error)
	// Queries a list of getUnbondCommission items.
	GetUnbondCommission(context.Context, *QueryGetUnbondCommissionRequest) (*QueryGetUnbondCommissionResponse, error)
	// Queries a list of getEraUnbondLimit items.
	GetEraUnbondLimit(context.Context, *QueryGetEraUnbondLimitRequest) (*QueryGetEraUnbondLimitResponse, error)
	// Queries a list of getBondPipeline items.
	GetBondPipeline(context.Context, *QueryGetBondPipelineRequest) (*QueryGetBondPipelineResponse, error)
	// Queries a list of getEraSnapshot items.
	GetEraSnapshot(context.Context, *QueryGetEraSnapshotRequest) (*QueryGetEraSnapshotResponse, error)
	// Queries a list of getSnapshot items.
	GetSnapshot(context.Context, *QueryGetSnapshotRequest) (*QueryGetSnapshotResponse, error)
	// Queries a list of getTotalExpectedActive items.
	GetTotalExpectedActive(context.Context, *QueryGetTotalExpectedActiveRequest) (*QueryGetTotalExpectedActiveResponse, error)
	// Queries a list of getBondRecord items.
	GetBondRecord(context.Context, *QueryGetBondRecordRequest) (*QueryGetBondRecordResponse, error)
	// Queries a list of getSignature items.
	GetSignature(context.Context, *QueryGetSignatureRequest) (*QueryGetSignatureResponse, error)
	// Queries a list of GetRParams items.
	GetRParams(context.Context, *QueryGetRParamsRequest) (*QueryGetRParamsResponse, error)
	// Queries a list of TotalFeeList items.
	TotalProtocolFee(context.Context, *QueryTotalProtocolFeeRequest) (*QueryTotalProtocolFeeResponse, error)
	// Queries a list of RelayFeeReceiver items.
	RelayFeeReceiver(context.Context, *QueryRelayFeeReceiverRequest) (*QueryRelayFeeReceiverResponse, error)
	// Queries a list of UnbondSwitch items.
	UnbondSwitch(context.Context, *QueryUnbondSwitchRequest) (*QueryUnbondSwitchResponse, error)
	// Queries a list of PoolUnbondNextSequence items.
	PoolUnbondNextSequence(context.Context, *QueryPoolUnbondNextSequenceRequest) (*QueryPoolUnbondNextSequenceResponse, error)
	// Queries a list of PoolUnbondings items.
	PoolUnbondings(context.Context, *QueryPoolUnbondingsRequest) (*QueryPoolUnbondingsResponse, error)
	// Queries a list of IcaPoolList items.
	IcaPoolList(context.Context, *QueryIcaPoolListRequest) (*QueryIcaPoolListResponse, error)
	// Queries a list of InterchainTxStatus items.
	InterchainTxStatus(context.Context, *QueryInterchainTxStatusRequest) (*QueryInterchainTxStatusResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetExchangeRate(ctx context.Context, req *QueryGetExchangeRateRequest) (*QueryGetExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRate not implemented")
}
func (*UnimplementedQueryServer) ExchangeRateAll(ctx context.Context, req *QueryExchangeRateAllRequest) (*QueryExchangeRateAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRateAll not implemented")
}
func (*UnimplementedQueryServer) GetEraExchangeRate(ctx context.Context, req *QueryGetEraExchangeRateRequest) (*QueryGetEraExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEraExchangeRate not implemented")
}
func (*UnimplementedQueryServer) EraExchangeRatesByDenom(ctx context.Context, req *QueryEraExchangeRatesByDenomRequest) (*QueryEraExchangeRatesByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraExchangeRatesByDenom not implemented")
}
func (*UnimplementedQueryServer) BondedPoolsByDenom(ctx context.Context, req *QueryBondedPoolsByDenomRequest) (*QueryBondedPoolsByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BondedPoolsByDenom not implemented")
}
func (*UnimplementedQueryServer) GetPoolDetail(ctx context.Context, req *QueryGetPoolDetailRequest) (*QueryGetPoolDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolDetail not implemented")
}
func (*UnimplementedQueryServer) GetChainEra(ctx context.Context, req *QueryGetChainEraRequest) (*QueryGetChainEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainEra not implemented")
}
func (*UnimplementedQueryServer) GetCurrentEraSnapshot(ctx context.Context, req *QueryGetCurrentEraSnapshotRequest) (*QueryGetCurrentEraSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentEraSnapshot not implemented")
}
func (*UnimplementedQueryServer) GetProtocolFeeReceiver(ctx context.Context, req *QueryGetProtocolFeeReceiverRequest) (*QueryGetProtocolFeeReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtocolFeeReceiver not implemented")
}
func (*UnimplementedQueryServer) GetStakingRewardCommission(ctx context.Context, req *QueryGetStakingRewardCommissionRequest) (*QueryGetStakingRewardCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakingRewardCommission not implemented")
}
func (*UnimplementedQueryServer) GetUnbondRelayFee(ctx context.Context, req *QueryGetUnbondRelayFeeRequest) (*QueryGetUnbondRelayFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnbondRelayFee not implemented")
}
func (*UnimplementedQueryServer) GetUnbondCommission(ctx context.Context, req *QueryGetUnbondCommissionRequest) (*QueryGetUnbondCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnbondCommission not implemented")
}
func (*UnimplementedQueryServer) GetEraUnbondLimit(ctx context.Context, req *QueryGetEraUnbondLimitRequest) (*QueryGetEraUnbondLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEraUnbondLimit not implemented")
}
func (*UnimplementedQueryServer) GetBondPipeline(ctx context.Context, req *QueryGetBondPipelineRequest) (*QueryGetBondPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBondPipeline not implemented")
}
func (*UnimplementedQueryServer) GetEraSnapshot(ctx context.Context, req *QueryGetEraSnapshotRequest) (*QueryGetEraSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEraSnapshot not implemented")
}
func (*UnimplementedQueryServer) GetSnapshot(ctx context.Context, req *QueryGetSnapshotRequest) (*QueryGetSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshot not implemented")
}
func (*UnimplementedQueryServer) GetTotalExpectedActive(ctx context.Context, req *QueryGetTotalExpectedActiveRequest) (*QueryGetTotalExpectedActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalExpectedActive not implemented")
}
func (*UnimplementedQueryServer) GetBondRecord(ctx context.Context, req *QueryGetBondRecordRequest) (*QueryGetBondRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBondRecord not implemented")
}
func (*UnimplementedQueryServer) GetSignature(ctx context.Context, req *QueryGetSignatureRequest) (*QueryGetSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignature not implemented")
}
func (*UnimplementedQueryServer) GetRParams(ctx context.Context, req *QueryGetRParamsRequest) (*QueryGetRParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRParams not implemented")
}
func (*UnimplementedQueryServer) TotalProtocolFee(ctx context.Context, req *QueryTotalProtocolFeeRequest) (*QueryTotalProtocolFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalProtocolFee not implemented")
}
func (*UnimplementedQueryServer) RelayFeeReceiver(ctx context.Context, req *QueryRelayFeeReceiverRequest) (*QueryRelayFeeReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayFeeReceiver not implemented")
}
func (*UnimplementedQueryServer) UnbondSwitch(ctx context.Context, req *QueryUnbondSwitchRequest) (*QueryUnbondSwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbondSwitch not implemented")
}
func (*UnimplementedQueryServer) PoolUnbondNextSequence(ctx context.Context, req *QueryPoolUnbondNextSequenceRequest) (*QueryPoolUnbondNextSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolUnbondNextSequence not implemented")
}
func (*UnimplementedQueryServer) PoolUnbondings(ctx context.Context, req *QueryPoolUnbondingsRequest) (*QueryPoolUnbondingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolUnbondings not implemented")
}
func (*UnimplementedQueryServer) IcaPoolList(ctx context.Context, req *QueryIcaPoolListRequest) (*QueryIcaPoolListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IcaPoolList not implemented")
}
func (*UnimplementedQueryServer) InterchainTxStatus(ctx context.Context, req *QueryInterchainTxStatusRequest) (*QueryInterchainTxStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterchainTxStatus not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetExchangeRate(ctx, req.(*QueryGetExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExchangeRateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeRateAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeRateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/ExchangeRateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeRateAll(ctx, req.(*QueryExchangeRateAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEraExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEraExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEraExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetEraExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEraExchangeRate(ctx, req.(*QueryGetEraExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EraExchangeRatesByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEraExchangeRatesByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EraExchangeRatesByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/EraExchangeRatesByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EraExchangeRatesByDenom(ctx, req.(*QueryEraExchangeRatesByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BondedPoolsByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBondedPoolsByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BondedPoolsByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/BondedPoolsByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BondedPoolsByDenom(ctx, req.(*QueryBondedPoolsByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPoolDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPoolDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetPoolDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPoolDetail(ctx, req.(*QueryGetPoolDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetChainEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetChainEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetChainEra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetChainEra(ctx, req.(*QueryGetChainEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentEraSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentEraSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentEraSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetCurrentEraSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentEraSnapshot(ctx, req.(*QueryGetCurrentEraSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtocolFeeReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtocolFeeReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtocolFeeReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetProtocolFeeReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtocolFeeReceiver(ctx, req.(*QueryGetProtocolFeeReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakingRewardCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStakingRewardCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakingRewardCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetStakingRewardCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakingRewardCommission(ctx, req.(*QueryGetStakingRewardCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUnbondRelayFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUnbondRelayFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUnbondRelayFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetUnbondRelayFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUnbondRelayFee(ctx, req.(*QueryGetUnbondRelayFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUnbondCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUnbondCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUnbondCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetUnbondCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUnbondCommission(ctx, req.(*QueryGetUnbondCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEraUnbondLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEraUnbondLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEraUnbondLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetEraUnbondLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEraUnbondLimit(ctx, req.(*QueryGetEraUnbondLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBondPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBondPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBondPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetBondPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBondPipeline(ctx, req.(*QueryGetBondPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEraSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEraSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEraSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetEraSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEraSnapshot(ctx, req.(*QueryGetEraSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSnapshot(ctx, req.(*QueryGetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTotalExpectedActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTotalExpectedActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTotalExpectedActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetTotalExpectedActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTotalExpectedActive(ctx, req.(*QueryGetTotalExpectedActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBondRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBondRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBondRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetBondRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBondRecord(ctx, req.(*QueryGetBondRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSignature(ctx, req.(*QueryGetSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/GetRParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRParams(ctx, req.(*QueryGetRParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalProtocolFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalProtocolFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalProtocolFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/TotalProtocolFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalProtocolFee(ctx, req.(*QueryTotalProtocolFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RelayFeeReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRelayFeeReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RelayFeeReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/RelayFeeReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RelayFeeReceiver(ctx, req.(*QueryRelayFeeReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnbondSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnbondSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnbondSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/UnbondSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnbondSwitch(ctx, req.(*QueryUnbondSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolUnbondNextSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolUnbondNextSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolUnbondNextSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/PoolUnbondNextSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolUnbondNextSequence(ctx, req.(*QueryPoolUnbondNextSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolUnbondings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolUnbondingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolUnbondings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/PoolUnbondings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolUnbondings(ctx, req.(*QueryPoolUnbondingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IcaPoolList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIcaPoolListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IcaPoolList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/IcaPoolList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IcaPoolList(ctx, req.(*QueryIcaPoolListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InterchainTxStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInterchainTxStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InterchainTxStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.ledger.Query/InterchainTxStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InterchainTxStatus(ctx, req.(*QueryInterchainTxStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stafihub.stafihub.ledger.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExchangeRate",
			Handler:    _Query_GetExchangeRate_Handler,
		},
		{
			MethodName: "ExchangeRateAll",
			Handler:    _Query_ExchangeRateAll_Handler,
		},
		{
			MethodName: "GetEraExchangeRate",
			Handler:    _Query_GetEraExchangeRate_Handler,
		},
		{
			MethodName: "EraExchangeRatesByDenom",
			Handler:    _Query_EraExchangeRatesByDenom_Handler,
		},
		{
			MethodName: "BondedPoolsByDenom",
			Handler:    _Query_BondedPoolsByDenom_Handler,
		},
		{
			MethodName: "GetPoolDetail",
			Handler:    _Query_GetPoolDetail_Handler,
		},
		{
			MethodName: "GetChainEra",
			Handler:    _Query_GetChainEra_Handler,
		},
		{
			MethodName: "GetCurrentEraSnapshot",
			Handler:    _Query_GetCurrentEraSnapshot_Handler,
		},
		{
			MethodName: "GetProtocolFeeReceiver",
			Handler:    _Query_GetProtocolFeeReceiver_Handler,
		},
		{
			MethodName: "GetStakingRewardCommission",
			Handler:    _Query_GetStakingRewardCommission_Handler,
		},
		{
			MethodName: "GetUnbondRelayFee",
			Handler:    _Query_GetUnbondRelayFee_Handler,
		},
		{
			MethodName: "GetUnbondCommission",
			Handler:    _Query_GetUnbondCommission_Handler,
		},
		{
			MethodName: "GetEraUnbondLimit",
			Handler:    _Query_GetEraUnbondLimit_Handler,
		},
		{
			MethodName: "GetBondPipeline",
			Handler:    _Query_GetBondPipeline_Handler,
		},
		{
			MethodName: "GetEraSnapshot",
			Handler:    _Query_GetEraSnapshot_Handler,
		},
		{
			MethodName: "GetSnapshot",
			Handler:    _Query_GetSnapshot_Handler,
		},
		{
			MethodName: "GetTotalExpectedActive",
			Handler:    _Query_GetTotalExpectedActive_Handler,
		},
		{
			MethodName: "GetBondRecord",
			Handler:    _Query_GetBondRecord_Handler,
		},
		{
			MethodName: "GetSignature",
			Handler:    _Query_GetSignature_Handler,
		},
		{
			MethodName: "GetRParams",
			Handler:    _Query_GetRParams_Handler,
		},
		{
			MethodName: "TotalProtocolFee",
			Handler:    _Query_TotalProtocolFee_Handler,
		},
		{
			MethodName: "RelayFeeReceiver",
			Handler:    _Query_RelayFeeReceiver_Handler,
		},
		{
			MethodName: "UnbondSwitch",
			Handler:    _Query_UnbondSwitch_Handler,
		},
		{
			MethodName: "PoolUnbondNextSequence",
			Handler:    _Query_PoolUnbondNextSequence_Handler,
		},
		{
			MethodName: "PoolUnbondings",
			Handler:    _Query_PoolUnbondings_Handler,
		},
		{
			MethodName: "IcaPoolList",
			Handler:    _Query_IcaPoolList_Handler,
		},
		{
			MethodName: "InterchainTxStatus",
			Handler:    _Query_InterchainTxStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ledger/query.proto",
}

func (m *QueryGetExchangeRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExchangeRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExchangeRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExchangeRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryExchangeRateAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRateAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRateAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryExchangeRateAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRateAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRateAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExchangeRates) > 0 {
		for iNdEx := len(m.ExchangeRates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExchangeRates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEraExchangeRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraExchangeRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraExchangeRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEraExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EraExchangeRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEraExchangeRatesByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEraExchangeRatesByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEraExchangeRatesByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEraExchangeRatesByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEraExchangeRatesByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEraExchangeRatesByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EraExchangeRates) > 0 {
		for iNdEx := len(m.EraExchangeRates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EraExchangeRates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBondedPoolsByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBondedPoolsByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBondedPoolsByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBondedPoolsByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBondedPoolsByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBondedPoolsByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Detail.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetChainEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEraSnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEraSnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEraSnapshotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEraSnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEraSnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEraSnapshotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShotIds) > 0 {
		for iNdEx := len(m.ShotIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShotIds[iNdEx])
			copy(dAtA[i:], m.ShotIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ShotIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtocolFeeReceiverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtocolFeeReceiverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtocolFeeReceiverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtocolFeeReceiverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtocolFeeReceiverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtocolFeeReceiverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStakingRewardCommissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakingRewardCommissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakingRewardCommissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStakingRewardCommissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakingRewardCommissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakingRewardCommissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commission) > 0 {
		i -= len(m.Commission)
		copy(dAtA[i:], m.Commission)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Commission)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUnbondRelayFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnbondRelayFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnbondRelayFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUnbondRelayFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnbondRelayFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnbondRelayFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetUnbondCommissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnbondCommissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnbondCommissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUnbondCommissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnbondCommissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnbondCommissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commission) > 0 {
		i -= len(m.Commission)
		copy(dAtA[i:], m.Commission)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Commission)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEraUnbondLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraUnbondLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraUnbondLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEraUnbondLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraUnbondLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraUnbondLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBondPipelineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBondPipelineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBondPipelineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBondPipelineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBondPipelineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBondPipelineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pipeline.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetEraSnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraSnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraSnapshotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEraSnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraSnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraSnapshotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShotIds) > 0 {
		for iNdEx := len(m.ShotIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShotIds[iNdEx])
			copy(dAtA[i:], m.ShotIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ShotIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSnapshotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShotId) > 0 {
		i -= len(m.ShotId)
		copy(dAtA[i:], m.ShotId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ShotId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSnapshotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Shot.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTotalExpectedActiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTotalExpectedActiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTotalExpectedActiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTotalExpectedActiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTotalExpectedActiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTotalExpectedActiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Active.Size()
		i -= size
		if _, err := m.Active.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetBondRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBondRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBondRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txhash) > 0 {
		i -= len(m.Txhash)
		copy(dAtA[i:], m.Txhash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Txhash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBondRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBondRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBondRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BondRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSignatureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignatureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignatureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TxType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalProtocolFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalProtocolFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalProtocolFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalProtocolFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalProtocolFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalProtocolFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalProtocolFeeList) > 0 {
		for iNdEx := len(m.TotalProtocolFeeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalProtocolFeeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRelayFeeReceiverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRelayFeeReceiverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRelayFeeReceiverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRelayFeeReceiverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRelayFeeReceiverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRelayFeeReceiverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnbondSwitchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnbondSwitchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnbondSwitchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnbondSwitchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnbondSwitchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnbondSwitchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsOpen {
		i--
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolUnbondNextSequenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolUnbondNextSequenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolUnbondNextSequenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnlockEra != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UnlockEra))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolUnbondNextSequenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolUnbondNextSequenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolUnbondNextSequenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextSequence != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NextSequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolUnbondingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolUnbondingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolUnbondingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnlockEra != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UnlockEra))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolUnbondingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolUnbondingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolUnbondingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unbondings) > 0 {
		for iNdEx := len(m.Unbondings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unbondings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIcaPoolListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIcaPoolListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIcaPoolListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIcaPoolListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIcaPoolListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIcaPoolListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IcaPoolList) > 0 {
		for iNdEx := len(m.IcaPoolList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IcaPoolList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInterchainTxStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInterchainTxStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInterchainTxStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInterchainTxStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInterchainTxStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInterchainTxStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InterchainTxStatus != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.InterchainTxStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetExchangeRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExchangeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryExchangeRateAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryExchangeRateAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExchangeRates) > 0 {
		for _, e := range m.ExchangeRates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetEraExchangeRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	return n
}

func (m *QueryGetEraExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EraExchangeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEraExchangeRatesByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEraExchangeRatesByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EraExchangeRates) > 0 {
		for _, e := range m.EraExchangeRates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBondedPoolsByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBondedPoolsByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetPoolDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Detail.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetChainEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	return n
}

func (m *QueryGetCurrentEraSnapshotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCurrentEraSnapshotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ShotIds) > 0 {
		for _, s := range m.ShotIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetProtocolFeeReceiverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtocolFeeReceiverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStakingRewardCommissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStakingRewardCommissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commission)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUnbondRelayFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUnbondRelayFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Fee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetUnbondCommissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUnbondCommissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commission)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEraUnbondLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEraUnbondLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QueryGetBondPipelineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBondPipelineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pipeline.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetEraSnapshotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	return n
}

func (m *QueryGetEraSnapshotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ShotIds) > 0 {
		for _, s := range m.ShotIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetSnapshotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShotId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSnapshotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Shot.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTotalExpectedActiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	return n
}

func (m *QueryGetTotalExpectedActiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Active.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetBondRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Txhash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBondRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BondRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSignatureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TxType != 0 {
		n += 1 + sovQuery(uint64(m.TxType))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Signature.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalProtocolFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalProtocolFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TotalProtocolFeeList) > 0 {
		for _, e := range m.TotalProtocolFeeList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRelayFeeReceiverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRelayFeeReceiverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnbondSwitchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnbondSwitchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsOpen {
		n += 2
	}
	return n
}

func (m *QueryPoolUnbondNextSequenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.UnlockEra != 0 {
		n += 1 + sovQuery(uint64(m.UnlockEra))
	}
	return n
}

func (m *QueryPoolUnbondNextSequenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextSequence != 0 {
		n += 1 + sovQuery(uint64(m.NextSequence))
	}
	return n
}

func (m *QueryPoolUnbondingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.UnlockEra != 0 {
		n += 1 + sovQuery(uint64(m.UnlockEra))
	}
	return n
}

func (m *QueryPoolUnbondingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Unbondings) > 0 {
		for _, e := range m.Unbondings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIcaPoolListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIcaPoolListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IcaPoolList) > 0 {
		for _, e := range m.IcaPoolList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryInterchainTxStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInterchainTxStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InterchainTxStatus != 0 {
		n += 1 + sovQuery(uint64(m.InterchainTxStatus))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetExchangeRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExchangeRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExchangeRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRateAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRateAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRateAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRateAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRateAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRateAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRates = append(m.ExchangeRates, ExchangeRate{})
			if err := m.ExchangeRates[len(m.ExchangeRates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraExchangeRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraExchangeRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraExchangeRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EraExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEraExchangeRatesByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEraExchangeRatesByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEraExchangeRatesByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEraExchangeRatesByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEraExchangeRatesByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEraExchangeRatesByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraExchangeRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EraExchangeRates = append(m.EraExchangeRates, EraExchangeRate{})
			if err := m.EraExchangeRates[len(m.EraExchangeRates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBondedPoolsByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBondedPoolsByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBondedPoolsByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBondedPoolsByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBondedPoolsByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBondedPoolsByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Detail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEraSnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEraSnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEraSnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEraSnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEraSnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEraSnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotIds = append(m.ShotIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtocolFeeReceiverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtocolFeeReceiverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtocolFeeReceiverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtocolFeeReceiverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtocolFeeReceiverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtocolFeeReceiverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakingRewardCommissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakingRewardCommissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakingRewardCommissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakingRewardCommissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakingRewardCommissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakingRewardCommissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnbondRelayFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnbondRelayFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnbondRelayFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnbondRelayFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnbondRelayFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnbondRelayFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnbondCommissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnbondCommissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnbondCommissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnbondCommissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnbondCommissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnbondCommissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraUnbondLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraUnbondLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraUnbondLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraUnbondLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraUnbondLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraUnbondLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBondPipelineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBondPipelineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBondPipelineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBondPipelineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBondPipelineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBondPipelineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pipeline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraSnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraSnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraSnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraSnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraSnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraSnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotIds = append(m.ShotIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTotalExpectedActiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTotalExpectedActiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTotalExpectedActiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTotalExpectedActiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTotalExpectedActiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTotalExpectedActiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Active.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBondRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBondRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBondRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBondRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBondRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBondRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignatureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignatureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignatureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= OriginalTxType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalProtocolFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalProtocolFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalProtocolFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalProtocolFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalProtocolFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalProtocolFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProtocolFeeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalProtocolFeeList = append(m.TotalProtocolFeeList, &TotalProtocolFee{})
			if err := m.TotalProtocolFeeList[len(m.TotalProtocolFeeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRelayFeeReceiverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRelayFeeReceiverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRelayFeeReceiverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRelayFeeReceiverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRelayFeeReceiverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRelayFeeReceiverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnbondSwitchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnbondSwitchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnbondSwitchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnbondSwitchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnbondSwitchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnbondSwitchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolUnbondNextSequenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolUnbondNextSequenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolUnbondNextSequenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockEra", wireType)
			}
			m.UnlockEra = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockEra |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolUnbondNextSequenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolUnbondNextSequenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolUnbondNextSequenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSequence", wireType)
			}
			m.NextSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextSequence |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolUnbondingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolUnbondingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolUnbondingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockEra", wireType)
			}
			m.UnlockEra = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockEra |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolUnbondingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolUnbondingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolUnbondingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unbondings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unbondings = append(m.Unbondings, &Unbonding{})
			if err := m.Unbondings[len(m.Unbondings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIcaPoolListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIcaPoolListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIcaPoolListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIcaPoolListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIcaPoolListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIcaPoolListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcaPoolList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IcaPoolList = append(m.IcaPoolList, &IcaPoolDetail{})
			if err := m.IcaPoolList[len(m.IcaPoolList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInterchainTxStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInterchainTxStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInterchainTxStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInterchainTxStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInterchainTxStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInterchainTxStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainTxStatus", wireType)
			}
			m.InterchainTxStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterchainTxStatus |= InterchainTxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
