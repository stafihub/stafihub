// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stafihub/stafihub/bridge/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DenomType int32

const (
	Unspecified         DenomType = 0
	Native              DenomType = 1
	External            DenomType = 2
	InNativeOutExternal DenomType = 3
)

var DenomType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "NATIVE",
	2: "EXTERNAL",
	3: "IN_NATIVE_OUT_EXTERNAL",
}

var DenomType_value = map[string]int32{
	"UNSPECIFIED":            0,
	"NATIVE":                 1,
	"EXTERNAL":               2,
	"IN_NATIVE_OUT_EXTERNAL": 3,
}

func (x DenomType) String() string {
	return proto.EnumName(DenomType_name, int32(x))
}

func (DenomType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_833a1ffbf42825ad, []int{0}
}

// GenesisState defines the bridge module's genesis state.
type GenesisState struct {
	Params                Params               `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	DepositCountList      []*DepositCount      `protobuf:"bytes,2,rep,name=depositCountList,proto3" json:"depositCountList,omitempty"`
	ProposalList          []*GenesisProposal   `protobuf:"bytes,3,rep,name=proposalList,proto3" json:"proposalList,omitempty"`
	RelayFeeList          []*RelayFee          `protobuf:"bytes,4,rep,name=relayFeeList,proto3" json:"relayFeeList,omitempty"`
	ChainIdList           []uint32             `protobuf:"varint,5,rep,packed,name=chainIdList,proto3" json:"chainIdList,omitempty"`
	RelayFeeReceiver      string               `protobuf:"bytes,6,opt,name=relayFeeReceiver,proto3" json:"relayFeeReceiver,omitempty"`
	ResourceIdToDenomList []*ResourceIdToDenom `protobuf:"bytes,7,rep,name=resourceIdToDenomList,proto3" json:"resourceIdToDenomList,omitempty"`
	BannedDenomList       []*BannedDenom       `protobuf:"bytes,8,rep,name=bannedDenomList,proto3" json:"bannedDenomList,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_833a1ffbf42825ad, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetDepositCountList() []*DepositCount {
	if m != nil {
		return m.DepositCountList
	}
	return nil
}

func (m *GenesisState) GetProposalList() []*GenesisProposal {
	if m != nil {
		return m.ProposalList
	}
	return nil
}

func (m *GenesisState) GetRelayFeeList() []*RelayFee {
	if m != nil {
		return m.RelayFeeList
	}
	return nil
}

func (m *GenesisState) GetChainIdList() []uint32 {
	if m != nil {
		return m.ChainIdList
	}
	return nil
}

func (m *GenesisState) GetRelayFeeReceiver() string {
	if m != nil {
		return m.RelayFeeReceiver
	}
	return ""
}

func (m *GenesisState) GetResourceIdToDenomList() []*ResourceIdToDenom {
	if m != nil {
		return m.ResourceIdToDenomList
	}
	return nil
}

func (m *GenesisState) GetBannedDenomList() []*BannedDenom {
	if m != nil {
		return m.BannedDenomList
	}
	return nil
}

type DepositCount struct {
	ChainId uint32 `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Count   uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *DepositCount) Reset()         { *m = DepositCount{} }
func (m *DepositCount) String() string { return proto.CompactTextString(m) }
func (*DepositCount) ProtoMessage()    {}
func (*DepositCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_833a1ffbf42825ad, []int{1}
}
func (m *DepositCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositCount.Merge(m, src)
}
func (m *DepositCount) XXX_Size() int {
	return m.Size()
}
func (m *DepositCount) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositCount.DiscardUnknown(m)
}

var xxx_messageInfo_DepositCount proto.InternalMessageInfo

func (m *DepositCount) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *DepositCount) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GenesisProposal struct {
	ChainId      uint32    `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	DepositNonce uint64    `protobuf:"varint,2,opt,name=depositNonce,proto3" json:"depositNonce,omitempty"`
	ResourceId   string    `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	Proposal     *Proposal `protobuf:"bytes,4,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (m *GenesisProposal) Reset()         { *m = GenesisProposal{} }
func (m *GenesisProposal) String() string { return proto.CompactTextString(m) }
func (*GenesisProposal) ProtoMessage()    {}
func (*GenesisProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_833a1ffbf42825ad, []int{2}
}
func (m *GenesisProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisProposal.Merge(m, src)
}
func (m *GenesisProposal) XXX_Size() int {
	return m.Size()
}
func (m *GenesisProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisProposal.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisProposal proto.InternalMessageInfo

func (m *GenesisProposal) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GenesisProposal) GetDepositNonce() uint64 {
	if m != nil {
		return m.DepositNonce
	}
	return 0
}

func (m *GenesisProposal) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *GenesisProposal) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

type RelayFee struct {
	ChainId uint32                                  `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Value   github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"value"`
}

func (m *RelayFee) Reset()         { *m = RelayFee{} }
func (m *RelayFee) String() string { return proto.CompactTextString(m) }
func (*RelayFee) ProtoMessage()    {}
func (*RelayFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_833a1ffbf42825ad, []int{3}
}
func (m *RelayFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayFee.Merge(m, src)
}
func (m *RelayFee) XXX_Size() int {
	return m.Size()
}
func (m *RelayFee) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayFee.DiscardUnknown(m)
}

var xxx_messageInfo_RelayFee proto.InternalMessageInfo

func (m *RelayFee) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type BannedDenom struct {
	ChainId uint32 `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *BannedDenom) Reset()         { *m = BannedDenom{} }
func (m *BannedDenom) String() string { return proto.CompactTextString(m) }
func (*BannedDenom) ProtoMessage()    {}
func (*BannedDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_833a1ffbf42825ad, []int{4}
}
func (m *BannedDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BannedDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BannedDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BannedDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BannedDenom.Merge(m, src)
}
func (m *BannedDenom) XXX_Size() int {
	return m.Size()
}
func (m *BannedDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_BannedDenom.DiscardUnknown(m)
}

var xxx_messageInfo_BannedDenom proto.InternalMessageInfo

func (m *BannedDenom) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *BannedDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type ResourceIdToDenom struct {
	ResourceId string    `protobuf:"bytes,1,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	Denom      string    `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	DenomType  DenomType `protobuf:"varint,3,opt,name=denomType,proto3,enum=stafihub.stafihub.bridge.DenomType" json:"denomType,omitempty"`
}

func (m *ResourceIdToDenom) Reset()         { *m = ResourceIdToDenom{} }
func (m *ResourceIdToDenom) String() string { return proto.CompactTextString(m) }
func (*ResourceIdToDenom) ProtoMessage()    {}
func (*ResourceIdToDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_833a1ffbf42825ad, []int{5}
}
func (m *ResourceIdToDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceIdToDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceIdToDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceIdToDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceIdToDenom.Merge(m, src)
}
func (m *ResourceIdToDenom) XXX_Size() int {
	return m.Size()
}
func (m *ResourceIdToDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceIdToDenom.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceIdToDenom proto.InternalMessageInfo

func (m *ResourceIdToDenom) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ResourceIdToDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *ResourceIdToDenom) GetDenomType() DenomType {
	if m != nil {
		return m.DenomType
	}
	return Unspecified
}

func init() {
	proto.RegisterEnum("stafihub.stafihub.bridge.DenomType", DenomType_name, DenomType_value)
	proto.RegisterType((*GenesisState)(nil), "stafihub.stafihub.bridge.GenesisState")
	proto.RegisterType((*DepositCount)(nil), "stafihub.stafihub.bridge.DepositCount")
	proto.RegisterType((*GenesisProposal)(nil), "stafihub.stafihub.bridge.GenesisProposal")
	proto.RegisterType((*RelayFee)(nil), "stafihub.stafihub.bridge.RelayFee")
	proto.RegisterType((*BannedDenom)(nil), "stafihub.stafihub.bridge.BannedDenom")
	proto.RegisterType((*ResourceIdToDenom)(nil), "stafihub.stafihub.bridge.ResourceIdToDenom")
}

func init() {
	proto.RegisterFile("stafihub/stafihub/bridge/genesis.proto", fileDescriptor_833a1ffbf42825ad)
}

var fileDescriptor_833a1ffbf42825ad = []byte{
	// 723 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xcf, 0x4e, 0xdb, 0x4a,
	0x14, 0xc6, 0x63, 0x12, 0x42, 0x72, 0x12, 0x2e, 0xb9, 0x73, 0xb9, 0x5c, 0x5f, 0x2f, 0x8c, 0xe5,
	0x0a, 0x48, 0x41, 0xb5, 0x45, 0x58, 0x17, 0x89, 0x40, 0xa8, 0x22, 0xd1, 0x80, 0x86, 0x50, 0x55,
	0xdd, 0xd0, 0x89, 0x3d, 0x04, 0xab, 0x89, 0x27, 0xb2, 0x9d, 0x08, 0x5e, 0xa0, 0xaa, 0xa2, 0x2e,
	0xfa, 0x00, 0xcd, 0xaa, 0x0f, 0xd0, 0x07, 0xe8, 0x0b, 0xb0, 0x64, 0x59, 0x75, 0x81, 0x2a, 0x78,
	0x91, 0xca, 0x63, 0x3b, 0x09, 0x09, 0xce, 0xca, 0xf3, 0xe7, 0xfb, 0x7e, 0x3e, 0x33, 0xe7, 0x9c,
	0x81, 0x75, 0xd7, 0x23, 0x17, 0xd6, 0x65, 0xb7, 0xa1, 0x0f, 0x07, 0x0d, 0xc7, 0x32, 0x9b, 0x54,
	0x6f, 0x52, 0x9b, 0xba, 0x96, 0xab, 0x75, 0x1c, 0xe6, 0x31, 0x24, 0x46, 0xdb, 0xda, 0x70, 0x10,
	0xe8, 0xa4, 0xe5, 0x26, 0x6b, 0x32, 0x2e, 0xd2, 0xfd, 0x51, 0xa0, 0x97, 0xd6, 0x62, 0xb9, 0x1d,
	0xe2, 0x90, 0x76, 0x88, 0x95, 0x36, 0xe2, 0x65, 0x0e, 0xeb, 0x30, 0x97, 0xb4, 0x42, 0xa1, 0x6c,
	0x30, 0xb7, 0xcd, 0x5c, 0xbd, 0x41, 0x5c, 0xaa, 0xf7, 0xb6, 0x1b, 0xd4, 0x23, 0xdb, 0xba, 0xc1,
	0x2c, 0x3b, 0xd8, 0x57, 0x7f, 0xa4, 0x20, 0xff, 0x2a, 0x88, 0xf8, 0xd4, 0x23, 0x1e, 0x45, 0xbb,
	0x90, 0x0e, 0xfe, 0x24, 0x0a, 0x8a, 0x50, 0xcc, 0x95, 0x14, 0x2d, 0xee, 0x04, 0xda, 0x09, 0xd7,
	0x95, 0x53, 0x37, 0x77, 0xab, 0x09, 0x1c, 0xba, 0x10, 0x86, 0x82, 0x49, 0x3b, 0xcc, 0xb5, 0xbc,
	0x7d, 0xd6, 0xb5, 0xbd, 0x23, 0xcb, 0xf5, 0xc4, 0x39, 0x25, 0x59, 0xcc, 0x95, 0xd6, 0xe3, 0x49,
	0x07, 0x63, 0x0e, 0x3c, 0xe5, 0x47, 0xaf, 0x21, 0x1f, 0x1d, 0x8b, 0xf3, 0x92, 0x9c, 0xf7, 0x3c,
	0x9e, 0x17, 0x9e, 0xe8, 0x24, 0x34, 0xe1, 0x47, 0x76, 0x74, 0x08, 0x79, 0x87, 0xb6, 0xc8, 0xf5,
	0x21, 0xa5, 0x1c, 0x97, 0xe2, 0x38, 0x35, 0x1e, 0x87, 0x43, 0x35, 0x7e, 0xe4, 0x43, 0x0a, 0xe4,
	0x8c, 0x4b, 0x62, 0xd9, 0x55, 0x93, 0x63, 0xe6, 0x95, 0x64, 0x71, 0x11, 0x8f, 0x2f, 0xa1, 0x4d,
	0x28, 0x44, 0x0e, 0x4c, 0x0d, 0x6a, 0xf5, 0xa8, 0x23, 0xa6, 0x15, 0xa1, 0x98, 0xc5, 0x53, 0xeb,
	0x88, 0xc0, 0xbf, 0x0e, 0x75, 0x59, 0xd7, 0x31, 0x68, 0xd5, 0xac, 0xb3, 0x03, 0x6a, 0xb3, 0x36,
	0xe7, 0x2e, 0xf0, 0xf0, 0xb6, 0x66, 0x85, 0x37, 0x61, 0xc3, 0x4f, 0x93, 0xd0, 0x31, 0x2c, 0x35,
	0x88, 0x6d, 0x53, 0x73, 0x04, 0xcf, 0x70, 0xf8, 0x5a, 0x3c, 0xbc, 0x3c, 0x32, 0xe0, 0x49, 0xb7,
	0xba, 0x0b, 0xf9, 0xf1, 0xd4, 0x21, 0x11, 0x16, 0xc2, 0xe3, 0xf3, 0xea, 0x59, 0xc4, 0xd1, 0x14,
	0x2d, 0xc3, 0xbc, 0xe1, 0x4b, 0xc4, 0x39, 0x45, 0x28, 0xa6, 0x70, 0x30, 0x51, 0xbf, 0x0b, 0xb0,
	0x34, 0x91, 0xab, 0x19, 0x0c, 0x15, 0xf2, 0x61, 0x69, 0xd4, 0x98, 0x6d, 0xd0, 0x10, 0xf5, 0x68,
	0x0d, 0xc9, 0x00, 0xa3, 0xb3, 0x8b, 0x49, 0x7e, 0xd7, 0x63, 0x2b, 0x68, 0x17, 0x32, 0x51, 0x2d,
	0x88, 0x29, 0x5e, 0xe0, 0x33, 0xf2, 0x3e, 0xac, 0x9f, 0xa1, 0x47, 0xfd, 0x28, 0x40, 0x26, 0x2a,
	0x87, 0x19, 0xa1, 0xbe, 0x87, 0xf9, 0x1e, 0x69, 0x75, 0x83, 0x18, 0x73, 0xa5, 0xff, 0xb5, 0xa0,
	0x0d, 0x35, 0xbf, 0x0d, 0xb5, 0xb0, 0x0d, 0xb5, 0x7d, 0x66, 0xd9, 0x65, 0xdd, 0xef, 0x9e, 0x5f,
	0x77, 0xab, 0x1b, 0x4d, 0xcb, 0xf3, 0x7f, 0x6d, 0xb0, 0xb6, 0x1e, 0xf6, 0x6c, 0xf0, 0x79, 0xe1,
	0x9a, 0x1f, 0x74, 0xef, 0xba, 0x43, 0x5d, 0x6e, 0xc0, 0x01, 0x58, 0x7d, 0x09, 0xb9, 0xb1, 0xd4,
	0xcc, 0xbe, 0x79, 0xd3, 0x97, 0xf0, 0x50, 0xb2, 0x38, 0x98, 0xa8, 0x9f, 0x05, 0xf8, 0x7b, 0xaa,
	0x6e, 0x26, 0x6e, 0x4f, 0x98, 0xba, 0xbd, 0x27, 0x59, 0x68, 0x0f, 0xb2, 0x7c, 0x50, 0xbf, 0xee,
	0x50, 0x7e, 0xe5, 0x7f, 0x95, 0x9e, 0xcd, 0xea, 0xf5, 0x50, 0x8a, 0x47, 0xae, 0xcd, 0xaf, 0x02,
	0x64, 0x87, 0x1b, 0x7e, 0x63, 0x9d, 0xd5, 0x4e, 0x4f, 0x2a, 0xfb, 0xd5, 0xc3, 0x6a, 0xe5, 0xa0,
	0x90, 0x90, 0x96, 0xfa, 0x03, 0x25, 0x77, 0x66, 0xbb, 0x1d, 0x6a, 0x58, 0x17, 0x16, 0x35, 0xd1,
	0x0a, 0xa4, 0x6b, 0x7b, 0xf5, 0xea, 0x9b, 0x4a, 0x41, 0x90, 0xa0, 0x3f, 0x50, 0xd2, 0x35, 0xe2,
	0x59, 0x3d, 0x8a, 0x24, 0xc8, 0x54, 0xde, 0xd6, 0x2b, 0xb8, 0xb6, 0x77, 0x54, 0x98, 0x93, 0xf2,
	0xfd, 0x81, 0x92, 0xa9, 0x5c, 0x79, 0xd4, 0xb1, 0x49, 0x0b, 0xed, 0xc0, 0x4a, 0xb5, 0x76, 0x1e,
	0xd8, 0xce, 0x8f, 0xcf, 0xea, 0xe7, 0x43, 0x65, 0x52, 0xfa, 0xaf, 0x3f, 0x50, 0xfe, 0xa9, 0xda,
	0x01, 0xe5, 0xb8, 0xeb, 0x45, 0x26, 0x29, 0xf5, 0xe9, 0x9b, 0x9c, 0x28, 0x57, 0x6e, 0xee, 0x65,
	0xe1, 0xf6, 0x5e, 0x16, 0x7e, 0xdf, 0xcb, 0xc2, 0x97, 0x07, 0x39, 0x71, 0xfb, 0x20, 0x27, 0x7e,
	0x3e, 0xc8, 0x89, 0x77, 0x5b, 0x63, 0x69, 0x9b, 0x7e, 0x93, 0xaf, 0xa2, 0x57, 0x99, 0xe7, 0xaf,
	0x91, 0xe6, 0x6f, 0xee, 0xce, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x80, 0x69, 0x79, 0x3d,
	0x06, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BannedDenomList) > 0 {
		for iNdEx := len(m.BannedDenomList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BannedDenomList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ResourceIdToDenomList) > 0 {
		for iNdEx := len(m.ResourceIdToDenomList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceIdToDenomList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RelayFeeReceiver) > 0 {
		i -= len(m.RelayFeeReceiver)
		copy(dAtA[i:], m.RelayFeeReceiver)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.RelayFeeReceiver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainIdList) > 0 {
		dAtA2 := make([]byte, len(m.ChainIdList)*10)
		var j1 int
		for _, num := range m.ChainIdList {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGenesis(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RelayFeeList) > 0 {
		for iNdEx := len(m.RelayFeeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RelayFeeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ProposalList) > 0 {
		for iNdEx := len(m.ProposalList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProposalList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DepositCountList) > 0 {
		for iNdEx := len(m.DepositCountList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositCountList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DepositCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DepositNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DepositNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RelayFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ChainId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BannedDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannedDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BannedDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResourceIdToDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceIdToDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceIdToDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DenomType != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DenomType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.DepositCountList) > 0 {
		for _, e := range m.DepositCountList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ProposalList) > 0 {
		for _, e := range m.ProposalList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RelayFeeList) > 0 {
		for _, e := range m.RelayFeeList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ChainIdList) > 0 {
		l = 0
		for _, e := range m.ChainIdList {
			l += sovGenesis(uint64(e))
		}
		n += 1 + sovGenesis(uint64(l)) + l
	}
	l = len(m.RelayFeeReceiver)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.ResourceIdToDenomList) > 0 {
		for _, e := range m.ResourceIdToDenomList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BannedDenomList) > 0 {
		for _, e := range m.BannedDenomList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DepositCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovGenesis(uint64(m.ChainId))
	}
	if m.Count != 0 {
		n += 1 + sovGenesis(uint64(m.Count))
	}
	return n
}

func (m *GenesisProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovGenesis(uint64(m.ChainId))
	}
	if m.DepositNonce != 0 {
		n += 1 + sovGenesis(uint64(m.DepositNonce))
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *RelayFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovGenesis(uint64(m.ChainId))
	}
	l = m.Value.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *BannedDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovGenesis(uint64(m.ChainId))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *ResourceIdToDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.DenomType != 0 {
		n += 1 + sovGenesis(uint64(m.DenomType))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositCountList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositCountList = append(m.DepositCountList, &DepositCount{})
			if err := m.DepositCountList[len(m.DepositCountList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalList = append(m.ProposalList, &GenesisProposal{})
			if err := m.ProposalList[len(m.ProposalList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayFeeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayFeeList = append(m.RelayFeeList, &RelayFee{})
			if err := m.RelayFeeList[len(m.RelayFeeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChainIdList = append(m.ChainIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenesis
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenesis
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChainIdList) == 0 {
					m.ChainIdList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChainIdList = append(m.ChainIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIdList", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayFeeReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayFeeReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceIdToDenomList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceIdToDenomList = append(m.ResourceIdToDenomList, &ResourceIdToDenom{})
			if err := m.ResourceIdToDenomList[len(m.ResourceIdToDenomList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedDenomList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BannedDenomList = append(m.BannedDenomList, &BannedDenom{})
			if err := m.BannedDenomList[len(m.BannedDenomList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositNonce", wireType)
			}
			m.DepositNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &Proposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannedDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BannedDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BannedDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceIdToDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceIdToDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceIdToDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomType", wireType)
			}
			m.DenomType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DenomType |= DenomType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
