// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stafihub/stafihub/bridge/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryChaindIdsRequest struct {
}

func (m *QueryChaindIdsRequest) Reset()         { *m = QueryChaindIdsRequest{} }
func (m *QueryChaindIdsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChaindIdsRequest) ProtoMessage()    {}
func (*QueryChaindIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{2}
}
func (m *QueryChaindIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChaindIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChaindIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChaindIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChaindIdsRequest.Merge(m, src)
}
func (m *QueryChaindIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChaindIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChaindIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChaindIdsRequest proto.InternalMessageInfo

type QueryChaindIdsResponse struct {
	ChainId []uint32 `protobuf:"varint,1,rep,packed,name=chainId,proto3" json:"chainId,omitempty"`
}

func (m *QueryChaindIdsResponse) Reset()         { *m = QueryChaindIdsResponse{} }
func (m *QueryChaindIdsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChaindIdsResponse) ProtoMessage()    {}
func (*QueryChaindIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{3}
}
func (m *QueryChaindIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChaindIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChaindIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChaindIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChaindIdsResponse.Merge(m, src)
}
func (m *QueryChaindIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChaindIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChaindIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChaindIdsResponse proto.InternalMessageInfo

func (m *QueryChaindIdsResponse) GetChainId() []uint32 {
	if m != nil {
		return m.ChainId
	}
	return nil
}

type QueryProposalDetailRequest struct {
	ChainId      uint32 `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	DepositNonce uint64 `protobuf:"varint,2,opt,name=depositNonce,proto3" json:"depositNonce,omitempty"`
	ResourceId   string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	Amount       string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Receiver     string `protobuf:"bytes,5,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (m *QueryProposalDetailRequest) Reset()         { *m = QueryProposalDetailRequest{} }
func (m *QueryProposalDetailRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProposalDetailRequest) ProtoMessage()    {}
func (*QueryProposalDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{4}
}
func (m *QueryProposalDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposalDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposalDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposalDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposalDetailRequest.Merge(m, src)
}
func (m *QueryProposalDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposalDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposalDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposalDetailRequest proto.InternalMessageInfo

func (m *QueryProposalDetailRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryProposalDetailRequest) GetDepositNonce() uint64 {
	if m != nil {
		return m.DepositNonce
	}
	return 0
}

func (m *QueryProposalDetailRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *QueryProposalDetailRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *QueryProposalDetailRequest) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

type QueryProposalDetailResponse struct {
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (m *QueryProposalDetailResponse) Reset()         { *m = QueryProposalDetailResponse{} }
func (m *QueryProposalDetailResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProposalDetailResponse) ProtoMessage()    {}
func (*QueryProposalDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{5}
}
func (m *QueryProposalDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposalDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposalDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposalDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposalDetailResponse.Merge(m, src)
}
func (m *QueryProposalDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposalDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposalDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposalDetailResponse proto.InternalMessageInfo

func (m *QueryProposalDetailResponse) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

type QueryResourceidToDenomsRequest struct {
}

func (m *QueryResourceidToDenomsRequest) Reset()         { *m = QueryResourceidToDenomsRequest{} }
func (m *QueryResourceidToDenomsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryResourceidToDenomsRequest) ProtoMessage()    {}
func (*QueryResourceidToDenomsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{6}
}
func (m *QueryResourceidToDenomsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResourceidToDenomsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResourceidToDenomsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResourceidToDenomsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResourceidToDenomsRequest.Merge(m, src)
}
func (m *QueryResourceidToDenomsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryResourceidToDenomsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResourceidToDenomsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResourceidToDenomsRequest proto.InternalMessageInfo

type QueryResourceidToDenomsResponse struct {
	ResourceidToDenoms []*ResourceIdToDenom `protobuf:"bytes,1,rep,name=resourceidToDenoms,proto3" json:"resourceidToDenoms,omitempty"`
}

func (m *QueryResourceidToDenomsResponse) Reset()         { *m = QueryResourceidToDenomsResponse{} }
func (m *QueryResourceidToDenomsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResourceidToDenomsResponse) ProtoMessage()    {}
func (*QueryResourceidToDenomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{7}
}
func (m *QueryResourceidToDenomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResourceidToDenomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResourceidToDenomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResourceidToDenomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResourceidToDenomsResponse.Merge(m, src)
}
func (m *QueryResourceidToDenomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResourceidToDenomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResourceidToDenomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResourceidToDenomsResponse proto.InternalMessageInfo

func (m *QueryResourceidToDenomsResponse) GetResourceidToDenoms() []*ResourceIdToDenom {
	if m != nil {
		return m.ResourceidToDenoms
	}
	return nil
}

type QueryRelayFeeReceiverRequest struct {
}

func (m *QueryRelayFeeReceiverRequest) Reset()         { *m = QueryRelayFeeReceiverRequest{} }
func (m *QueryRelayFeeReceiverRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRelayFeeReceiverRequest) ProtoMessage()    {}
func (*QueryRelayFeeReceiverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{8}
}
func (m *QueryRelayFeeReceiverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRelayFeeReceiverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRelayFeeReceiverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRelayFeeReceiverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRelayFeeReceiverRequest.Merge(m, src)
}
func (m *QueryRelayFeeReceiverRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRelayFeeReceiverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRelayFeeReceiverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRelayFeeReceiverRequest proto.InternalMessageInfo

type QueryRelayFeeReceiverResponse struct {
	Receiver string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (m *QueryRelayFeeReceiverResponse) Reset()         { *m = QueryRelayFeeReceiverResponse{} }
func (m *QueryRelayFeeReceiverResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRelayFeeReceiverResponse) ProtoMessage()    {}
func (*QueryRelayFeeReceiverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{9}
}
func (m *QueryRelayFeeReceiverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRelayFeeReceiverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRelayFeeReceiverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRelayFeeReceiverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRelayFeeReceiverResponse.Merge(m, src)
}
func (m *QueryRelayFeeReceiverResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRelayFeeReceiverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRelayFeeReceiverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRelayFeeReceiverResponse proto.InternalMessageInfo

func (m *QueryRelayFeeReceiverResponse) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

type QueryRelayFeeRequest struct {
	ChainId uint32 `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
}

func (m *QueryRelayFeeRequest) Reset()         { *m = QueryRelayFeeRequest{} }
func (m *QueryRelayFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRelayFeeRequest) ProtoMessage()    {}
func (*QueryRelayFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{10}
}
func (m *QueryRelayFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRelayFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRelayFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRelayFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRelayFeeRequest.Merge(m, src)
}
func (m *QueryRelayFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRelayFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRelayFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRelayFeeRequest proto.InternalMessageInfo

func (m *QueryRelayFeeRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryRelayFeeResponse struct {
	Value github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=value,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"value"`
}

func (m *QueryRelayFeeResponse) Reset()         { *m = QueryRelayFeeResponse{} }
func (m *QueryRelayFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRelayFeeResponse) ProtoMessage()    {}
func (*QueryRelayFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{11}
}
func (m *QueryRelayFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRelayFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRelayFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRelayFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRelayFeeResponse.Merge(m, src)
}
func (m *QueryRelayFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRelayFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRelayFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRelayFeeResponse proto.InternalMessageInfo

type QueryBannedDenomListRequest struct {
}

func (m *QueryBannedDenomListRequest) Reset()         { *m = QueryBannedDenomListRequest{} }
func (m *QueryBannedDenomListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBannedDenomListRequest) ProtoMessage()    {}
func (*QueryBannedDenomListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{12}
}
func (m *QueryBannedDenomListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBannedDenomListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBannedDenomListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBannedDenomListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBannedDenomListRequest.Merge(m, src)
}
func (m *QueryBannedDenomListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBannedDenomListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBannedDenomListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBannedDenomListRequest proto.InternalMessageInfo

type QueryBannedDenomListResponse struct {
	List []*BannedDenom `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *QueryBannedDenomListResponse) Reset()         { *m = QueryBannedDenomListResponse{} }
func (m *QueryBannedDenomListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBannedDenomListResponse) ProtoMessage()    {}
func (*QueryBannedDenomListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{13}
}
func (m *QueryBannedDenomListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBannedDenomListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBannedDenomListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBannedDenomListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBannedDenomListResponse.Merge(m, src)
}
func (m *QueryBannedDenomListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBannedDenomListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBannedDenomListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBannedDenomListResponse proto.InternalMessageInfo

func (m *QueryBannedDenomListResponse) GetList() []*BannedDenom {
	if m != nil {
		return m.List
	}
	return nil
}

type QueryGetDepositCountRequest struct {
	ChainId uint32 `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
}

func (m *QueryGetDepositCountRequest) Reset()         { *m = QueryGetDepositCountRequest{} }
func (m *QueryGetDepositCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDepositCountRequest) ProtoMessage()    {}
func (*QueryGetDepositCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{14}
}
func (m *QueryGetDepositCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDepositCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDepositCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDepositCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDepositCountRequest.Merge(m, src)
}
func (m *QueryGetDepositCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDepositCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDepositCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDepositCountRequest proto.InternalMessageInfo

func (m *QueryGetDepositCountRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryGetDepositCountResponse struct {
	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryGetDepositCountResponse) Reset()         { *m = QueryGetDepositCountResponse{} }
func (m *QueryGetDepositCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDepositCountResponse) ProtoMessage()    {}
func (*QueryGetDepositCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce17a4bd7d8d86, []int{15}
}
func (m *QueryGetDepositCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDepositCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDepositCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDepositCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDepositCountResponse.Merge(m, src)
}
func (m *QueryGetDepositCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDepositCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDepositCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDepositCountResponse proto.InternalMessageInfo

func (m *QueryGetDepositCountResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "stafihub.stafihub.bridge.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "stafihub.stafihub.bridge.QueryParamsResponse")
	proto.RegisterType((*QueryChaindIdsRequest)(nil), "stafihub.stafihub.bridge.QueryChaindIdsRequest")
	proto.RegisterType((*QueryChaindIdsResponse)(nil), "stafihub.stafihub.bridge.QueryChaindIdsResponse")
	proto.RegisterType((*QueryProposalDetailRequest)(nil), "stafihub.stafihub.bridge.QueryProposalDetailRequest")
	proto.RegisterType((*QueryProposalDetailResponse)(nil), "stafihub.stafihub.bridge.QueryProposalDetailResponse")
	proto.RegisterType((*QueryResourceidToDenomsRequest)(nil), "stafihub.stafihub.bridge.QueryResourceidToDenomsRequest")
	proto.RegisterType((*QueryResourceidToDenomsResponse)(nil), "stafihub.stafihub.bridge.QueryResourceidToDenomsResponse")
	proto.RegisterType((*QueryRelayFeeReceiverRequest)(nil), "stafihub.stafihub.bridge.QueryRelayFeeReceiverRequest")
	proto.RegisterType((*QueryRelayFeeReceiverResponse)(nil), "stafihub.stafihub.bridge.QueryRelayFeeReceiverResponse")
	proto.RegisterType((*QueryRelayFeeRequest)(nil), "stafihub.stafihub.bridge.QueryRelayFeeRequest")
	proto.RegisterType((*QueryRelayFeeResponse)(nil), "stafihub.stafihub.bridge.QueryRelayFeeResponse")
	proto.RegisterType((*QueryBannedDenomListRequest)(nil), "stafihub.stafihub.bridge.QueryBannedDenomListRequest")
	proto.RegisterType((*QueryBannedDenomListResponse)(nil), "stafihub.stafihub.bridge.QueryBannedDenomListResponse")
	proto.RegisterType((*QueryGetDepositCountRequest)(nil), "stafihub.stafihub.bridge.QueryGetDepositCountRequest")
	proto.RegisterType((*QueryGetDepositCountResponse)(nil), "stafihub.stafihub.bridge.QueryGetDepositCountResponse")
}

func init() {
	proto.RegisterFile("stafihub/stafihub/bridge/query.proto", fileDescriptor_2dce17a4bd7d8d86)
}

var fileDescriptor_2dce17a4bd7d8d86 = []byte{
	// 961 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x33, 0x6d, 0x12, 0xd2, 0x17, 0xa0, 0x68, 0x08, 0xc5, 0x2c, 0xed, 0xc6, 0x5a, 0xf5,
	0x87, 0x45, 0x92, 0x9d, 0x34, 0xcd, 0x0f, 0x2a, 0x04, 0x87, 0x24, 0x80, 0x22, 0x21, 0x04, 0x2b,
	0x38, 0x00, 0x42, 0xcb, 0x78, 0x77, 0xea, 0x8e, 0xea, 0xec, 0xb8, 0x3b, 0xeb, 0x08, 0x2b, 0x0a,
	0x07, 0xfe, 0x01, 0x90, 0xb8, 0x72, 0xe2, 0x0f, 0xe0, 0xc6, 0x81, 0x13, 0x42, 0xe2, 0xd0, 0x63,
	0x25, 0x2e, 0x88, 0x43, 0x84, 0x12, 0x4e, 0xfc, 0x15, 0xc8, 0x33, 0x6f, 0x6d, 0xc7, 0xf6, 0x66,
	0x9d, 0x9e, 0xbc, 0x33, 0xf3, 0xbe, 0x6f, 0x3e, 0xfb, 0xe6, 0xcd, 0x77, 0x0d, 0x37, 0x75, 0xc6,
	0x1f, 0xc8, 0x87, 0xed, 0x3a, 0xeb, 0x3d, 0xd4, 0x53, 0x19, 0x37, 0x04, 0x7b, 0xdc, 0x16, 0x69,
	0xc7, 0x6f, 0xa5, 0x2a, 0x53, 0xb4, 0x92, 0x2f, 0xfa, 0xbd, 0x07, 0x1b, 0xe5, 0x2c, 0x34, 0x54,
	0x43, 0x99, 0x20, 0xd6, 0x7d, 0xb2, 0xf1, 0xce, 0xf5, 0x86, 0x52, 0x8d, 0xa6, 0x60, 0xbc, 0x25,
	0x19, 0x4f, 0x12, 0x95, 0xf1, 0x4c, 0xaa, 0x44, 0xe3, 0xea, 0x1b, 0x91, 0xd2, 0xfb, 0x4a, 0xb3,
	0x3a, 0xd7, 0xb8, 0x0d, 0x3b, 0xb8, 0x5b, 0x17, 0x19, 0xbf, 0xcb, 0x5a, 0xbc, 0x21, 0x13, 0x13,
	0x8c, 0xb1, 0xb7, 0x0a, 0xf9, 0x5a, 0x3c, 0xe5, 0xfb, 0x79, 0xca, 0x3b, 0xc5, 0x61, 0xa9, 0x6a,
	0x29, 0xcd, 0x9b, 0x18, 0x78, 0xbb, 0x30, 0xb0, 0x21, 0x12, 0xa1, 0x65, 0x9e, 0xd0, 0x1d, 0x64,
	0xcc, 0xe9, 0x22, 0x25, 0x91, 0xcb, 0x5b, 0x00, 0xfa, 0x71, 0x97, 0xfc, 0x23, 0x43, 0x11, 0x88,
	0xc7, 0x6d, 0xa1, 0x33, 0xef, 0x53, 0x78, 0xf9, 0xcc, 0xac, 0x6e, 0xa9, 0x44, 0x0b, 0xfa, 0x0e,
	0xcc, 0x5a, 0xda, 0x0a, 0xa9, 0x92, 0xda, 0xfc, 0x5a, 0xd5, 0x2f, 0xaa, 0xa7, 0x6f, 0x95, 0xdb,
	0xd3, 0x4f, 0x8e, 0x17, 0xa7, 0x02, 0x54, 0x79, 0xaf, 0xc2, 0x2b, 0x26, 0xed, 0xce, 0x43, 0x2e,
	0x93, 0x78, 0x2f, 0xee, 0xed, 0xb7, 0x06, 0xd7, 0x86, 0x17, 0x70, 0xcb, 0x0a, 0x3c, 0x17, 0x75,
	0x27, 0xf7, 0xe2, 0x0a, 0xa9, 0x5e, 0xae, 0xbd, 0x10, 0xe4, 0x43, 0xef, 0x67, 0x02, 0x8e, 0x85,
	0xc4, 0xca, 0xec, 0x8a, 0x8c, 0xcb, 0x26, 0xa6, 0x3c, 0x2b, 0x24, 0x03, 0x42, 0xea, 0xc1, 0xf3,
	0xb1, 0x68, 0x29, 0x2d, 0xb3, 0x0f, 0x55, 0x12, 0x89, 0xca, 0xa5, 0x2a, 0xa9, 0x4d, 0x07, 0x67,
	0xe6, 0xa8, 0x0b, 0x90, 0x0a, 0xad, 0xda, 0x69, 0x24, 0xf6, 0xe2, 0xca, 0xe5, 0x2a, 0xa9, 0x5d,
	0x09, 0x06, 0x66, 0xe8, 0x35, 0x98, 0xe5, 0xfb, 0xaa, 0x9d, 0x64, 0x95, 0x69, 0xb3, 0x86, 0x23,
	0xea, 0xc0, 0x5c, 0x2a, 0x22, 0x21, 0x0f, 0x44, 0x5a, 0x99, 0x31, 0x2b, 0xbd, 0xb1, 0xf7, 0x25,
	0xbc, 0x3e, 0x96, 0xb7, 0x57, 0xdc, 0xb9, 0xfc, 0x8c, 0xb1, 0xbc, 0xde, 0x39, 0xe5, 0xc5, 0xc8,
	0xa0, 0xa7, 0xf1, 0xaa, 0xe0, 0x9a, 0xf4, 0x01, 0x52, 0xca, 0xf8, 0x13, 0xb5, 0x2b, 0x12, 0xd5,
	0x3f, 0xd5, 0x6f, 0x60, 0xb1, 0x30, 0x02, 0x21, 0xbe, 0x00, 0x9a, 0x8e, 0xac, 0x9a, 0xca, 0xcf,
	0xaf, 0x2d, 0x15, 0xe3, 0x04, 0xbd, 0xca, 0xa0, 0x26, 0x18, 0x93, 0xc6, 0x73, 0xe1, 0x3a, 0xee,
	0xdf, 0xe4, 0x9d, 0xf7, 0x84, 0x08, 0xb0, 0x32, 0x39, 0xdf, 0x5b, 0x70, 0xa3, 0x60, 0x1d, 0xe9,
	0x06, 0xab, 0x4b, 0x86, 0xaa, 0xbb, 0x0a, 0x0b, 0x43, 0xe2, 0x92, 0x3e, 0xf0, 0x3a, 0xd8, 0x8d,
	0x7d, 0x05, 0x6e, 0xf3, 0x15, 0xcc, 0x1c, 0xf0, 0x66, 0x5b, 0xe0, 0x31, 0xbc, 0xe6, 0xdb, 0x3b,
	0xe4, 0x77, 0xef, 0x90, 0x8f, 0x77, 0xc8, 0xdf, 0x51, 0x32, 0xd9, 0x66, 0xdd, 0xf6, 0xfe, 0xfb,
	0x78, 0xf1, 0x4e, 0x43, 0x66, 0xdd, 0x72, 0x44, 0x6a, 0x9f, 0xe1, 0x85, 0xb3, 0x3f, 0x2b, 0x3a,
	0x7e, 0xc4, 0xb2, 0x4e, 0x4b, 0x68, 0x23, 0x08, 0x6c, 0x62, 0xef, 0x06, 0xb6, 0xc2, 0x36, 0x4f,
	0x12, 0x11, 0x9b, 0xf2, 0x7c, 0x20, 0x75, 0x96, 0x17, 0xe2, 0x33, 0x2c, 0xd4, 0xc8, 0x32, 0x02,
	0xde, 0x87, 0xe9, 0xa6, 0xd4, 0x19, 0x9e, 0xcb, 0xad, 0xe2, 0x73, 0x19, 0x48, 0x10, 0x18, 0x89,
	0xb7, 0x85, 0x3b, 0xbf, 0x2f, 0xb2, 0x5d, 0xdb, 0xf0, 0x3b, 0xdd, 0xc6, 0x2d, 0xaf, 0xd6, 0x3a,
	0x32, 0x8d, 0x08, 0x91, 0x69, 0x01, 0x66, 0x22, 0x73, 0x21, 0xac, 0xce, 0x0e, 0xd6, 0xfe, 0x98,
	0x87, 0x19, 0x23, 0xa3, 0xdf, 0x11, 0x98, 0xb5, 0xa6, 0x40, 0x97, 0x8b, 0x81, 0x47, 0xbd, 0xc8,
	0x59, 0x99, 0x30, 0xda, 0x72, 0x78, 0xb5, 0x6f, 0xff, 0xfc, 0xf7, 0x87, 0x4b, 0x1e, 0xad, 0xb2,
	0x12, 0xc7, 0xa5, 0x3f, 0x12, 0xb8, 0xd2, 0x33, 0x1c, 0xca, 0x4a, 0xb6, 0x19, 0xf6, 0x2c, 0x67,
	0x75, 0x72, 0x01, 0xa2, 0x2d, 0x1b, 0xb4, 0xdb, 0xf4, 0x66, 0x31, 0x9a, 0xa9, 0x76, 0x1c, 0xca,
	0x58, 0xd3, 0xff, 0x08, 0xbc, 0x78, 0xd6, 0x2a, 0xe8, 0x7a, 0x59, 0x29, 0xc6, 0x39, 0xa1, 0xb3,
	0x71, 0x41, 0x15, 0xd2, 0x3e, 0x32, 0xb4, 0x82, 0x46, 0xac, 0xf4, 0x9b, 0x14, 0xc6, 0x46, 0xca,
	0x0e, 0xb1, 0x59, 0x8e, 0xd8, 0xe1, 0xa0, 0x9b, 0x1e, 0xb1, 0xc3, 0xbe, 0x75, 0x1e, 0xb1, 0x43,
	0xeb, 0x95, 0x66, 0xd6, 0x5e, 0xde, 0x23, 0xfa, 0x3b, 0x01, 0x3a, 0x6a, 0x4b, 0xf4, 0xcd, 0x12,
	0xf4, 0x42, 0xaf, 0x73, 0xee, 0x3f, 0x83, 0x12, 0x5f, 0x7c, 0xd3, 0xbc, 0xf8, 0x2a, 0xf5, 0x8b,
	0x5f, 0xbc, 0x6f, 0x6e, 0x61, 0xa6, 0xc2, 0xd8, 0xc2, 0xfe, 0x4a, 0xe0, 0xa5, 0x61, 0xeb, 0xa2,
	0x9b, 0xa5, 0x1c, 0x63, 0xbd, 0xd0, 0xd9, 0xba, 0xb0, 0x0e, 0xe9, 0xd7, 0x0d, 0xbd, 0x4f, 0x97,
	0xcf, 0xa3, 0x6f, 0xf2, 0x4e, 0xf8, 0x40, 0x88, 0x30, 0x3f, 0x00, 0xfa, 0x13, 0x81, 0xb9, 0x3c,
	0x25, 0xf5, 0x27, 0xde, 0xdb, 0xb2, 0xb2, 0x89, 0xe3, 0x91, 0x71, 0xc3, 0x30, 0x32, 0xba, 0x32,
	0x01, 0x63, 0xbf, 0xa9, 0xe8, 0x2f, 0x04, 0xae, 0x0e, 0x59, 0x22, 0x2d, 0x6b, 0xee, 0xf1, 0x0e,
	0xeb, 0x6c, 0x5e, 0x54, 0x86, 0xe4, 0xf7, 0x0c, 0xf9, 0x0a, 0x5d, 0x2a, 0x26, 0xaf, 0x1b, 0xa9,
	0x6d, 0x8a, 0xb0, 0xeb, 0xb9, 0xf4, 0x37, 0x02, 0x57, 0x87, 0x6c, 0xb3, 0x94, 0x7b, 0xbc, 0x3f,
	0x97, 0x72, 0x17, 0xb8, 0xb3, 0xf7, 0xb6, 0xe1, 0xde, 0xa2, 0x1b, 0xec, 0x9c, 0xff, 0x8d, 0x59,
	0x88, 0xb7, 0x36, 0x34, 0xe6, 0xdd, 0xaf, 0xfc, 0xf6, 0xbb, 0x4f, 0x4e, 0x5c, 0xf2, 0xf4, 0xc4,
	0x25, 0xff, 0x9c, 0xb8, 0xe4, 0xfb, 0x53, 0x77, 0xea, 0xe9, 0xa9, 0x3b, 0xf5, 0xd7, 0xa9, 0x3b,
	0xf5, 0xf9, 0xd2, 0xc0, 0x97, 0x6f, 0x34, 0xf5, 0xd7, 0x79, 0x72, 0xf3, 0x09, 0xac, 0xcf, 0x9a,
	0xff, 0x9c, 0xf7, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xad, 0xa3, 0x6c, 0xad, 0x0b, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of ChaindIds items.
	ChaindIds(ctx context.Context, in *QueryChaindIdsRequest, opts ...grpc.CallOption) (*QueryChaindIdsResponse, error)
	// Queries a list of ProposalDetail items.
	ProposalDetail(ctx context.Context, in *QueryProposalDetailRequest, opts ...grpc.CallOption) (*QueryProposalDetailResponse, error)
	// Queries a list of ResourceidToDenoms items.
	ResourceidToDenoms(ctx context.Context, in *QueryResourceidToDenomsRequest, opts ...grpc.CallOption) (*QueryResourceidToDenomsResponse, error)
	// Queries a list of RelayFeeReceiver items.
	RelayFeeReceiver(ctx context.Context, in *QueryRelayFeeReceiverRequest, opts ...grpc.CallOption) (*QueryRelayFeeReceiverResponse, error)
	// Queries a list of RelayFee items.
	RelayFee(ctx context.Context, in *QueryRelayFeeRequest, opts ...grpc.CallOption) (*QueryRelayFeeResponse, error)
	// Queries a list of BannedDenomList items.
	BannedDenomList(ctx context.Context, in *QueryBannedDenomListRequest, opts ...grpc.CallOption) (*QueryBannedDenomListResponse, error)
	// Queries a list of GetDepositCount items.
	GetDepositCount(ctx context.Context, in *QueryGetDepositCountRequest, opts ...grpc.CallOption) (*QueryGetDepositCountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.bridge.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChaindIds(ctx context.Context, in *QueryChaindIdsRequest, opts ...grpc.CallOption) (*QueryChaindIdsResponse, error) {
	out := new(QueryChaindIdsResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.bridge.Query/ChaindIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposalDetail(ctx context.Context, in *QueryProposalDetailRequest, opts ...grpc.CallOption) (*QueryProposalDetailResponse, error) {
	out := new(QueryProposalDetailResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.bridge.Query/ProposalDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ResourceidToDenoms(ctx context.Context, in *QueryResourceidToDenomsRequest, opts ...grpc.CallOption) (*QueryResourceidToDenomsResponse, error) {
	out := new(QueryResourceidToDenomsResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.bridge.Query/ResourceidToDenoms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RelayFeeReceiver(ctx context.Context, in *QueryRelayFeeReceiverRequest, opts ...grpc.CallOption) (*QueryRelayFeeReceiverResponse, error) {
	out := new(QueryRelayFeeReceiverResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.bridge.Query/RelayFeeReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RelayFee(ctx context.Context, in *QueryRelayFeeRequest, opts ...grpc.CallOption) (*QueryRelayFeeResponse, error) {
	out := new(QueryRelayFeeResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.bridge.Query/RelayFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BannedDenomList(ctx context.Context, in *QueryBannedDenomListRequest, opts ...grpc.CallOption) (*QueryBannedDenomListResponse, error) {
	out := new(QueryBannedDenomListResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.bridge.Query/BannedDenomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDepositCount(ctx context.Context, in *QueryGetDepositCountRequest, opts ...grpc.CallOption) (*QueryGetDepositCountResponse, error) {
	out := new(QueryGetDepositCountResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.bridge.Query/GetDepositCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of ChaindIds items.
	ChaindIds(context.Context, *QueryChaindIdsRequest) (*QueryChaindIdsResponse, error)
	// Queries a list of ProposalDetail items.
	ProposalDetail(context.Context, *QueryProposalDetailRequest) (*QueryProposalDetailResponse, error)
	// Queries a list of ResourceidToDenoms items.
	ResourceidToDenoms(context.Context, *QueryResourceidToDenomsRequest) (*QueryResourceidToDenomsResponse, error)
	// Queries a list of RelayFeeReceiver items.
	RelayFeeReceiver(context.Context, *QueryRelayFeeReceiverRequest) (*QueryRelayFeeReceiverResponse, error)
	// Queries a list of RelayFee items.
	RelayFee(context.Context, *QueryRelayFeeRequest) (*QueryRelayFeeResponse, error)
	// Queries a list of BannedDenomList items.
	BannedDenomList(context.Context, *QueryBannedDenomListRequest) (*QueryBannedDenomListResponse, error)
	// Queries a list of GetDepositCount items.
	GetDepositCount(context.Context, *QueryGetDepositCountRequest) (*QueryGetDepositCountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ChaindIds(ctx context.Context, req *QueryChaindIdsRequest) (*QueryChaindIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChaindIds not implemented")
}
func (*UnimplementedQueryServer) ProposalDetail(ctx context.Context, req *QueryProposalDetailRequest) (*QueryProposalDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalDetail not implemented")
}
func (*UnimplementedQueryServer) ResourceidToDenoms(ctx context.Context, req *QueryResourceidToDenomsRequest) (*QueryResourceidToDenomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceidToDenoms not implemented")
}
func (*UnimplementedQueryServer) RelayFeeReceiver(ctx context.Context, req *QueryRelayFeeReceiverRequest) (*QueryRelayFeeReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayFeeReceiver not implemented")
}
func (*UnimplementedQueryServer) RelayFee(ctx context.Context, req *QueryRelayFeeRequest) (*QueryRelayFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayFee not implemented")
}
func (*UnimplementedQueryServer) BannedDenomList(ctx context.Context, req *QueryBannedDenomListRequest) (*QueryBannedDenomListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannedDenomList not implemented")
}
func (*UnimplementedQueryServer) GetDepositCount(ctx context.Context, req *QueryGetDepositCountRequest) (*QueryGetDepositCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositCount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.bridge.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChaindIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChaindIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChaindIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.bridge.Query/ChaindIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChaindIds(ctx, req.(*QueryChaindIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposalDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposalDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposalDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.bridge.Query/ProposalDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposalDetail(ctx, req.(*QueryProposalDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ResourceidToDenoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResourceidToDenomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResourceidToDenoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.bridge.Query/ResourceidToDenoms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResourceidToDenoms(ctx, req.(*QueryResourceidToDenomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RelayFeeReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRelayFeeReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RelayFeeReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.bridge.Query/RelayFeeReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RelayFeeReceiver(ctx, req.(*QueryRelayFeeReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RelayFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRelayFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RelayFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.bridge.Query/RelayFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RelayFee(ctx, req.(*QueryRelayFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BannedDenomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBannedDenomListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BannedDenomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.bridge.Query/BannedDenomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BannedDenomList(ctx, req.(*QueryBannedDenomListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDepositCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDepositCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDepositCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.bridge.Query/GetDepositCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDepositCount(ctx, req.(*QueryGetDepositCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stafihub.stafihub.bridge.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ChaindIds",
			Handler:    _Query_ChaindIds_Handler,
		},
		{
			MethodName: "ProposalDetail",
			Handler:    _Query_ProposalDetail_Handler,
		},
		{
			MethodName: "ResourceidToDenoms",
			Handler:    _Query_ResourceidToDenoms_Handler,
		},
		{
			MethodName: "RelayFeeReceiver",
			Handler:    _Query_RelayFeeReceiver_Handler,
		},
		{
			MethodName: "RelayFee",
			Handler:    _Query_RelayFee_Handler,
		},
		{
			MethodName: "BannedDenomList",
			Handler:    _Query_BannedDenomList_Handler,
		},
		{
			MethodName: "GetDepositCount",
			Handler:    _Query_GetDepositCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stafihub/stafihub/bridge/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryChaindIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChaindIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChaindIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryChaindIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChaindIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChaindIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		dAtA3 := make([]byte, len(m.ChainId)*10)
		var j2 int
		for _, num := range m.ChainId {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintQuery(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProposalDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposalDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposalDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DepositNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DepositNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProposalDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposalDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposalDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResourceidToDenomsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResourceidToDenomsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResourceidToDenomsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryResourceidToDenomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResourceidToDenomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResourceidToDenomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResourceidToDenoms) > 0 {
		for iNdEx := len(m.ResourceidToDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceidToDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRelayFeeReceiverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRelayFeeReceiverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRelayFeeReceiverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRelayFeeReceiverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRelayFeeReceiverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRelayFeeReceiverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRelayFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRelayFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRelayFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRelayFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRelayFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRelayFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBannedDenomListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBannedDenomListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBannedDenomListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBannedDenomListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBannedDenomListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBannedDenomListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDepositCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDepositCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDepositCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDepositCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDepositCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDepositCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryChaindIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryChaindIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		l = 0
		for _, e := range m.ChainId {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryProposalDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.DepositNonce != 0 {
		n += 1 + sovQuery(uint64(m.DepositNonce))
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProposalDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResourceidToDenomsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryResourceidToDenomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResourceidToDenoms) > 0 {
		for _, e := range m.ResourceidToDenoms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRelayFeeReceiverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRelayFeeReceiverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRelayFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryRelayFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Value.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBannedDenomListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBannedDenomListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetDepositCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryGetDepositCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChaindIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChaindIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChaindIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChaindIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChaindIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChaindIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChainId = append(m.ChainId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChainId) == 0 {
					m.ChainId = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChainId = append(m.ChainId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposalDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposalDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposalDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositNonce", wireType)
			}
			m.DepositNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposalDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposalDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposalDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &Proposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResourceidToDenomsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResourceidToDenomsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResourceidToDenomsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResourceidToDenomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResourceidToDenomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResourceidToDenomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceidToDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceidToDenoms = append(m.ResourceidToDenoms, &ResourceIdToDenom{})
			if err := m.ResourceidToDenoms[len(m.ResourceidToDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRelayFeeReceiverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRelayFeeReceiverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRelayFeeReceiverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRelayFeeReceiverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRelayFeeReceiverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRelayFeeReceiverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRelayFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRelayFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRelayFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRelayFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRelayFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRelayFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBannedDenomListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBannedDenomListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBannedDenomListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBannedDenomListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBannedDenomListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBannedDenomListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &BannedDenom{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDepositCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDepositCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDepositCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDepositCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDepositCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDepositCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
