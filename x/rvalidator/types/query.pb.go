// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stafihub/stafihub/rvalidator/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6495041ecb95e94, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6495041ecb95e94, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryRValidatorListRequest struct {
	Denom       string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	PoolAddress string `protobuf:"bytes,2,opt,name=poolAddress,proto3" json:"poolAddress,omitempty"`
}

func (m *QueryRValidatorListRequest) Reset()         { *m = QueryRValidatorListRequest{} }
func (m *QueryRValidatorListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRValidatorListRequest) ProtoMessage()    {}
func (*QueryRValidatorListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6495041ecb95e94, []int{2}
}
func (m *QueryRValidatorListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRValidatorListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRValidatorListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRValidatorListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRValidatorListRequest.Merge(m, src)
}
func (m *QueryRValidatorListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRValidatorListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRValidatorListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRValidatorListRequest proto.InternalMessageInfo

func (m *QueryRValidatorListRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryRValidatorListRequest) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

type QueryRValidatorListResponse struct {
	RValidatorList []string `protobuf:"bytes,1,rep,name=rValidatorList,proto3" json:"rValidatorList,omitempty"`
}

func (m *QueryRValidatorListResponse) Reset()         { *m = QueryRValidatorListResponse{} }
func (m *QueryRValidatorListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRValidatorListResponse) ProtoMessage()    {}
func (*QueryRValidatorListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6495041ecb95e94, []int{3}
}
func (m *QueryRValidatorListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRValidatorListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRValidatorListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRValidatorListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRValidatorListResponse.Merge(m, src)
}
func (m *QueryRValidatorListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRValidatorListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRValidatorListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRValidatorListResponse proto.InternalMessageInfo

func (m *QueryRValidatorListResponse) GetRValidatorList() []string {
	if m != nil {
		return m.RValidatorList
	}
	return nil
}

type QueryCycleSecondsRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryCycleSecondsRequest) Reset()         { *m = QueryCycleSecondsRequest{} }
func (m *QueryCycleSecondsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCycleSecondsRequest) ProtoMessage()    {}
func (*QueryCycleSecondsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6495041ecb95e94, []int{4}
}
func (m *QueryCycleSecondsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCycleSecondsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCycleSecondsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCycleSecondsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCycleSecondsRequest.Merge(m, src)
}
func (m *QueryCycleSecondsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCycleSecondsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCycleSecondsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCycleSecondsRequest proto.InternalMessageInfo

func (m *QueryCycleSecondsRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryCycleSecondsResponse struct {
	CycleSeconds *CycleSeconds `protobuf:"bytes,1,opt,name=cycleSeconds,proto3" json:"cycleSeconds,omitempty"`
}

func (m *QueryCycleSecondsResponse) Reset()         { *m = QueryCycleSecondsResponse{} }
func (m *QueryCycleSecondsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCycleSecondsResponse) ProtoMessage()    {}
func (*QueryCycleSecondsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6495041ecb95e94, []int{5}
}
func (m *QueryCycleSecondsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCycleSecondsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCycleSecondsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCycleSecondsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCycleSecondsResponse.Merge(m, src)
}
func (m *QueryCycleSecondsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCycleSecondsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCycleSecondsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCycleSecondsResponse proto.InternalMessageInfo

func (m *QueryCycleSecondsResponse) GetCycleSeconds() *CycleSeconds {
	if m != nil {
		return m.CycleSeconds
	}
	return nil
}

type QueryShuffleSecondsRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryShuffleSecondsRequest) Reset()         { *m = QueryShuffleSecondsRequest{} }
func (m *QueryShuffleSecondsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShuffleSecondsRequest) ProtoMessage()    {}
func (*QueryShuffleSecondsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6495041ecb95e94, []int{6}
}
func (m *QueryShuffleSecondsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShuffleSecondsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShuffleSecondsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShuffleSecondsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShuffleSecondsRequest.Merge(m, src)
}
func (m *QueryShuffleSecondsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShuffleSecondsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShuffleSecondsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShuffleSecondsRequest proto.InternalMessageInfo

func (m *QueryShuffleSecondsRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryShuffleSecondsResponse struct {
	ShuffleSeconds *ShuffleSeconds `protobuf:"bytes,1,opt,name=shuffleSeconds,proto3" json:"shuffleSeconds,omitempty"`
}

func (m *QueryShuffleSecondsResponse) Reset()         { *m = QueryShuffleSecondsResponse{} }
func (m *QueryShuffleSecondsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShuffleSecondsResponse) ProtoMessage()    {}
func (*QueryShuffleSecondsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6495041ecb95e94, []int{7}
}
func (m *QueryShuffleSecondsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShuffleSecondsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShuffleSecondsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShuffleSecondsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShuffleSecondsResponse.Merge(m, src)
}
func (m *QueryShuffleSecondsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShuffleSecondsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShuffleSecondsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShuffleSecondsResponse proto.InternalMessageInfo

func (m *QueryShuffleSecondsResponse) GetShuffleSeconds() *ShuffleSeconds {
	if m != nil {
		return m.ShuffleSeconds
	}
	return nil
}

type QueryLatestVotedCycleRequest struct {
	Denom       string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	PoolAddress string `protobuf:"bytes,2,opt,name=poolAddress,proto3" json:"poolAddress,omitempty"`
}

func (m *QueryLatestVotedCycleRequest) Reset()         { *m = QueryLatestVotedCycleRequest{} }
func (m *QueryLatestVotedCycleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestVotedCycleRequest) ProtoMessage()    {}
func (*QueryLatestVotedCycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6495041ecb95e94, []int{8}
}
func (m *QueryLatestVotedCycleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestVotedCycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestVotedCycleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestVotedCycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestVotedCycleRequest.Merge(m, src)
}
func (m *QueryLatestVotedCycleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestVotedCycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestVotedCycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestVotedCycleRequest proto.InternalMessageInfo

func (m *QueryLatestVotedCycleRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryLatestVotedCycleRequest) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

type QueryLatestVotedCycleResponse struct {
	LatestVotedCycle *Cycle `protobuf:"bytes,1,opt,name=latestVotedCycle,proto3" json:"latestVotedCycle,omitempty"`
}

func (m *QueryLatestVotedCycleResponse) Reset()         { *m = QueryLatestVotedCycleResponse{} }
func (m *QueryLatestVotedCycleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestVotedCycleResponse) ProtoMessage()    {}
func (*QueryLatestVotedCycleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6495041ecb95e94, []int{9}
}
func (m *QueryLatestVotedCycleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestVotedCycleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestVotedCycleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestVotedCycleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestVotedCycleResponse.Merge(m, src)
}
func (m *QueryLatestVotedCycleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestVotedCycleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestVotedCycleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestVotedCycleResponse proto.InternalMessageInfo

func (m *QueryLatestVotedCycleResponse) GetLatestVotedCycle() *Cycle {
	if m != nil {
		return m.LatestVotedCycle
	}
	return nil
}

type QueryLatestDealedCycleRequest struct {
	Denom       string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	PoolAddress string `protobuf:"bytes,2,opt,name=poolAddress,proto3" json:"poolAddress,omitempty"`
}

func (m *QueryLatestDealedCycleRequest) Reset()         { *m = QueryLatestDealedCycleRequest{} }
func (m *QueryLatestDealedCycleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestDealedCycleRequest) ProtoMessage()    {}
func (*QueryLatestDealedCycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6495041ecb95e94, []int{10}
}
func (m *QueryLatestDealedCycleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestDealedCycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestDealedCycleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestDealedCycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestDealedCycleRequest.Merge(m, src)
}
func (m *QueryLatestDealedCycleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestDealedCycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestDealedCycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestDealedCycleRequest proto.InternalMessageInfo

func (m *QueryLatestDealedCycleRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryLatestDealedCycleRequest) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

type QueryLatestDealedCycleResponse struct {
	LatestDealedCycle *Cycle `protobuf:"bytes,1,opt,name=latestDealedCycle,proto3" json:"latestDealedCycle,omitempty"`
}

func (m *QueryLatestDealedCycleResponse) Reset()         { *m = QueryLatestDealedCycleResponse{} }
func (m *QueryLatestDealedCycleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestDealedCycleResponse) ProtoMessage()    {}
func (*QueryLatestDealedCycleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6495041ecb95e94, []int{11}
}
func (m *QueryLatestDealedCycleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestDealedCycleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestDealedCycleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestDealedCycleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestDealedCycleResponse.Merge(m, src)
}
func (m *QueryLatestDealedCycleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestDealedCycleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestDealedCycleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestDealedCycleResponse proto.InternalMessageInfo

func (m *QueryLatestDealedCycleResponse) GetLatestDealedCycle() *Cycle {
	if m != nil {
		return m.LatestDealedCycle
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "stafihub.stafihub.rvalidator.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "stafihub.stafihub.rvalidator.QueryParamsResponse")
	proto.RegisterType((*QueryRValidatorListRequest)(nil), "stafihub.stafihub.rvalidator.QueryRValidatorListRequest")
	proto.RegisterType((*QueryRValidatorListResponse)(nil), "stafihub.stafihub.rvalidator.QueryRValidatorListResponse")
	proto.RegisterType((*QueryCycleSecondsRequest)(nil), "stafihub.stafihub.rvalidator.QueryCycleSecondsRequest")
	proto.RegisterType((*QueryCycleSecondsResponse)(nil), "stafihub.stafihub.rvalidator.QueryCycleSecondsResponse")
	proto.RegisterType((*QueryShuffleSecondsRequest)(nil), "stafihub.stafihub.rvalidator.QueryShuffleSecondsRequest")
	proto.RegisterType((*QueryShuffleSecondsResponse)(nil), "stafihub.stafihub.rvalidator.QueryShuffleSecondsResponse")
	proto.RegisterType((*QueryLatestVotedCycleRequest)(nil), "stafihub.stafihub.rvalidator.QueryLatestVotedCycleRequest")
	proto.RegisterType((*QueryLatestVotedCycleResponse)(nil), "stafihub.stafihub.rvalidator.QueryLatestVotedCycleResponse")
	proto.RegisterType((*QueryLatestDealedCycleRequest)(nil), "stafihub.stafihub.rvalidator.QueryLatestDealedCycleRequest")
	proto.RegisterType((*QueryLatestDealedCycleResponse)(nil), "stafihub.stafihub.rvalidator.QueryLatestDealedCycleResponse")
}

func init() {
	proto.RegisterFile("stafihub/stafihub/rvalidator/query.proto", fileDescriptor_b6495041ecb95e94)
}

var fileDescriptor_b6495041ecb95e94 = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x4f, 0xd4, 0x4e,
	0x18, 0xde, 0xf2, 0xfb, 0x41, 0xc2, 0x0b, 0xd9, 0xc0, 0xc8, 0x61, 0xad, 0x58, 0x49, 0x25, 0x04,
	0x09, 0xd9, 0xf2, 0x27, 0x88, 0x8a, 0x1e, 0x44, 0x44, 0x49, 0x08, 0xc8, 0x42, 0x30, 0x7a, 0xd9,
	0xcc, 0x6e, 0x87, 0xd2, 0xd8, 0xed, 0x94, 0xce, 0x2c, 0x91, 0x10, 0x2e, 0x7e, 0x02, 0x13, 0x8f,
	0x7e, 0x15, 0x2f, 0x26, 0x1e, 0x38, 0x92, 0x70, 0x31, 0x31, 0x51, 0x03, 0x7e, 0x10, 0xb3, 0xd3,
	0x61, 0xdd, 0x76, 0xbb, 0x93, 0x82, 0xde, 0x66, 0x67, 0xde, 0xe7, 0x79, 0x9f, 0xe7, 0x9d, 0xce,
	0x93, 0x85, 0x71, 0xc6, 0xf1, 0x8e, 0xbb, 0x5b, 0xaf, 0x58, 0xcd, 0x45, 0xb8, 0x8f, 0x3d, 0xd7,
	0xc6, 0x9c, 0x86, 0xd6, 0x5e, 0x9d, 0x84, 0x07, 0xc5, 0x20, 0xa4, 0x9c, 0xa2, 0xe1, 0x8b, 0x82,
	0x62, 0x73, 0xf1, 0xa7, 0x52, 0x1f, 0x72, 0xa8, 0x43, 0x45, 0xa1, 0xd5, 0x58, 0x45, 0x18, 0x7d,
	0xd8, 0xa1, 0xd4, 0xf1, 0x88, 0x85, 0x03, 0xd7, 0xc2, 0xbe, 0x4f, 0x39, 0xe6, 0x2e, 0xf5, 0x99,
	0x3c, 0x9d, 0xa8, 0x52, 0x56, 0xa3, 0xcc, 0xaa, 0x60, 0x46, 0xa2, 0x56, 0xd6, 0xfe, 0x74, 0x85,
	0x70, 0x3c, 0x6d, 0x05, 0xd8, 0x71, 0x7d, 0x51, 0x2c, 0x6b, 0xef, 0x28, 0x75, 0x06, 0x38, 0xc4,
	0xb5, 0x26, 0xad, 0xb2, 0xd4, 0x21, 0x3e, 0x61, 0xae, 0xac, 0x35, 0x87, 0x00, 0x6d, 0x34, 0x1a,
	0xbf, 0x10, 0x04, 0x25, 0xb2, 0x57, 0x27, 0x8c, 0x9b, 0xaf, 0xe0, 0x5a, 0x6c, 0x97, 0x05, 0xd4,
	0x67, 0x04, 0x2d, 0x42, 0x4f, 0xd4, 0xa8, 0xa0, 0x8d, 0x68, 0xe3, 0x7d, 0x33, 0xa3, 0x45, 0xd5,
	0x48, 0x8a, 0x11, 0x7a, 0xf1, 0xff, 0xe3, 0xef, 0xb7, 0x72, 0x25, 0x89, 0x34, 0xb7, 0x40, 0x17,
	0xd4, 0xa5, 0xed, 0x8b, 0xba, 0x55, 0x97, 0x71, 0xd9, 0x18, 0x0d, 0x41, 0xb7, 0x4d, 0x7c, 0x5a,
	0x13, 0x0d, 0x7a, 0x4b, 0xd1, 0x0f, 0x34, 0x02, 0x7d, 0x01, 0xa5, 0xde, 0x63, 0xdb, 0x0e, 0x09,
	0x63, 0x85, 0x2e, 0x71, 0xd6, 0xba, 0x65, 0x3e, 0x85, 0x1b, 0xa9, 0xac, 0x52, 0xf8, 0x18, 0xe4,
	0xc3, 0xd8, 0x49, 0x41, 0x1b, 0xf9, 0x6f, 0xbc, 0xb7, 0x94, 0xd8, 0x35, 0xa7, 0xa0, 0x20, 0x68,
	0x9e, 0x1c, 0x54, 0x3d, 0xb2, 0x49, 0xaa, 0xd4, 0xb7, 0x99, 0x52, 0x9a, 0xf9, 0x06, 0xae, 0xa7,
	0x20, 0x64, 0xdb, 0x35, 0xe8, 0xaf, 0xb6, 0xec, 0xcb, 0xa9, 0x4d, 0xa8, 0xa7, 0x16, 0x63, 0x8a,
	0xe1, 0xcd, 0x19, 0x39, 0xbb, 0xcd, 0xdd, 0xfa, 0xce, 0x4e, 0x46, 0x81, 0x4c, 0x4e, 0x26, 0x89,
	0x91, 0x12, 0xb7, 0x20, 0xcf, 0x62, 0x27, 0x52, 0xe4, 0xa4, 0x5a, 0x64, 0x82, 0x2d, 0xc1, 0x61,
	0x6e, 0xc3, 0xb0, 0x68, 0xba, 0x8a, 0x39, 0x61, 0x7c, 0x9b, 0x72, 0x62, 0x0b, 0x5b, 0x7f, 0x7b,
	0xcd, 0x01, 0xdc, 0xec, 0xc0, 0x2b, 0xed, 0xac, 0xc3, 0x80, 0x97, 0x38, 0x93, 0x86, 0x6e, 0x67,
	0x98, 0x7a, 0xa9, 0x0d, 0x6c, 0xbe, 0x8c, 0x75, 0x5c, 0x22, 0xd8, 0xfb, 0x47, 0x56, 0x18, 0x18,
	0x9d, 0x88, 0xa5, 0x97, 0x0d, 0x18, 0xf4, 0x92, 0x87, 0x97, 0x31, 0xd3, 0x8e, 0x9e, 0xf9, 0xdc,
	0x0b, 0xdd, 0xa2, 0x2b, 0xfa, 0xa8, 0x41, 0x4f, 0xf4, 0x3e, 0xd1, 0x94, 0x9a, 0xac, 0x3d, 0x1e,
	0xf4, 0xe9, 0x4b, 0x20, 0x22, 0x33, 0xe6, 0xe4, 0xbb, 0xd3, 0x5f, 0x1f, 0xba, 0xc6, 0xd0, 0xa8,
	0x95, 0x21, 0xc7, 0xd0, 0xa9, 0x06, 0xf9, 0xf8, 0x53, 0x46, 0xf7, 0x32, 0xf4, 0x4c, 0xcd, 0x14,
	0xfd, 0xfe, 0x15, 0x90, 0x52, 0xf5, 0xaa, 0x50, 0xbd, 0x8c, 0x96, 0xd4, 0xaa, 0xc3, 0x72, 0x73,
	0x5d, 0xf6, 0x5c, 0xc6, 0xad, 0x43, 0xf1, 0x15, 0x1c, 0x59, 0x87, 0x2d, 0x37, 0x7e, 0x84, 0x3e,
	0x69, 0xd0, 0xdf, 0xfa, 0xba, 0xd1, 0xdd, 0x0c, 0xca, 0x52, 0xa2, 0x48, 0x9f, 0xbf, 0x34, 0x4e,
	0xfa, 0x59, 0x10, 0x7e, 0xe6, 0xd0, 0xac, 0xda, 0x8f, 0x08, 0x9d, 0x32, 0x8b, 0xc0, 0x17, 0x66,
	0xd0, 0x17, 0x0d, 0xf2, 0xf1, 0x77, 0x9f, 0xe9, 0x52, 0x52, 0xc3, 0x2a, 0xd3, 0xa5, 0xa4, 0x47,
	0x96, 0xf9, 0x48, 0x98, 0x98, 0x47, 0x73, 0x6a, 0x13, 0x32, 0x92, 0xda, 0x6c, 0x7c, 0xd3, 0x60,
	0x20, 0x99, 0x1f, 0xe8, 0x41, 0x06, 0x39, 0x1d, 0xc2, 0x4c, 0x5f, 0xb8, 0x12, 0x56, 0x9a, 0x59,
	0x13, 0x66, 0x9e, 0xa3, 0x65, 0xb5, 0x99, 0xe8, 0x29, 0x97, 0xf7, 0x1b, 0x04, 0x65, 0x71, 0x3d,
	0x1d, 0xbe, 0xb1, 0x1f, 0x1a, 0x0c, 0xb6, 0x45, 0x0a, 0xca, 0x2e, 0xb1, 0x3d, 0xe1, 0xf4, 0x87,
	0x57, 0x03, 0x4b, 0x83, 0xeb, 0xc2, 0xe0, 0x0a, 0x7a, 0x96, 0xc9, 0xa0, 0x2d, 0x18, 0x54, 0x0e,
	0x17, 0x57, 0x8e, 0xcf, 0x0c, 0xed, 0xe4, 0xcc, 0xd0, 0x7e, 0x9e, 0x19, 0xda, 0xfb, 0x73, 0x23,
	0x77, 0x72, 0x6e, 0xe4, 0xbe, 0x9e, 0x1b, 0xb9, 0xd7, 0x96, 0xe3, 0xf2, 0x86, 0xb8, 0x2a, 0xad,
	0xa5, 0x34, 0x7b, 0xdb, 0xda, 0x8e, 0x1f, 0x04, 0x84, 0x55, 0x7a, 0xc4, 0x7f, 0xa0, 0xd9, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x84, 0x05, 0xb5, 0x04, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of RValidatorList items.
	RValidatorList(ctx context.Context, in *QueryRValidatorListRequest, opts ...grpc.CallOption) (*QueryRValidatorListResponse, error)
	// Queries a list of CycleSeconds items.
	CycleSeconds(ctx context.Context, in *QueryCycleSecondsRequest, opts ...grpc.CallOption) (*QueryCycleSecondsResponse, error)
	// Queries a list of ShuffleSeconds items.
	ShuffleSeconds(ctx context.Context, in *QueryShuffleSecondsRequest, opts ...grpc.CallOption) (*QueryShuffleSecondsResponse, error)
	// Queries a list of LatestVotedCycle items.
	LatestVotedCycle(ctx context.Context, in *QueryLatestVotedCycleRequest, opts ...grpc.CallOption) (*QueryLatestVotedCycleResponse, error)
	// Queries a list of LatestDealedCycle items.
	LatestDealedCycle(ctx context.Context, in *QueryLatestDealedCycleRequest, opts ...grpc.CallOption) (*QueryLatestDealedCycleResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rvalidator.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RValidatorList(ctx context.Context, in *QueryRValidatorListRequest, opts ...grpc.CallOption) (*QueryRValidatorListResponse, error) {
	out := new(QueryRValidatorListResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rvalidator.Query/RValidatorList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CycleSeconds(ctx context.Context, in *QueryCycleSecondsRequest, opts ...grpc.CallOption) (*QueryCycleSecondsResponse, error) {
	out := new(QueryCycleSecondsResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rvalidator.Query/CycleSeconds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShuffleSeconds(ctx context.Context, in *QueryShuffleSecondsRequest, opts ...grpc.CallOption) (*QueryShuffleSecondsResponse, error) {
	out := new(QueryShuffleSecondsResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rvalidator.Query/ShuffleSeconds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestVotedCycle(ctx context.Context, in *QueryLatestVotedCycleRequest, opts ...grpc.CallOption) (*QueryLatestVotedCycleResponse, error) {
	out := new(QueryLatestVotedCycleResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rvalidator.Query/LatestVotedCycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestDealedCycle(ctx context.Context, in *QueryLatestDealedCycleRequest, opts ...grpc.CallOption) (*QueryLatestDealedCycleResponse, error) {
	out := new(QueryLatestDealedCycleResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rvalidator.Query/LatestDealedCycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of RValidatorList items.
	RValidatorList(context.Context, *QueryRValidatorListRequest) (*QueryRValidatorListResponse, error)
	// Queries a list of CycleSeconds items.
	CycleSeconds(context.Context, *QueryCycleSecondsRequest) (*QueryCycleSecondsResponse, error)
	// Queries a list of ShuffleSeconds items.
	ShuffleSeconds(context.Context, *QueryShuffleSecondsRequest) (*QueryShuffleSecondsResponse, error)
	// Queries a list of LatestVotedCycle items.
	LatestVotedCycle(context.Context, *QueryLatestVotedCycleRequest) (*QueryLatestVotedCycleResponse, error)
	// Queries a list of LatestDealedCycle items.
	LatestDealedCycle(context.Context, *QueryLatestDealedCycleRequest) (*QueryLatestDealedCycleResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) RValidatorList(ctx context.Context, req *QueryRValidatorListRequest) (*QueryRValidatorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RValidatorList not implemented")
}
func (*UnimplementedQueryServer) CycleSeconds(ctx context.Context, req *QueryCycleSecondsRequest) (*QueryCycleSecondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CycleSeconds not implemented")
}
func (*UnimplementedQueryServer) ShuffleSeconds(ctx context.Context, req *QueryShuffleSecondsRequest) (*QueryShuffleSecondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShuffleSeconds not implemented")
}
func (*UnimplementedQueryServer) LatestVotedCycle(ctx context.Context, req *QueryLatestVotedCycleRequest) (*QueryLatestVotedCycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestVotedCycle not implemented")
}
func (*UnimplementedQueryServer) LatestDealedCycle(ctx context.Context, req *QueryLatestDealedCycleRequest) (*QueryLatestDealedCycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestDealedCycle not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rvalidator.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RValidatorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRValidatorListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RValidatorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rvalidator.Query/RValidatorList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RValidatorList(ctx, req.(*QueryRValidatorListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CycleSeconds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCycleSecondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CycleSeconds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rvalidator.Query/CycleSeconds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CycleSeconds(ctx, req.(*QueryCycleSecondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShuffleSeconds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShuffleSecondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShuffleSeconds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rvalidator.Query/ShuffleSeconds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShuffleSeconds(ctx, req.(*QueryShuffleSecondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestVotedCycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestVotedCycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestVotedCycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rvalidator.Query/LatestVotedCycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestVotedCycle(ctx, req.(*QueryLatestVotedCycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestDealedCycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestDealedCycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestDealedCycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rvalidator.Query/LatestDealedCycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestDealedCycle(ctx, req.(*QueryLatestDealedCycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stafihub.stafihub.rvalidator.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "RValidatorList",
			Handler:    _Query_RValidatorList_Handler,
		},
		{
			MethodName: "CycleSeconds",
			Handler:    _Query_CycleSeconds_Handler,
		},
		{
			MethodName: "ShuffleSeconds",
			Handler:    _Query_ShuffleSeconds_Handler,
		},
		{
			MethodName: "LatestVotedCycle",
			Handler:    _Query_LatestVotedCycle_Handler,
		},
		{
			MethodName: "LatestDealedCycle",
			Handler:    _Query_LatestDealedCycle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stafihub/stafihub/rvalidator/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRValidatorListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRValidatorListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRValidatorListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRValidatorListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRValidatorListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRValidatorListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RValidatorList) > 0 {
		for iNdEx := len(m.RValidatorList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RValidatorList[iNdEx])
			copy(dAtA[i:], m.RValidatorList[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.RValidatorList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCycleSecondsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCycleSecondsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCycleSecondsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCycleSecondsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCycleSecondsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCycleSecondsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CycleSeconds != nil {
		{
			size, err := m.CycleSeconds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShuffleSecondsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShuffleSecondsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShuffleSecondsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShuffleSecondsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShuffleSecondsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShuffleSecondsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShuffleSeconds != nil {
		{
			size, err := m.ShuffleSeconds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestVotedCycleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestVotedCycleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestVotedCycleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestVotedCycleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestVotedCycleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestVotedCycleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestVotedCycle != nil {
		{
			size, err := m.LatestVotedCycle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestDealedCycleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestDealedCycleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestDealedCycleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestDealedCycleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestDealedCycleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestDealedCycleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestDealedCycle != nil {
		{
			size, err := m.LatestDealedCycle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRValidatorListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRValidatorListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RValidatorList) > 0 {
		for _, s := range m.RValidatorList {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCycleSecondsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCycleSecondsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CycleSeconds != nil {
		l = m.CycleSeconds.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShuffleSecondsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShuffleSecondsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShuffleSeconds != nil {
		l = m.ShuffleSeconds.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestVotedCycleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestVotedCycleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestVotedCycle != nil {
		l = m.LatestVotedCycle.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestDealedCycleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestDealedCycleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestDealedCycle != nil {
		l = m.LatestDealedCycle.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRValidatorListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRValidatorListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRValidatorListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRValidatorListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRValidatorListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRValidatorListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RValidatorList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RValidatorList = append(m.RValidatorList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCycleSecondsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCycleSecondsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCycleSecondsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCycleSecondsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCycleSecondsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCycleSecondsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleSeconds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CycleSeconds == nil {
				m.CycleSeconds = &CycleSeconds{}
			}
			if err := m.CycleSeconds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShuffleSecondsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShuffleSecondsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShuffleSecondsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShuffleSecondsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShuffleSecondsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShuffleSecondsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShuffleSeconds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShuffleSeconds == nil {
				m.ShuffleSeconds = &ShuffleSeconds{}
			}
			if err := m.ShuffleSeconds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestVotedCycleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestVotedCycleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestVotedCycleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestVotedCycleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestVotedCycleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestVotedCycleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestVotedCycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestVotedCycle == nil {
				m.LatestVotedCycle = &Cycle{}
			}
			if err := m.LatestVotedCycle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestDealedCycleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestDealedCycleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestDealedCycleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestDealedCycleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestDealedCycleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestDealedCycleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestDealedCycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestDealedCycle == nil {
				m.LatestDealedCycle = &Cycle{}
			}
			if err := m.LatestDealedCycle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
