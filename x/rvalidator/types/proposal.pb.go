// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stafihub/stafihub/rvalidator/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateRValidatorStatus int32

const (
	UpdateRValidatorStatusUnspecified UpdateRValidatorStatus = 0
	UpdateRValidatorStatusSuccess     UpdateRValidatorStatus = 1
	UpdateRValidatorStatusFailed      UpdateRValidatorStatus = 2
)

var UpdateRValidatorStatus_name = map[int32]string{
	0: "UPDATE_RVALIDATOR_STATUS_UNSPECIFIED",
	1: "UPDATE_RVALIDATOR_STATUS_SUCCESS",
	2: "UPDATE_RVALIDATOR_STATUS_FAILED",
}

var UpdateRValidatorStatus_value = map[string]int32{
	"UPDATE_RVALIDATOR_STATUS_UNSPECIFIED": 0,
	"UPDATE_RVALIDATOR_STATUS_SUCCESS":     1,
	"UPDATE_RVALIDATOR_STATUS_FAILED":      2,
}

func (x UpdateRValidatorStatus) String() string {
	return proto.EnumName(UpdateRValidatorStatus_name, int32(x))
}

func (UpdateRValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a75e8cb8055d79a7, []int{0}
}

type UpdateRValidatorProposal struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Denom       string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	PoolAddress string `protobuf:"bytes,3,opt,name=poolAddress,proto3" json:"poolAddress,omitempty"`
	OldAddress  string `protobuf:"bytes,4,opt,name=oldAddress,proto3" json:"oldAddress,omitempty"`
	NewAddress  string `protobuf:"bytes,5,opt,name=newAddress,proto3" json:"newAddress,omitempty"`
	PropId      string `protobuf:"bytes,6,opt,name=propId,proto3" json:"propId,omitempty"`
	Cycle       *Cycle `protobuf:"bytes,7,opt,name=cycle,proto3" json:"cycle,omitempty"`
}

func (m *UpdateRValidatorProposal) Reset()         { *m = UpdateRValidatorProposal{} }
func (m *UpdateRValidatorProposal) String() string { return proto.CompactTextString(m) }
func (*UpdateRValidatorProposal) ProtoMessage()    {}
func (*UpdateRValidatorProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_a75e8cb8055d79a7, []int{0}
}
func (m *UpdateRValidatorProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRValidatorProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRValidatorProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRValidatorProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRValidatorProposal.Merge(m, src)
}
func (m *UpdateRValidatorProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRValidatorProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRValidatorProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRValidatorProposal proto.InternalMessageInfo

func (m *UpdateRValidatorProposal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *UpdateRValidatorProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *UpdateRValidatorProposal) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *UpdateRValidatorProposal) GetOldAddress() string {
	if m != nil {
		return m.OldAddress
	}
	return ""
}

func (m *UpdateRValidatorProposal) GetNewAddress() string {
	if m != nil {
		return m.NewAddress
	}
	return ""
}

func (m *UpdateRValidatorProposal) GetPropId() string {
	if m != nil {
		return m.PropId
	}
	return ""
}

func (m *UpdateRValidatorProposal) GetCycle() *Cycle {
	if m != nil {
		return m.Cycle
	}
	return nil
}

type UpdateRValidatorReportProposal struct {
	Creator     string                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Denom       string                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	PoolAddress string                 `protobuf:"bytes,3,opt,name=poolAddress,proto3" json:"poolAddress,omitempty"`
	PropId      string                 `protobuf:"bytes,4,opt,name=propId,proto3" json:"propId,omitempty"`
	Cycle       *Cycle                 `protobuf:"bytes,5,opt,name=cycle,proto3" json:"cycle,omitempty"`
	Status      UpdateRValidatorStatus `protobuf:"varint,6,opt,name=status,proto3,enum=stafihub.stafihub.rvalidator.UpdateRValidatorStatus" json:"status,omitempty"`
}

func (m *UpdateRValidatorReportProposal) Reset()         { *m = UpdateRValidatorReportProposal{} }
func (m *UpdateRValidatorReportProposal) String() string { return proto.CompactTextString(m) }
func (*UpdateRValidatorReportProposal) ProtoMessage()    {}
func (*UpdateRValidatorReportProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_a75e8cb8055d79a7, []int{1}
}
func (m *UpdateRValidatorReportProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRValidatorReportProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRValidatorReportProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRValidatorReportProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRValidatorReportProposal.Merge(m, src)
}
func (m *UpdateRValidatorReportProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRValidatorReportProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRValidatorReportProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRValidatorReportProposal proto.InternalMessageInfo

func (m *UpdateRValidatorReportProposal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *UpdateRValidatorReportProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *UpdateRValidatorReportProposal) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *UpdateRValidatorReportProposal) GetPropId() string {
	if m != nil {
		return m.PropId
	}
	return ""
}

func (m *UpdateRValidatorReportProposal) GetCycle() *Cycle {
	if m != nil {
		return m.Cycle
	}
	return nil
}

func (m *UpdateRValidatorReportProposal) GetStatus() UpdateRValidatorStatus {
	if m != nil {
		return m.Status
	}
	return UpdateRValidatorStatusUnspecified
}

func init() {
	proto.RegisterEnum("stafihub.stafihub.rvalidator.UpdateRValidatorStatus", UpdateRValidatorStatus_name, UpdateRValidatorStatus_value)
	proto.RegisterType((*UpdateRValidatorProposal)(nil), "stafihub.stafihub.rvalidator.UpdateRValidatorProposal")
	proto.RegisterType((*UpdateRValidatorReportProposal)(nil), "stafihub.stafihub.rvalidator.UpdateRValidatorReportProposal")
}

func init() {
	proto.RegisterFile("stafihub/stafihub/rvalidator/proposal.proto", fileDescriptor_a75e8cb8055d79a7)
}

var fileDescriptor_a75e8cb8055d79a7 = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x41, 0x6b, 0xdb, 0x30,
	0x14, 0xb6, 0xb2, 0x24, 0x65, 0x2a, 0x8c, 0x20, 0x4a, 0x31, 0xa6, 0xd3, 0xdc, 0x6e, 0x83, 0xd2,
	0x41, 0x0c, 0xdd, 0x2e, 0x3b, 0x7a, 0x89, 0x33, 0x0c, 0x61, 0x0d, 0x76, 0xdc, 0xc3, 0x2e, 0xc1,
	0xb5, 0xd4, 0xcc, 0xe0, 0x5a, 0xc2, 0x52, 0xb6, 0xf5, 0x1f, 0x8c, 0x9c, 0x06, 0x3b, 0xe7, 0xb4,
	0x3f, 0xb3, 0x63, 0x8f, 0x3b, 0x8e, 0xe4, 0x87, 0x74, 0x58, 0x8e, 0x9b, 0xd0, 0x39, 0x81, 0x1d,
	0x7a, 0x7b, 0xef, 0xfb, 0xbe, 0xf7, 0x49, 0xef, 0x83, 0x07, 0x5f, 0x09, 0x19, 0x5e, 0xc6, 0x9f,
	0x26, 0x17, 0xd6, 0x5d, 0x91, 0x7d, 0x0e, 0x93, 0x98, 0x84, 0x92, 0x65, 0x16, 0xcf, 0x18, 0x67,
	0x22, 0x4c, 0xda, 0x3c, 0x63, 0x92, 0xa1, 0x83, 0x52, 0xd3, 0xbe, 0x2b, 0x56, 0x62, 0x63, 0x6f,
	0xcc, 0xc6, 0x4c, 0x09, 0xad, 0xbc, 0x2a, 0x66, 0x8c, 0x93, 0xad, 0x0f, 0x8c, 0x69, 0x4a, 0x45,
	0x2c, 0x0a, 0xed, 0xd1, 0x2d, 0x80, 0x7a, 0xc0, 0x49, 0x28, 0xa9, 0x77, 0x5e, 0x4a, 0x06, 0xcb,
	0x2f, 0x20, 0x1d, 0xee, 0x44, 0x19, 0xcd, 0x21, 0x1d, 0x98, 0xe0, 0xf8, 0xb1, 0x57, 0xb6, 0x68,
	0x0f, 0x36, 0x08, 0x4d, 0xd9, 0x95, 0x5e, 0x53, 0x78, 0xd1, 0x20, 0x13, 0xee, 0x72, 0xc6, 0x12,
	0x9b, 0x90, 0x8c, 0x0a, 0xa1, 0x3f, 0x52, 0xdc, 0x3a, 0x84, 0x30, 0x84, 0x2c, 0x21, 0xa5, 0xa0,
	0xae, 0x04, 0x6b, 0x48, 0xce, 0xa7, 0xf4, 0x4b, 0xc9, 0x37, 0x0a, 0x7e, 0x85, 0xa0, 0x7d, 0xd8,
	0xcc, 0x03, 0x72, 0x89, 0xde, 0x54, 0xdc, 0xb2, 0x43, 0x6f, 0x61, 0x23, 0xba, 0x8e, 0x12, 0xaa,
	0xef, 0x98, 0xe0, 0x78, 0xf7, 0xf4, 0x79, 0x7b, 0x5b, 0x6c, 0xed, 0x4e, 0x2e, 0xf5, 0x8a, 0x89,
	0xa3, 0x1f, 0x35, 0x88, 0xef, 0x27, 0xe0, 0x51, 0xce, 0x32, 0xf9, 0x80, 0x39, 0xac, 0xf6, 0xa8,
	0x57, 0xef, 0xd1, 0xf8, 0xdf, 0x3d, 0x50, 0x1f, 0x36, 0x85, 0x0c, 0xe5, 0x44, 0xa8, 0x68, 0x9e,
	0x9c, 0xbe, 0xd9, 0x3e, 0x7b, 0x7f, 0x65, 0x5f, 0xcd, 0x7a, 0x4b, 0x8f, 0x93, 0x5b, 0x00, 0xf7,
	0xab, 0x25, 0xe8, 0x0c, 0xbe, 0x08, 0x06, 0x5d, 0x7b, 0xe8, 0x8c, 0xbc, 0x73, 0xbb, 0xef, 0x76,
	0xed, 0xe1, 0x99, 0x37, 0xf2, 0x87, 0xf6, 0x30, 0xf0, 0x47, 0xc1, 0x07, 0x7f, 0xe0, 0x74, 0xdc,
	0x9e, 0xeb, 0x74, 0x5b, 0x9a, 0xf1, 0x72, 0x3a, 0x33, 0x0f, 0xab, 0x5d, 0x82, 0x54, 0x70, 0x1a,
	0xc5, 0x97, 0x31, 0x25, 0xe8, 0x3d, 0x34, 0x37, 0x1a, 0xfa, 0x41, 0xa7, 0xe3, 0xf8, 0x7e, 0x0b,
	0x18, 0x87, 0xd3, 0x99, 0xf9, 0xb4, 0xda, 0xcc, 0x9f, 0x44, 0x51, 0x9e, 0xaa, 0x03, 0x9f, 0x6d,
	0x34, 0xea, 0xd9, 0x6e, 0xdf, 0xe9, 0xb6, 0x6a, 0x86, 0x39, 0x9d, 0x99, 0x07, 0xd5, 0x3e, 0xbd,
	0x30, 0x4e, 0x28, 0x31, 0xea, 0xdf, 0x7e, 0x62, 0xed, 0x9d, 0xfb, 0x6b, 0x8e, 0xc1, 0xcd, 0x1c,
	0x83, 0x3f, 0x73, 0x0c, 0xbe, 0x2f, 0xb0, 0x76, 0xb3, 0xc0, 0xda, 0xef, 0x05, 0xd6, 0x3e, 0x5a,
	0xe3, 0x58, 0xe6, 0x69, 0x46, 0xec, 0xca, 0xfa, 0xf7, 0xd4, 0xbe, 0xae, 0x1f, 0x9b, 0xbc, 0xe6,
	0x54, 0x5c, 0x34, 0xd5, 0xad, 0xbd, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x71, 0x43, 0x4c, 0x5e,
	0xfa, 0x03, 0x00, 0x00,
}

func (m *UpdateRValidatorProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRValidatorProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRValidatorProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cycle != nil {
		{
			size, err := m.Cycle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NewAddress) > 0 {
		i -= len(m.NewAddress)
		copy(dAtA[i:], m.NewAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.NewAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OldAddress) > 0 {
		i -= len(m.OldAddress)
		copy(dAtA[i:], m.OldAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.OldAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRValidatorReportProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRValidatorReportProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRValidatorReportProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Cycle != nil {
		{
			size, err := m.Cycle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateRValidatorProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.OldAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.NewAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Cycle != nil {
		l = m.Cycle.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *UpdateRValidatorReportProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Cycle != nil {
		l = m.Cycle.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovProposal(uint64(m.Status))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateRValidatorProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRValidatorProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRValidatorProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cycle == nil {
				m.Cycle = &Cycle{}
			}
			if err := m.Cycle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRValidatorReportProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRValidatorReportProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRValidatorReportProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cycle == nil {
				m.Cycle = &Cycle{}
			}
			if err := m.Cycle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= UpdateRValidatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
