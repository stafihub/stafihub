// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rmintreward/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddMintRewardAct struct {
	Creator string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Denom   string             `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Act     *MintRewardActPost `protobuf:"bytes,3,opt,name=act,proto3" json:"act,omitempty"`
}

func (m *MsgAddMintRewardAct) Reset()         { *m = MsgAddMintRewardAct{} }
func (m *MsgAddMintRewardAct) String() string { return proto.CompactTextString(m) }
func (*MsgAddMintRewardAct) ProtoMessage()    {}
func (*MsgAddMintRewardAct) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd96f257662b770, []int{0}
}
func (m *MsgAddMintRewardAct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMintRewardAct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMintRewardAct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMintRewardAct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMintRewardAct.Merge(m, src)
}
func (m *MsgAddMintRewardAct) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMintRewardAct) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMintRewardAct.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMintRewardAct proto.InternalMessageInfo

func (m *MsgAddMintRewardAct) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddMintRewardAct) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgAddMintRewardAct) GetAct() *MintRewardActPost {
	if m != nil {
		return m.Act
	}
	return nil
}

type MsgAddMintRewardActResponse struct {
}

func (m *MsgAddMintRewardActResponse) Reset()         { *m = MsgAddMintRewardActResponse{} }
func (m *MsgAddMintRewardActResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddMintRewardActResponse) ProtoMessage()    {}
func (*MsgAddMintRewardActResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd96f257662b770, []int{1}
}
func (m *MsgAddMintRewardActResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMintRewardActResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMintRewardActResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMintRewardActResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMintRewardActResponse.Merge(m, src)
}
func (m *MsgAddMintRewardActResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMintRewardActResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMintRewardActResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMintRewardActResponse proto.InternalMessageInfo

type MsgUpdateMintRewardAct struct {
	Creator string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Denom   string             `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Cycle   uint64             `protobuf:"varint,3,opt,name=cycle,proto3" json:"cycle"`
	Act     *MintRewardActPost `protobuf:"bytes,4,opt,name=act,proto3" json:"act,omitempty"`
}

func (m *MsgUpdateMintRewardAct) Reset()         { *m = MsgUpdateMintRewardAct{} }
func (m *MsgUpdateMintRewardAct) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMintRewardAct) ProtoMessage()    {}
func (*MsgUpdateMintRewardAct) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd96f257662b770, []int{2}
}
func (m *MsgUpdateMintRewardAct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMintRewardAct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMintRewardAct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMintRewardAct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMintRewardAct.Merge(m, src)
}
func (m *MsgUpdateMintRewardAct) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMintRewardAct) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMintRewardAct.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMintRewardAct proto.InternalMessageInfo

func (m *MsgUpdateMintRewardAct) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateMintRewardAct) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgUpdateMintRewardAct) GetCycle() uint64 {
	if m != nil {
		return m.Cycle
	}
	return 0
}

func (m *MsgUpdateMintRewardAct) GetAct() *MintRewardActPost {
	if m != nil {
		return m.Act
	}
	return nil
}

type MsgUpdateMintRewardActResponse struct {
}

func (m *MsgUpdateMintRewardActResponse) Reset()         { *m = MsgUpdateMintRewardActResponse{} }
func (m *MsgUpdateMintRewardActResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMintRewardActResponse) ProtoMessage()    {}
func (*MsgUpdateMintRewardActResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd96f257662b770, []int{3}
}
func (m *MsgUpdateMintRewardActResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMintRewardActResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMintRewardActResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMintRewardActResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMintRewardActResponse.Merge(m, src)
}
func (m *MsgUpdateMintRewardActResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMintRewardActResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMintRewardActResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMintRewardActResponse proto.InternalMessageInfo

type MsgClaimMintReward struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Denom     string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Cycle     uint64 `protobuf:"varint,3,opt,name=cycle,proto3" json:"cycle"`
	MintIndex uint64 `protobuf:"varint,4,opt,name=mintIndex,proto3" json:"mintIndex"`
}

func (m *MsgClaimMintReward) Reset()         { *m = MsgClaimMintReward{} }
func (m *MsgClaimMintReward) String() string { return proto.CompactTextString(m) }
func (*MsgClaimMintReward) ProtoMessage()    {}
func (*MsgClaimMintReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd96f257662b770, []int{4}
}
func (m *MsgClaimMintReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimMintReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimMintReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimMintReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimMintReward.Merge(m, src)
}
func (m *MsgClaimMintReward) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimMintReward) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimMintReward.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimMintReward proto.InternalMessageInfo

func (m *MsgClaimMintReward) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimMintReward) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgClaimMintReward) GetCycle() uint64 {
	if m != nil {
		return m.Cycle
	}
	return 0
}

func (m *MsgClaimMintReward) GetMintIndex() uint64 {
	if m != nil {
		return m.MintIndex
	}
	return 0
}

type MsgClaimMintRewardResponse struct {
}

func (m *MsgClaimMintRewardResponse) Reset()         { *m = MsgClaimMintRewardResponse{} }
func (m *MsgClaimMintRewardResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimMintRewardResponse) ProtoMessage()    {}
func (*MsgClaimMintRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd96f257662b770, []int{5}
}
func (m *MsgClaimMintRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimMintRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimMintRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimMintRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimMintRewardResponse.Merge(m, src)
}
func (m *MsgClaimMintRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimMintRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimMintRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimMintRewardResponse proto.InternalMessageInfo

type MsgProvideRewardToken struct {
	Creator string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
}

func (m *MsgProvideRewardToken) Reset()         { *m = MsgProvideRewardToken{} }
func (m *MsgProvideRewardToken) String() string { return proto.CompactTextString(m) }
func (*MsgProvideRewardToken) ProtoMessage()    {}
func (*MsgProvideRewardToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd96f257662b770, []int{6}
}
func (m *MsgProvideRewardToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProvideRewardToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProvideRewardToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProvideRewardToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProvideRewardToken.Merge(m, src)
}
func (m *MsgProvideRewardToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgProvideRewardToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProvideRewardToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProvideRewardToken proto.InternalMessageInfo

func (m *MsgProvideRewardToken) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgProvideRewardTokenResponse struct {
}

func (m *MsgProvideRewardTokenResponse) Reset()         { *m = MsgProvideRewardTokenResponse{} }
func (m *MsgProvideRewardTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProvideRewardTokenResponse) ProtoMessage()    {}
func (*MsgProvideRewardTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd96f257662b770, []int{7}
}
func (m *MsgProvideRewardTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProvideRewardTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProvideRewardTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProvideRewardTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProvideRewardTokenResponse.Merge(m, src)
}
func (m *MsgProvideRewardTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProvideRewardTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProvideRewardTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProvideRewardTokenResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddMintRewardAct)(nil), "stafihub.stafihub.rmintreward.MsgAddMintRewardAct")
	proto.RegisterType((*MsgAddMintRewardActResponse)(nil), "stafihub.stafihub.rmintreward.MsgAddMintRewardActResponse")
	proto.RegisterType((*MsgUpdateMintRewardAct)(nil), "stafihub.stafihub.rmintreward.MsgUpdateMintRewardAct")
	proto.RegisterType((*MsgUpdateMintRewardActResponse)(nil), "stafihub.stafihub.rmintreward.MsgUpdateMintRewardActResponse")
	proto.RegisterType((*MsgClaimMintReward)(nil), "stafihub.stafihub.rmintreward.MsgClaimMintReward")
	proto.RegisterType((*MsgClaimMintRewardResponse)(nil), "stafihub.stafihub.rmintreward.MsgClaimMintRewardResponse")
	proto.RegisterType((*MsgProvideRewardToken)(nil), "stafihub.stafihub.rmintreward.MsgProvideRewardToken")
	proto.RegisterType((*MsgProvideRewardTokenResponse)(nil), "stafihub.stafihub.rmintreward.MsgProvideRewardTokenResponse")
}

func init() { proto.RegisterFile("rmintreward/tx.proto", fileDescriptor_8dd96f257662b770) }

var fileDescriptor_8dd96f257662b770 = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x73, 0x24, 0x2d, 0xca, 0x5b, 0x21, 0x90, 0x1b, 0x90, 0x31, 0xc4, 0x8e, 0xbc, 0x50,
	0x09, 0x61, 0x37, 0x01, 0x06, 0x10, 0x0c, 0x75, 0x27, 0x90, 0x2c, 0x55, 0x16, 0x2c, 0x6c, 0x67,
	0xdf, 0x61, 0xac, 0xc6, 0x77, 0x91, 0xef, 0x5a, 0xd2, 0x09, 0x89, 0x09, 0xc4, 0x82, 0x90, 0xf8,
	0x06, 0xac, 0x7c, 0x8f, 0x8e, 0x1d, 0x11, 0x43, 0x84, 0x92, 0xad, 0x9f, 0x02, 0xd9, 0x8e, 0x9d,
	0xb4, 0xb1, 0x1a, 0xf5, 0xcf, 0x74, 0xef, 0xdd, 0xbd, 0xcf, 0x93, 0xdf, 0x1b, 0x3f, 0x3a, 0x68,
	0x25, 0x71, 0xc4, 0x64, 0x42, 0x3f, 0xe2, 0x84, 0xd8, 0x72, 0x68, 0x0d, 0x12, 0x2e, 0xb9, 0xd2,
	0x16, 0x12, 0xbf, 0x8f, 0x3e, 0xec, 0xf9, 0x56, 0x59, 0xcc, 0xf5, 0x69, 0xad, 0x90, 0x87, 0x3c,
	0xeb, 0xb4, 0xd3, 0x2a, 0x17, 0x69, 0xea, 0xbc, 0x55, 0xcc, 0x09, 0xed, 0x8b, 0xe9, 0x8d, 0x1e,
	0x70, 0x11, 0x73, 0x61, 0xfb, 0x58, 0x50, 0x7b, 0xbf, 0xeb, 0x53, 0x89, 0xbb, 0x76, 0xc0, 0x23,
	0x96, 0xdf, 0x9b, 0x5f, 0x11, 0xac, 0xbb, 0x22, 0xdc, 0x22, 0xc4, 0x8d, 0x98, 0xf4, 0x32, 0x87,
	0xad, 0x40, 0x2a, 0x2a, 0x5c, 0x0f, 0x12, 0x8a, 0x25, 0x4f, 0x54, 0xd4, 0x41, 0x1b, 0x4d, 0xaf,
	0xd8, 0x2a, 0x2d, 0x58, 0x21, 0x94, 0xf1, 0x58, 0xbd, 0x96, 0x9d, 0xe7, 0x1b, 0xc5, 0x81, 0x3a,
	0x0e, 0xa4, 0x5a, 0xef, 0xa0, 0x8d, 0xb5, 0xde, 0xa6, 0x75, 0xe6, 0x10, 0xd6, 0x89, 0x9f, 0xda,
	0xe1, 0x42, 0x7a, 0xa9, 0xd8, 0x6c, 0xc3, 0xbd, 0x0a, 0x14, 0x8f, 0x8a, 0x01, 0x67, 0x82, 0x9a,
	0xbf, 0x11, 0xdc, 0x71, 0x45, 0xf8, 0x76, 0x40, 0xb0, 0xa4, 0x97, 0xa3, 0x35, 0x60, 0x25, 0x38,
	0x08, 0xfa, 0x34, 0xe3, 0x6d, 0x38, 0xcd, 0xe3, 0x91, 0x91, 0x1f, 0x78, 0xf9, 0x52, 0x8c, 0xd3,
	0xb8, 0xcc, 0x38, 0x1d, 0xd0, 0xab, 0x71, 0xcb, 0x89, 0x7e, 0x20, 0x50, 0x5c, 0x11, 0x6e, 0xf7,
	0x71, 0x14, 0xcf, 0x3a, 0xae, 0x7e, 0x9a, 0x87, 0xd0, 0x4c, 0x71, 0x5f, 0x31, 0x42, 0x87, 0xd9,
	0x4c, 0x0d, 0xe7, 0xc6, 0xf1, 0xc8, 0x98, 0x1d, 0x7a, 0xb3, 0xd2, 0xbc, 0x0f, 0xda, 0x22, 0x53,
	0x89, 0xfc, 0x13, 0xc1, 0x6d, 0x57, 0x84, 0x3b, 0x09, 0xdf, 0x8f, 0x08, 0xcd, 0x2f, 0xdf, 0xf0,
	0x5d, 0xca, 0xce, 0xa0, 0xf6, 0x61, 0x15, 0xc7, 0x7c, 0x8f, 0xc9, 0x0c, 0x7b, 0xad, 0x77, 0xd7,
	0xca, 0x43, 0x69, 0xa5, 0xa1, 0xb4, 0xa6, 0xa1, 0xb4, 0xb6, 0x79, 0xc4, 0x1c, 0xfb, 0x70, 0x64,
	0xd4, 0xfe, 0x8e, 0x8c, 0x07, 0x61, 0x24, 0xd3, 0xbf, 0x39, 0xe0, 0xb1, 0x3d, 0x4d, 0x70, 0xbe,
	0x3c, 0x12, 0x64, 0xd7, 0x96, 0x07, 0x03, 0x2a, 0x32, 0x81, 0x37, 0x75, 0x36, 0x0d, 0x68, 0x57,
	0x62, 0x15, 0xe0, 0xbd, 0x5f, 0x0d, 0xa8, 0xbb, 0x22, 0x54, 0x3e, 0x23, 0xb8, 0xb5, 0x90, 0xf6,
	0xde, 0xb2, 0x2f, 0xbc, 0x18, 0x4b, 0xed, 0xf9, 0xf9, 0x35, 0x05, 0x8c, 0xf2, 0x0d, 0xc1, 0x7a,
	0x55, 0x8e, 0x9f, 0x2e, 0xf7, 0xac, 0x90, 0x69, 0x2f, 0x2f, 0x24, 0x2b, 0x69, 0x3e, 0xc1, 0xcd,
	0xd3, 0x11, 0xec, 0x2e, 0x77, 0x3c, 0x25, 0xd1, 0x9e, 0x9d, 0x5b, 0x52, 0x02, 0x7c, 0x41, 0xa0,
	0x54, 0x24, 0xea, 0xc9, 0x72, 0xc7, 0x45, 0x95, 0xf6, 0xe2, 0x22, 0xaa, 0x02, 0xc5, 0x79, 0x7d,
	0x38, 0xd6, 0xd1, 0xd1, 0x58, 0x47, 0xff, 0xc6, 0x3a, 0xfa, 0x3e, 0xd1, 0x6b, 0x47, 0x13, 0xbd,
	0xf6, 0x67, 0xa2, 0xd7, 0xde, 0x6d, 0xce, 0x45, 0xb2, 0x30, 0x9e, 0x15, 0x43, 0xfb, 0xc4, 0x6b,
	0x9e, 0x06, 0xd4, 0x5f, 0xcd, 0x9e, 0xd8, 0xc7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xbe,
	0xd0, 0x8f, 0xe9, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddMintRewardAct(ctx context.Context, in *MsgAddMintRewardAct, opts ...grpc.CallOption) (*MsgAddMintRewardActResponse, error)
	UpdateMintRewardAct(ctx context.Context, in *MsgUpdateMintRewardAct, opts ...grpc.CallOption) (*MsgUpdateMintRewardActResponse, error)
	ClaimMintReward(ctx context.Context, in *MsgClaimMintReward, opts ...grpc.CallOption) (*MsgClaimMintRewardResponse, error)
	ProvideRewardToken(ctx context.Context, in *MsgProvideRewardToken, opts ...grpc.CallOption) (*MsgProvideRewardTokenResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddMintRewardAct(ctx context.Context, in *MsgAddMintRewardAct, opts ...grpc.CallOption) (*MsgAddMintRewardActResponse, error) {
	out := new(MsgAddMintRewardActResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rmintreward.Msg/AddMintRewardAct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMintRewardAct(ctx context.Context, in *MsgUpdateMintRewardAct, opts ...grpc.CallOption) (*MsgUpdateMintRewardActResponse, error) {
	out := new(MsgUpdateMintRewardActResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rmintreward.Msg/UpdateMintRewardAct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimMintReward(ctx context.Context, in *MsgClaimMintReward, opts ...grpc.CallOption) (*MsgClaimMintRewardResponse, error) {
	out := new(MsgClaimMintRewardResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rmintreward.Msg/ClaimMintReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProvideRewardToken(ctx context.Context, in *MsgProvideRewardToken, opts ...grpc.CallOption) (*MsgProvideRewardTokenResponse, error) {
	out := new(MsgProvideRewardTokenResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rmintreward.Msg/ProvideRewardToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddMintRewardAct(context.Context, *MsgAddMintRewardAct) (*MsgAddMintRewardActResponse, error)
	UpdateMintRewardAct(context.Context, *MsgUpdateMintRewardAct) (*MsgUpdateMintRewardActResponse, error)
	ClaimMintReward(context.Context, *MsgClaimMintReward) (*MsgClaimMintRewardResponse, error)
	ProvideRewardToken(context.Context, *MsgProvideRewardToken) (*MsgProvideRewardTokenResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddMintRewardAct(ctx context.Context, req *MsgAddMintRewardAct) (*MsgAddMintRewardActResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMintRewardAct not implemented")
}
func (*UnimplementedMsgServer) UpdateMintRewardAct(ctx context.Context, req *MsgUpdateMintRewardAct) (*MsgUpdateMintRewardActResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMintRewardAct not implemented")
}
func (*UnimplementedMsgServer) ClaimMintReward(ctx context.Context, req *MsgClaimMintReward) (*MsgClaimMintRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimMintReward not implemented")
}
func (*UnimplementedMsgServer) ProvideRewardToken(ctx context.Context, req *MsgProvideRewardToken) (*MsgProvideRewardTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideRewardToken not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddMintRewardAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddMintRewardAct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddMintRewardAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rmintreward.Msg/AddMintRewardAct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddMintRewardAct(ctx, req.(*MsgAddMintRewardAct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMintRewardAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMintRewardAct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMintRewardAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rmintreward.Msg/UpdateMintRewardAct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMintRewardAct(ctx, req.(*MsgUpdateMintRewardAct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimMintReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimMintReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimMintReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rmintreward.Msg/ClaimMintReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimMintReward(ctx, req.(*MsgClaimMintReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProvideRewardToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProvideRewardToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProvideRewardToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rmintreward.Msg/ProvideRewardToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProvideRewardToken(ctx, req.(*MsgProvideRewardToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stafihub.stafihub.rmintreward.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMintRewardAct",
			Handler:    _Msg_AddMintRewardAct_Handler,
		},
		{
			MethodName: "UpdateMintRewardAct",
			Handler:    _Msg_UpdateMintRewardAct_Handler,
		},
		{
			MethodName: "ClaimMintReward",
			Handler:    _Msg_ClaimMintReward_Handler,
		},
		{
			MethodName: "ProvideRewardToken",
			Handler:    _Msg_ProvideRewardToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rmintreward/tx.proto",
}

func (m *MsgAddMintRewardAct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMintRewardAct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMintRewardAct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Act != nil {
		{
			size, err := m.Act.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddMintRewardActResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMintRewardActResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMintRewardActResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMintRewardAct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMintRewardAct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMintRewardAct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Act != nil {
		{
			size, err := m.Act.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Cycle != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Cycle))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMintRewardActResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMintRewardActResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMintRewardActResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimMintReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimMintReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimMintReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MintIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MintIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.Cycle != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Cycle))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimMintRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimMintRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimMintRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProvideRewardToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProvideRewardToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProvideRewardToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProvideRewardTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProvideRewardTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProvideRewardTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddMintRewardAct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Act != nil {
		l = m.Act.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddMintRewardActResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMintRewardAct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Cycle != 0 {
		n += 1 + sovTx(uint64(m.Cycle))
	}
	if m.Act != nil {
		l = m.Act.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMintRewardActResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimMintReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Cycle != 0 {
		n += 1 + sovTx(uint64(m.Cycle))
	}
	if m.MintIndex != 0 {
		n += 1 + sovTx(uint64(m.MintIndex))
	}
	return n
}

func (m *MsgClaimMintRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProvideRewardToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgProvideRewardTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddMintRewardAct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMintRewardAct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMintRewardAct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Act", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Act == nil {
				m.Act = &MintRewardActPost{}
			}
			if err := m.Act.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMintRewardActResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMintRewardActResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMintRewardActResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMintRewardAct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMintRewardAct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMintRewardAct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cycle", wireType)
			}
			m.Cycle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cycle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Act", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Act == nil {
				m.Act = &MintRewardActPost{}
			}
			if err := m.Act.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMintRewardActResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMintRewardActResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMintRewardActResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimMintReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimMintReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimMintReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cycle", wireType)
			}
			m.Cycle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cycle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintIndex", wireType)
			}
			m.MintIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimMintRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimMintRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimMintRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProvideRewardToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProvideRewardToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProvideRewardToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProvideRewardTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProvideRewardTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProvideRewardTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
