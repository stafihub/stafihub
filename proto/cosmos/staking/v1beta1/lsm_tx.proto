syntax = "proto3";
package cosmos.staking.v1beta1;

import "gogoproto/gogo.proto";

import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/stafihub/stafihub/x/ledger/types";

// MsgRedeemTokensForShares redeems a tokenized share back into a native
// delegation
message MsgRedeemTokensForShares {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string delegator_address = 1
      [ (gogoproto.moretags) = "yaml:\"delegator_address\"" ];
  cosmos.base.v1beta1.Coin amount = 2 [ (gogoproto.nullable) = false ];
}

// MsgRedeemTokensForSharesResponse defines the Msg/MsgRedeemTokensForShares
// response type.
message MsgRedeemTokensForSharesResponse {
  cosmos.base.v1beta1.Coin amount = 1 [ (gogoproto.nullable) = false ];
}

// MsgTransferTokenizeShareRecord transfer a tokenize share record
message MsgTransferTokenizeShareRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  uint64 tokenize_share_record_id = 1;
  string sender                   = 2;
  string new_owner                = 3;
}

// MsgTransferTokenizeShareRecordResponse defines the Msg/MsgTransferTokenizeShareRecord response type.
message MsgTransferTokenizeShareRecordResponse {}


// MsgTokenizeShares tokenizes a delegation
message MsgTokenizeShares {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   delegator_address     = 1 [(gogoproto.moretags) = "yaml:\"delegator_address\""];
  string                   validator_address     = 2 [(gogoproto.moretags) = "yaml:\"validator_address\""];
  cosmos.base.v1beta1.Coin amount                = 3 [(gogoproto.nullable) = false];
  string                   tokenized_share_owner = 4;
}

// MsgTokenizeSharesResponse defines the Msg/MsgTokenizeShares response type.
message MsgTokenizeSharesResponse {
  cosmos.base.v1beta1.Coin amount = 1 [(gogoproto.nullable) = false];
}
